name: Build and Deploy

on:
  push:
    branches: [lince/test-deploy]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production # This tells GitHub to use the production environment secrets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Fetch last 2 commits to compare

      - name: Detect changed sections
        id: detect-changes
        run: |
          echo "🔍 Detecting changes in frontend/src/pages/ sections..."

          # Get all changed files in frontend/src/pages/
          all_changed=$(git diff --name-only HEAD~1 HEAD | grep "^frontend/src/pages/" || true)

          if [ -z "$all_changed" ]; then
            echo "❌ No changes detected in frontend/src/pages/. Skipping build and deploy."
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "changed_sections=" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "📁 All changed files:"
          echo "$all_changed" | sed 's/^/ - /'

          # Extract unique directory names from changed files
          changed_dirs=""
          for file in $all_changed; do
            # Remove frontend/src/pages/ prefix
            relative_path=${file#frontend/src/pages/}
            
            # Check if it's a file in a subdirectory or root
            if [[ "$relative_path" == */* ]]; then
              # Extract directory name (first part before /)
              dir_name=$(echo "$relative_path" | cut -d'/' -f1)
              # Add to changed_dirs if not already present
              if [[ ! "$changed_dirs" =~ (^|[[:space:]])$dir_name($|[[:space:]]) ]]; then
                changed_dirs="$changed_dirs $dir_name"
              fi
            fi
          done

          # Clean up whitespace
          changed_dirs=$(echo $changed_dirs | xargs)

          if [ -n "$changed_dirs" ]; then
            echo "📦 Changed sections detected: $changed_dirs"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "changed_sections=$changed_dirs" >> $GITHUB_OUTPUT
          else
            echo "❌ No section changes detected. Skipping build and deploy."
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "changed_sections=" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.detect-changes.outputs.should_deploy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      - name: Exclude unchanged sections from build
        if: steps.detect-changes.outputs.should_deploy == 'true'
        run: |
          echo "🔧 Excluding unchanged sections from build..."
          cd frontend/src/pages

          # Get the list of changed sections
          changed_sections="${{ steps.detect-changes.outputs.changed_sections }}"
          echo "Building only these sections: $changed_sections"

          # Find all directories and exclude those not in changed_sections
          for dir in */; do
            if [ -d "$dir" ]; then
              dir_name=${dir%/}  # Remove trailing slash
              
              # Skip if directory name is in changed_sections or already has underscore
              if [[ "$changed_sections" =~ (^|[[:space:]])$dir_name($|[[:space:]]) ]] || [[ "$dir_name" == _* ]]; then
                echo "✅ Including: $dir_name"
              else
                echo "❌ Excluding: $dir_name -> _$dir_name"
                mv "$dir" "_$dir"
              fi
            fi
          done

      - name: Install dependencies and build
        if: steps.detect-changes.outputs.should_deploy == 'true'
        run: |
          echo "📦 Installing dependencies and building..."
          cd frontend
          npm install
          npx astro build

      - name: Restore original folder structure
        if: steps.detect-changes.outputs.should_deploy == 'true'
        run: |
          echo "🔄 Restoring original folder structure..."
          cd frontend/src/pages

          # Remove underscores from all directories
          for dir in _*/; do
            if [ -d "$dir" ]; then
              original_name=${dir#_}  # Remove leading underscore
              original_name=${original_name%/}  # Remove trailing slash
              echo "Restoring _$original_name to $original_name"
              mv "$dir" "$original_name/"
            fi
          done

      - name: Setup SSH
        if: steps.detect-changes.outputs.should_deploy == 'true'
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        if: steps.detect-changes.outputs.should_deploy == 'true'
        run: |
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        if: steps.detect-changes.outputs.should_deploy == 'true'
        run: |
          echo "🚀 Deploying to server..."
          echo "Deployed sections: ${{ steps.detect-changes.outputs.changed_sections }}"
          rsync -rvz --no-perms --no-owner --no-group --no-times --progress ./frontend/dist/ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:lince_test_deploy/

      - name: Cleanup
        if: steps.detect-changes.outputs.should_deploy == 'true'
        run: |
          echo "✅ Deployment complete!"
          echo "🎉 Successfully deployed sections: ${{ steps.detect-changes.outputs.changed_sections }}"

      - name: Skip deployment message
        if: steps.detect-changes.outputs.should_deploy == 'false'
        run: |
          echo "⏭️ Skipping deployment - no changes detected in any frontend/src/pages/ sections"
