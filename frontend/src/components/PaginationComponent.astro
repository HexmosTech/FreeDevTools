---
export interface Props {
  currentPage: number;
  totalPages: number;
  baseUrl: string;
  showGoToPage?: boolean;
  hashFragment?: string;
}

const { 
  currentPage, 
  totalPages, 
  baseUrl, 
  showGoToPage = true,
  hashFragment = "#pagination-info"
} = Astro.props;

// Helper function to build URLs with hash fragment
const buildUrl = (page: number): string => {
  if (page === 1) {
    return `${baseUrl}${hashFragment}`;
  }
  return `${baseUrl}${page}/${hashFragment}`;
};
---

<!-- Bottom Pagination -->
<div class="mt-8 pt-6 border-t border-slate-200 dark:border-slate-700">
  <!-- Middle section with page numbers -->
  <div class="flex items-center justify-center gap-2 mb-4">
    {currentPage > 1 ? (
      <a
        href={buildUrl(currentPage - 1)}
        class="inline-flex items-center px-3 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors"
      >
        ← Previous
      </a>
    ) : (
      <span class="inline-flex items-center px-3 py-2 text-sm font-medium text-slate-400 dark:text-slate-500 bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded cursor-not-allowed">
        ← Previous
      </span>
    )}

    <!-- Page Numbers -->
    {currentPage > 3 && (
      <>
        <a
          href={buildUrl(1)}
          class="px-3 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors"
        >
          1
        </a>
        <span class="px-2 text-slate-400">...</span>
      </>
    )}

    {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
      const pageNum = Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + i;
      if (pageNum > totalPages) return null;

      const isCurrentPage = pageNum === currentPage;
      const pageUrl = buildUrl(pageNum);

      return (
        <a
          href={pageUrl}
          class={`px-3 py-2 text-sm font-medium rounded transition-colors ${isCurrentPage
            ? 'text-white bg-blue-600 border border-blue-600'
            : 'text-slate-600 dark:text-slate-400 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-600'
            }`}
        >
          {pageNum}
        </a>
      );
    })}

    {currentPage < totalPages - 2 && (
      <>
        <span class="px-2 text-slate-400">...</span>
        <a
          href={buildUrl(totalPages)}
          class="px-3 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors"
        >
          {totalPages}
        </a>
      </>
    )}

    {currentPage < totalPages ? (
      <a
        href={buildUrl(currentPage + 1)}
        class="inline-flex items-center px-3 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors"
      >
        Next →
      </a>
    ) : (
      <span class="inline-flex items-center px-3 py-2 text-sm font-medium text-slate-400 dark:text-slate-500 bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded cursor-not-allowed">
        Next →
      </span>
    )}
  </div>

  <!-- Go to page section -->
  {showGoToPage && (
    <div class="flex items-center justify-center gap-2">
      <div class="flex items-center gap-2">
        <span class="text-sm text-slate-600 dark:text-slate-400">Go to page:</span>
        <input
          type="number"
          min="1"
          max={totalPages}
          value={currentPage}
          class="w-16 px-2 py-1 text-sm border border-slate-300 dark:border-slate-600 rounded bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          onkeypress={`if(event.key==='Enter'){const pageNum=parseInt(this.value);const totalPages=parseInt(this.max);if(pageNum>=1&&pageNum<=totalPages){const url=pageNum===1?'${baseUrl}${hashFragment}':'${baseUrl}'+pageNum+'/${hashFragment}';window.location.href=url}}`}
        />
        <button
          onclick={`const input=this.previousElementSibling;const pageNum=parseInt(input.value);const totalPages=parseInt(input.max);if(pageNum>=1&&pageNum<=totalPages){const url=pageNum===1?'${baseUrl}${hashFragment}':'${baseUrl}'+pageNum+'/${hashFragment}';window.location.href=url}`}
          class="px-3 py-1 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded transition-colors"
        >
          Go
        </button>
      </div>
    </div>
  )}
</div>

<script>
  // Scroll to pagination info only if hash is present in URL
  if (window.location.hash === '#pagination-info') {
    const paginationInfo = document.getElementById('pagination-info');
    if (paginationInfo) {
      paginationInfo.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }
</script>