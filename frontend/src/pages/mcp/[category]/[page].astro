---
import ToolContainer from '@/components/tool/ToolContainer.tsx';
import ToolHead from '@/components/tool/ToolHead.tsx';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { formatRepositoryName } from '@/lib/utils';
import RepositoryCard from '../_McpRepoCard.tsx';
import { getEntry } from 'astro:content';
import { generateMcpCategoryPaginatedPaths } from '@/lib/mcp-utils';

// Generate static paths for all MCP categories with pagination
export async function getStaticPaths({ paginate }) {
  return await generateMcpCategoryPaginatedPaths({ paginate });
}

// Get category and page from params
const { category } = Astro.params;
const { page } = Astro.props;

if (!category) {
  throw new Error('Category parameter is required');
}

// Get category data
const categoryEntry = await getEntry('mcpCategoryData', category);

if (!categoryEntry) {
  throw new Error(`Category '${category}' not found`);
}

const categoryData = categoryEntry.data;
const categoryName = categoryData.categoryDisplay;
const categoryDescription = categoryData.description || '';

// SEO data
const title = `${categoryName} MCP Repositories - Page ${page.currentPage} of ${page.lastPage} - ${page.total} Model Context Protocol Servers`;
const description = `Browse ${page.total} ${categoryName} MCP repositories. Page ${page.currentPage} of ${page.lastPage}. Find Model Context Protocol servers for ${categoryName.toLowerCase()}. Free, no registration required.`;
const keywords = [
  'MCP',
  'Model Context Protocol',
  categoryName,
  'MCP servers',
  'AI tools',
  'developer tools',
  'open source',
  'repositories',
  'pagination'
];

// Breadcrumb data
const breadcrumbItems = [
  { label: 'Free DevTools', href: '/freedevtools/' },
  { label: 'MCP Directory', href: '/freedevtools/mcp/' },
  { label: categoryName }
];
---

<BaseLayout 
  name={`${categoryName} MCP Repositories`}
  title={title}
  path={`/freedevtools/mcp/${category}/`}
  description={description}
  canonical={`https://hexmos.com/freedevtools/mcp/${category}/${page.currentPage}/`}
  themeColor="#3b82f6"
  keywords={keywords}
  ogImage="https://hexmos.com/freedevtools/tool-banners/mcp-directory-banner.png"
  twitterImage="https://hexmos.com/freedevtools/tool-banners/mcp-directory-banner.png"
  datePublished="2025-01-30"
  softwareVersion="1.0.0"
  features={[
    `Browse ${page.total} MCP repositories in ${categoryName}`,
    'Filter by license and quality scores',
    'Search and sort functionality',
    'Detailed repository information',
    'Pagination support'
  ]}
>
  <ToolContainer>
    
    <ToolHead 
      name={`${categoryName} MCP Repositories`}
      description={`${page.total} repositories in this category. ${categoryDescription}`}
      breadcrumbItems={breadcrumbItems}
      client:load
    />

    <!-- Pagination Info - Top -->
    <div class="bg-slate-50 dark:bg-slate-800 rounded-lg p-4 mb-6 mt-6">
      <div class="flex items-center justify-between">
        <div class="text-sm text-slate-600 dark:text-slate-400">
          Showing {page.data.length} of {page.total} repositories (Page {page.currentPage} of {page.lastPage})
        </div>
        <div class="flex items-center gap-2">
          {page.url.prev ? (
            <a 
              href={page.url.prev}
              class="inline-flex items-center px-3 py-1 text-sm font-medium text-slate-600 dark:text-slate-400 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors"
            >
              ← Previous
            </a>
          ) : (
            <span class="inline-flex items-center px-3 py-1 text-sm font-medium text-slate-400 dark:text-slate-500 bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded cursor-not-allowed">
              ← Previous
            </span>
          )}
          
          <span class="text-sm text-slate-600 dark:text-slate-400 font-medium">
            {page.currentPage} / {page.lastPage}
          </span>
          
          {page.url.next ? (
            <a 
              href={page.url.next}
              class="inline-flex items-center px-3 py-1 text-sm font-medium text-slate-600 dark:text-slate-400 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors"
            >
              Next →
            </a>
          ) : (
            <span class="inline-flex items-center px-3 py-1 text-sm font-medium text-slate-400 dark:text-slate-500 bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded cursor-not-allowed">
              Next →
            </span>
          )}
        </div>
      </div>
    </div>


    <!-- Repositories List -->
    <div id="repositories-grid" class="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-4">
      {page.data.map((server) => {
        const formattedName = formatRepositoryName(server.name);
        // Use the repositoryId that was added to the server object
        const repositoryId = server.repositoryId;
        return (
          <RepositoryCard 
            server={server} 
            formattedName={formattedName}
            category={category}
            repositoryId={repositoryId}
            client:load
          />
        );
      })}
    </div>
    
    <!-- Pagination Controls - Bottom -->
    <div class="mt-8 pt-6 border-t border-slate-200 dark:border-slate-700">
      <!-- Middle section with page numbers -->
      <div class="flex items-center justify-center gap-2 mb-4">
        {page.url.prev ? (
          <a 
            href={page.url.prev}
            class="inline-flex items-center px-3 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors"
          >
            ← Previous
          </a>
        ) : (
          <span class="inline-flex items-center px-3 py-2 text-sm font-medium text-slate-400 dark:text-slate-500 bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded cursor-not-allowed">
            ← Previous
          </span>
        )}
        
        <!-- Page Numbers -->
        {page.url.first && page.currentPage > 3 && (
          <>
            <a 
              href={page.url.first}
              class="px-3 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors"
            >
              1
            </a>
            <span class="px-2 text-slate-400">...</span>
          </>
        )}
        
        {Array.from({ length: Math.min(5, page.lastPage) }, (_, i) => {
          const pageNum = Math.max(1, Math.min(page.lastPage - 4, page.currentPage - 2)) + i;
          if (pageNum > page.lastPage) return null;
          
          const isCurrentPage = pageNum === page.currentPage;
          const pageUrl = pageNum === 1 
            ? `/freedevtools/mcp/${category}/`
            : `/freedevtools/mcp/${category}/${pageNum}/`;
          
          return (
            <a 
              href={pageUrl}
              class={`px-3 py-2 text-sm font-medium rounded transition-colors ${
                isCurrentPage 
                  ? 'text-white bg-blue-600 border border-blue-600' 
                  : 'text-slate-600 dark:text-slate-400 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-600'
              }`}
            >
              {pageNum}
            </a>
          );
        })}
        
        {page.url.last && page.currentPage < page.lastPage - 2 && (
          <>
            <span class="px-2 text-slate-400">...</span>
            <a 
              href={page.url.last}
              class="px-3 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors"
            >
              {page.lastPage}
            </a>
          </>
        )}
        
        {page.url.next ? (
          <a 
            href={page.url.next}
            class="inline-flex items-center px-3 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors"
          >
            Next →
          </a>
        ) : (
          <span class="inline-flex items-center px-3 py-2 text-sm font-medium text-slate-400 dark:text-slate-500 bg-slate-100 dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded cursor-not-allowed">
            Next →
          </span>
        )}
      </div>
      
      <!-- Bottom section with go to page and info -->
      <div class="flex flex-col sm:flex-row items-center justify-center gap-4">
        <!-- Go to page input -->
        <div class="flex items-center gap-2">
          <label for="go-to-page" class="text-sm text-slate-600 dark:text-slate-400">Go to page:</label>
          <input 
            type="number" 
            id="go-to-page" 
            min="1" 
            max={page.lastPage}
            value={page.currentPage}
            class="w-16 px-2 py-1 text-sm border border-slate-300 dark:border-slate-600 rounded bg-white dark:bg-slate-700 text-slate-900 dark:text-slate-100"
          />
          <button 
            id="go-to-page-btn"
            class="px-3 py-1 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded transition-colors"
            type="button"
            onclick="handleGoToPage()"
          >
            GO
          </button>
        </div>
        
        <!-- Page info -->
        <div class="text-sm text-slate-600 dark:text-slate-400">
          Page {page.currentPage} of {page.lastPage} • {page.total} total items
        </div>
      </div>
    </div>

    <!-- Credits Section -->
    <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-wrap gap-4">
        <a 
          href="/freedevtools/mcp/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          ←  Back to MCP Directory
        </a>
        <a 
          href="/freedevtools/mcp/credits/"
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-slate-50 dark:bg-slate-800 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
        >
          Credits & Acknowledgments
        </a>
      </div>
    </div>
    
  </ToolContainer>
</BaseLayout>

  <script define:vars={{
    categoryServers: page.data,
    currentPage: page.currentPage,
    lastPage: page.lastPage,
    category: category
  }}>
    console.log('Script loaded on client side!');

    // Global function for go to page
    window.handleGoToPage = function() {
      const pageInput = document.getElementById('go-to-page');
      const pageNum = parseInt(pageInput.value);
      
      console.log('Page number:', pageNum, 'Last page:', lastPage);
      
      if (pageNum >= 1 && pageNum <= lastPage) {
        const url = pageNum === 1 
          ? `/freedevtools/mcp/${category}/`
          : `/freedevtools/mcp/${category}/${pageNum}/`;
        console.log('Navigating to:', url);
        window.location.href = url;
      } else {
        alert(`Please enter a page number between 1 and ${lastPage}`);
      }
    }
  
  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded in Astro pagination!');
    // Items per page is static in Astro pagination

    // Handle go to page
    const goToPageBtn = document.getElementById('go-to-page-btn');
    console.log('GO button element:', goToPageBtn);
    
    // Test if button exists and add a simple click handler
    if (goToPageBtn) {
      console.log('GO button found, adding event listener');
      
      // Simple test click handler
      goToPageBtn.addEventListener('click', function(e) {
        console.log('SIMPLE CLICK HANDLER TRIGGERED!');
        alert('Button clicked!');
      });
      // Handle go to page click
      goToPageBtn.addEventListener('click', (e) => {
        console.log('GO button clicked in Astro!');
        e.preventDefault();
        e.stopPropagation();
        const pageInput = document.getElementById('go-to-page');
        console.log('Page input element:', pageInput);
        if (pageInput) {
          const pageNum = parseInt(pageInput.value);
          console.log('Page number:', pageNum, 'Last page:', lastPage);
          
          if (pageNum >= 1 && pageNum <= lastPage) {
            const url = pageNum === 1 
              ? `/freedevtools/mcp/${category}/`
              : `/freedevtools/mcp/${category}/${pageNum}/`;
            console.log('Navigating to:', url);
            window.location.href = url;
          } else {
            alert(`Please enter a page number between 1 and ${lastPage}`);
          }
        } else {
          console.log('Page input not found!');
        }
      });
      
    }

    // Handle enter key in go to page input
    const goToPageInput = document.getElementById('go-to-page');
    if (goToPageInput) {
      goToPageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          const goToPageBtn = document.getElementById('go-to-page-btn');
          if (goToPageBtn) {
            goToPageBtn.click();
          }
        }
      });
    }

  });

</script>