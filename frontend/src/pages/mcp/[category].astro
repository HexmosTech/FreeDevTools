---
import ToolContainer from '@/components/tool/ToolContainer.tsx';
import ToolHead from '@/components/tool/ToolHead.tsx';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { formatRepositoryName } from '@/lib/utils';
import RepositoryCard from './_McpRepoCard.tsx';
import { getEntry } from 'astro:content';
import { generateMcpCategoryPaths } from '@/lib/mcp-utils';

// Generate static paths for all MCP categories using optimized utility
export async function getStaticPaths() {
  return await generateMcpCategoryPaths();
}

// Get category from params
const { category } = Astro.params;

if (!category) {
  throw new Error('Category parameter is required');
}

// Use getEntry for direct access instead of getCollection + find
// This is more efficient as it directly accesses the specific category file
const categoryEntry = await getEntry('mcpCategoryData', category);

if (!categoryEntry) {
  throw new Error(`Category '${category}' not found`);
}

const categoryData = categoryEntry.data;
const categoryName = categoryData.categoryDisplay;
const categoryDescription = categoryData.description || '';
const categoryServers = Object.values(categoryData.repositories);


// SEO data
const title = `${categoryName} MCP Repositories - ${categoryServers.length} Model Context Protocol Servers`;
const description = `Browse ${categoryServers.length} ${categoryName} MCP repositories. Find Model Context Protocol servers for ${categoryName.toLowerCase()}. Free, no registration required.`;
const keywords = [
  'MCP',
  'Model Context Protocol',
  categoryName,
  'MCP servers',
  'AI tools',
  'developer tools',
  'open source',
  'repositories'
];

// Breadcrumb data
const breadcrumbItems = [
  { label: 'Free DevTools', href: '/freedevtools/' },
  { label: 'MCP Directory', href: '/freedevtools/mcp/' },
  { label: categoryName }
];
---

<BaseLayout 
  name={`${categoryName} MCP Repositories`}
  title={title}
  path={`/freedevtools/mcp/${category}/`}
  description={description}
  canonical={`https://hexmos.com/freedevtools/mcp/${category}/`}
  themeColor="#3b82f6"
  keywords={keywords}
  ogImage="https://hexmos.com/freedevtools/tool-banners/mcp-directory-banner.png"
  twitterImage="https://hexmos.com/freedevtools/tool-banners/mcp-directory-banner.png"
  datePublished="2025-01-30"
  softwareVersion="1.0.0"
  features={[
    `Browse ${categoryServers.length} MCP repositories in ${categoryName}`,
    'Filter by license and quality scores',
    'Search and sort functionality',
    'Detailed repository information'
  ]}
>
  <ToolContainer>
    
    <ToolHead 
      name={`${categoryName} MCP Repositories`}
      description={`${categoryServers.length} repositories in this category. ${categoryDescription}`}
      breadcrumbItems={breadcrumbItems}
      client:load
    />

    <!-- Search Bar -->
    <div class="max-w-md mb-6 mt-6">
      <div class="relative">
        <input 
          type="text" 
          id="repository-search"
          placeholder="Search repositories by name or description..."
          class="w-full px-4 py-2 pl-10 pr-4 text-sm border border-slate-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100 placeholder-slate-500 dark:placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg class="h-5 w-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
      </div>
    </div>


    <!-- Repositories List -->
    <div id="repositories-grid" class="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-4">
      {Object.entries(categoryData.repositories).map(([repositoryId, server]) => {
        const formattedName = formatRepositoryName(server.name);
        return (
          <RepositoryCard 
            server={server} 
            formattedName={formattedName}
            category={category}
            client:load
          />
        );
      })}
    </div>
    

    <!-- Credits Section -->
    <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-wrap gap-4">
        <a 
          href="/freedevtools/mcp/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          ‚Üê  Back to MCP Directory
        </a>
        <a 
          href="/freedevtools/mcp/credits/"
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-slate-50 dark:bg-slate-800 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
        >
          Credits & Acknowledgments
        </a>
      </div>
    </div>
    
    </ToolContainer>
</BaseLayout>

<script define:vars={{ categoryServers }}>
  // Filter repositories based on search query
  function filterRepositories(repositories, query) {
    if (!query.trim()) {
      return repositories;
    }
    
    const searchLower = query.toLowerCase();
    return repositories.filter(server => 
      server.name.toLowerCase().includes(searchLower) ||
      server.description.toLowerCase().includes(searchLower) ||
      server.license.toLowerCase().includes(searchLower)
    );
  }
  
  // Handle search
  function handleSearch(query) {
    const filteredRepositories = filterRepositories(categoryServers, query);
    const repositoriesGrid = document.getElementById('repositories-grid');
    const repositoryCards = repositoriesGrid.querySelectorAll('[data-repo-name]');
    
    if (filteredRepositories.length === 0) {
      repositoriesGrid.innerHTML = `
        <div class="col-span-1 lg:col-span-2 text-center py-12">
          <div class="text-6xl mb-4">üîç</div>
          <h3 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2">
            No repositories found
          </h3>
          <p class="text-gray-600 dark:text-gray-400">
            ${query ? 'No repositories match your search criteria.' : 'There are no MCP repositories in this category yet.'}
          </p>
        </div>
      `;
    } else {
      // Get the names of repositories that should be visible
      const visibleRepoNames = new Set(filteredRepositories.map(repo => repo.name));
      
      // Show/hide cards based on search results
      repositoryCards.forEach((card) => {
        const repoName = card.dataset.repoName;
        if (repoName && visibleRepoNames.has(repoName)) {
          card.classList.remove('hidden');
        } else {
          card.classList.add('hidden');
        }
      });
    }
  }
  
  // Set up search event listener
  document.addEventListener('input', (e) => {
    if (e.target.id === 'repository-search') {
      handleSearch(e.target.value);
    }
  });
</script>
