---
import BaseLayout from '../../layouts/BaseLayout.astro';
import AdBanner from '../../components/banner/AdBanner';
import Pagination from '../../components/Pagination.astro';
import BottomPagination from '../../components/BottomPagination.astro';
import { getCollection } from 'astro:content';

const ITEMS_PER_PAGE = 20;

export async function getStaticPaths() {
  const svgIcons = await (getCollection as any)('svgicons');
  
  const categories = new Set<string>();
  svgIcons.forEach((entry: any) => {
    const category = entry.data?.category || 'general';
    categories.add(category);
  });
  
  return Array.from(categories).map(category => ({
    params: { category },
    props: { category }
  }));
}

const { category } = Astro.params;
const { category: categoryProp } = Astro.props;

async function getCategoryIcons() {
  // Use direct file loading instead of content collection
  const { glob } = await import('glob');
  const fs = await import('fs/promises');
  const path = await import('path');
  
  const svgFiles = await glob('**/*.svg', { cwd: './src/pages/svg_icons/icons' });
  
  const svgIcons = await Promise.all(svgFiles.map(async file => {
    const filePath = path.join('./src/pages/svg_icons/icons', file);
    const content = await fs.readFile(filePath, 'utf-8');
    return {
      id: file,
      data: {},
      body: content
    };
  }));
  
  return svgIcons
    .filter((entry: any) => {
      // Determine category from directory structure or frontmatter
      let entryCategory = 'general';
      const pathParts = entry.id.split("/");
      if (pathParts.length > 1) {
        const dirName = pathParts[pathParts.length - 2];
        if (dirName === 'arcticons') {
          entryCategory = 'technology';
        } else if (dirName === 'free-icons') {
          entryCategory = 'general';
        } else {
          entryCategory = dirName;
        }
      }
      
      // Override with frontmatter if available
      entryCategory = entry.data?.category || entryCategory;
      
      return entryCategory === category;
    })
    .map((entry: any) => {
      const pathParts = entry.id.split("/");
      const fileName = pathParts[pathParts.length - 1];
      const iconName = fileName.replace(".svg", "");
      
      // Determine category from directory structure or frontmatter
      let entryCategory = 'general';
      if (pathParts.length > 1) {
        const dirName = pathParts[pathParts.length - 2];
        if (dirName === 'arcticons') {
          entryCategory = 'technology';
        } else if (dirName === 'free-icons') {
          entryCategory = 'general';
        } else {
          entryCategory = dirName;
        }
      }
      
      // Override with frontmatter if available
      entryCategory = entry.data?.category || entryCategory;
      
      return {
        name: entry.data?.name || iconName,
        description: entry.data?.description || `Free ${iconName} icon`,
        category: entryCategory,
        svgContent: entry.body,
        tags: entry.data?.tags || [],
        author: entry.data?.author || 'Free DevTools',
        license: entry.data?.license || 'MIT',
        url: `/freedevtools/svg_pages/${iconName}`
      };
    });
}

const categoryIcons = await getCategoryIcons();
const totalIcons = categoryIcons.length;
const totalPages = Math.ceil(totalIcons / ITEMS_PER_PAGE);

const categoryIconMap = {
  "general": "https://cdn-icons-png.flaticon.com/512/5515/5515389.png",
  "animals": "https://cdn-icons-png.flaticon.com/512/1998/1998619.png",
  "nature": "https://cdn-icons-png.flaticon.com/512/1998/1998619.png",
  "technology": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "business": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "social": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "shapes": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
};

const categoryIcon = categoryIconMap[category as keyof typeof categoryIconMap] || categoryIconMap.general;
---

<BaseLayout 
  name={`${category} SVG Icons`}
  path={`/svg_pages/${category}`}
  title={`${category} SVG Icons - Free Download & Edit | Free DevTools`}
  description={`Download free ${category} SVG icons instantly. Edit colors, add backgrounds, and customize vector graphics for your projects. ${totalIcons} icons available.`}
  canonical={`https://hexmos.com/freedevtools/svg_pages/${category}`}
  themeColor="#1e40af"
  showSidebar={false}
  showHeader={true}
>
  <!-- JSON-LD Structured Data -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "CollectionPage",
    "name": `${category} SVG Icons`,
    "description": `Free ${category} SVG icons for download and customization`,
    "url": `https://hexmos.com/freedevtools/svg_pages/${category}`,
    "mainEntity": {
      "@type": "ItemList",
      "numberOfItems": totalIcons,
      "itemListElement": categoryIcons.map((icon: any, index: number) => ({
        "@type": "ListItem",
        "position": index + 1,
        "item": {
          "@type": "ImageObject",
          "name": icon.name,
          "description": icon.description,
          "url": `https://hexmos.com${icon.url}`
        }
      }))
    }
  })} />

  <div class="max-w-6xl mx-auto px-2 md:px-6">
    <div class="mb-16 mt-[74px]">
      <AdBanner client:load />
    </div>
    
    <div class="mb-8">
      <nav class="text-sm text-slate-600 dark:text-slate-400 mb-4">
        <a href="/freedevtools/" class="hover:text-blue-600 dark:hover:text-blue-400">Free DevTools</a>
        <span class="mx-2">/</span>
        <a href="/freedevtools/svg_pages/" class="hover:text-blue-600 dark:hover:text-blue-400">SVG Icons</a>
        <span class="mx-2">/</span>
        <span class="capitalize">{category}</span>
      </nav>
      
      <div class="flex items-center mb-4">
        <div class="w-12 h-12 bg-white dark:bg-slate-800 rounded-lg flex items-center justify-center mr-4 border border-slate-200 dark:border-slate-700">
          <img 
            src={categoryIcon}
            alt={`${category} logo`}
            class="w-8 h-8 object-contain"
            onerror="this.src='https://via.placeholder.com/40x40/3b82f6/ffffff?text=' + this.alt.split(' ')[0].charAt(0).toUpperCase()"
          />
        </div>
        <div>
          <h1 class="text-3xl font-bold text-slate-900 dark:text-slate-100 capitalize">
            {category} SVG Icons
          </h1>
          <p class="text-lg text-slate-600 dark:text-slate-400">
            {totalIcons} free {category} icons available for download
          </p>
        </div>
      </div>
      
      <!-- Search Bar -->
      <div class="max-w-md mb-6">
        <div class="relative">
          <input 
            type="text" 
            id="icon-search"
            placeholder="Search icons by name..."
            class="w-full px-4 py-2 pl-10 pr-4 text-sm border border-slate-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100 placeholder-slate-500 dark:placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
      </div>
      
      <!-- Pagination -->
      <Pagination 
        totalItems={totalIcons}
        itemsPerPage={ITEMS_PER_PAGE}
        currentPage={1}
        totalPages={totalPages}
        itemsLabel="icons"
      />
    </div>

    <div id="icons-grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4 mb-8">
      <!-- Icons will be loaded dynamically -->
    </div>
    
    <!-- Bottom Pagination -->
    <BottomPagination 
      totalItems={totalIcons}
      currentPage={1}
      totalPages={totalPages}
      itemsLabel="icons"
    />
    
    <!-- Credits Section -->
    <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-wrap gap-4">
        <a 
          href="/freedevtools/svg_pages/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          ‚Üê  Back to SVG Icons
        </a>
        <a 
          href="/freedevtools/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-slate-50 dark:bg-slate-800 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
        >
          Free DevTools Home
        </a>
      </div>
    </div>
  </div>
</BaseLayout>

<script define:vars={{ categoryIcons, totalIcons, totalPages, ITEMS_PER_PAGE, category }}>
  // Pagination state
  let currentPage = 1;
  let itemsPerPage = ITEMS_PER_PAGE;
  let searchQuery = '';
  
  // Get current page and items per page from URL
  function getCurrentPageFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const page = parseInt(urlParams.get('page') || '1', 10);
    const items = parseInt(urlParams.get('items') || ITEMS_PER_PAGE.toString(), 10);
    
    // Update items per page if specified in URL
    if (items !== itemsPerPage) {
      itemsPerPage = items;
      const dropdown = document.getElementById('items-per-page');
      if (dropdown) {
        dropdown.value = items.toString();
      }
    }
    
    return Math.max(1, Math.min(page, Math.ceil(totalIcons / itemsPerPage)));
  }
  
  // Update URL without page reload
  function updateURL(page, items = null) {
    const url = new URL(window.location);
    if (page === 1) {
      url.searchParams.delete('page');
    } else {
      url.searchParams.set('page', page.toString());
    }
    
    const currentItems = items || itemsPerPage;
    if (currentItems !== ITEMS_PER_PAGE) {
      url.searchParams.set('items', currentItems.toString());
    } else {
      url.searchParams.delete('items');
    }
    
    window.history.pushState({}, '', url);
  }
  
  // Generate page numbers for pagination
  function getPageNumbers(currentPage, totalPages) {
    const pages = [];
    const maxVisible = 5;
    
    if (totalPages <= maxVisible) {
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else if (currentPage <= 3) {
      for (let i = 1; i <= maxVisible; i++) {
        pages.push(i);
      }
    } else if (currentPage >= totalPages - 2) {
      for (let i = totalPages - maxVisible + 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      for (let i = currentPage - 2; i <= currentPage + 2; i++) {
        pages.push(i);
      }
    }
    
    return pages;
  }
  
  // Filter icons based on search query
  function filterIcons(icons, query) {
    if (!query.trim()) return icons;
    
    const searchLower = query.toLowerCase();
    return icons.filter(icon => 
      icon.name.toLowerCase().includes(searchLower) ||
      icon.description?.toLowerCase().includes(searchLower) ||
      icon.tags.some(tag => tag.toLowerCase().includes(searchLower))
    );
  }
  
  // Render icon card
  function renderIconCard(icon) {
    return `
      <div class="bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-900 rounded-xl p-4 transition-all duration-300 ease-in-out shadow-sm hover:-translate-y-1 hover:shadow-xl hover:border-border cursor-pointer icon-card" data-icon-name="${icon.name}" data-icon-url="${icon.url}">
        <div class="flex flex-col items-center text-center">
          <div class="w-16 h-16 bg-slate-50 dark:bg-slate-800 rounded-lg flex items-center justify-center mb-3 border border-slate-200 dark:border-slate-700">
            <div class="w-8 h-8 text-slate-600 dark:text-slate-400 icon-preview">
              ${icon.svgContent}
            </div>
          </div>
          <h3 class="text-sm font-medium text-slate-900 dark:text-slate-100 mb-1">${icon.name}</h3>
          <p class="text-xs text-slate-500 dark:text-slate-400">${icon.description || 'SVG Icon'}</p>
        </div>
      </div>
    `;
  }
  
  // Render pagination
  function renderPagination() {
    const filteredIcons = filterIcons(categoryIcons, searchQuery);
    const totalPages = Math.ceil(filteredIcons.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedIcons = filteredIcons.slice(startIndex, endIndex);
    
    // Update pagination info
    document.getElementById('pagination-info').textContent = 
      `Showing ${paginatedIcons.length} of ${filteredIcons.length} icons (Page ${currentPage} of ${totalPages})`;
    
    document.getElementById('page-info').textContent = `${currentPage} / ${totalPages}`;
    document.getElementById('bottom-page-info').textContent = 
      `Page ${currentPage} of ${totalPages} ‚Ä¢ ${filteredIcons.length} total icons`;
    
    // Update button states
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const bottomPrevBtn = document.getElementById('bottom-prev-btn');
    const bottomNextBtn = document.getElementById('bottom-next-btn');
    
    const hasPrev = currentPage > 1;
    const hasNext = currentPage < totalPages;
    
    [prevBtn, bottomPrevBtn].forEach(btn => {
      if (btn) {
        btn.disabled = !hasPrev;
      }
    });
    
    [nextBtn, bottomNextBtn].forEach(btn => {
      if (btn) {
        btn.disabled = !hasNext;
      }
    });
    
    // Render icons
    const iconsGrid = document.getElementById('icons-grid');
    iconsGrid.innerHTML = paginatedIcons.map(icon => 
      renderIconCard(icon)
    ).join('');
    
    // Render page numbers
    const pageNumbers = getPageNumbers(currentPage, totalPages);
    const pageNumbersContainer = document.getElementById('page-numbers');
    pageNumbersContainer.innerHTML = pageNumbers.map(pageNum => {
      const isCurrentPage = pageNum === currentPage;
      const buttonClass = isCurrentPage 
        ? 'bg-blue-600 text-white' 
        : 'text-slate-700 dark:text-slate-300 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-600';
      
      return `<button data-page="${pageNum}" class="page-number-btn inline-flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors ${buttonClass}">${pageNum}</button>`;
    }).join('');
    
    // Show bottom pagination if there are multiple pages
    const bottomPagination = document.getElementById('bottom-pagination');
    bottomPagination.style.display = totalPages > 1 ? 'flex' : 'none';
  }
  
  // Navigate to page
  function goToPage(page) {
    const filteredIcons = filterIcons(categoryIcons, searchQuery);
    const totalPages = Math.ceil(filteredIcons.length / itemsPerPage);
    
    if (page < 1 || page > totalPages || page === currentPage) {
      return;
    }
    
    currentPage = page;
    updateURL(page);
    renderPagination();
    
    // Scroll to top of page
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }
  
  // Handle items per page change
  function handleItemsPerPageChange(newItemsPerPage) {
    const filteredIcons = filterIcons(categoryIcons, searchQuery);
    const newTotalPages = Math.ceil(filteredIcons.length / newItemsPerPage);
    const newCurrentPage = Math.min(currentPage, newTotalPages);
    
    itemsPerPage = newItemsPerPage;
    currentPage = newCurrentPage;
    
    updateURL(currentPage, itemsPerPage);
    renderPagination();
    
    // Scroll to top of page
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }
  
  // Handle search
  function handleSearch(query) {
    searchQuery = query;
    currentPage = 1;
    renderPagination();
  }
  
  // Event listeners - use event delegation to avoid re-attaching listeners
  function setupEventListeners() {
    // Use event delegation on the document to handle all clicks
    document.addEventListener('click', (e) => {
      // Handle previous buttons
      if (e.target.id === 'prev-btn' || e.target.id === 'bottom-prev-btn') {
        e.preventDefault();
        goToPage(currentPage - 1);
        return;
      }
      
      // Handle next buttons
      if (e.target.id === 'next-btn' || e.target.id === 'bottom-next-btn') {
        e.preventDefault();
        goToPage(currentPage + 1);
        return;
      }
      
      // Handle page number buttons
      if (e.target.classList.contains('page-number-btn')) {
        e.preventDefault();
        const page = parseInt(e.target.dataset.page, 10);
        goToPage(page);
        return;
      }
      
      // Handle icon card clicks
      if (e.target.closest('.icon-card')) {
        e.preventDefault();
        const iconCard = e.target.closest('.icon-card');
        const iconUrl = iconCard.dataset.iconUrl;
        window.location.href = iconUrl;
        return;
      }
    });
    
    // Handle items per page dropdown change
    document.addEventListener('change', (e) => {
      if (e.target.id === 'items-per-page') {
        const newItemsPerPage = parseInt(e.target.value, 10);
        handleItemsPerPageChange(newItemsPerPage);
      }
    });
    
    // Handle search input
    document.addEventListener('input', (e) => {
      if (e.target.id === 'icon-search') {
        handleSearch(e.target.value);
      }
    });
  }
  
  // Handle browser back/forward (only add once)
  if (!window.paginationInitialized) {
    window.addEventListener('popstate', () => {
      currentPage = getCurrentPageFromURL();
      renderPagination();
    });
    window.paginationInitialized = true;
  }
  
  // Initialize pagination
  function init() {
    currentPage = getCurrentPageFromURL();
    renderPagination();
  }
  
  // Set up event listeners only once
  if (!window.paginationEventListenersSet) {
    setupEventListeners();
    window.paginationEventListenersSet = true;
  }
  
  // Start when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    // Small delay to ensure DOM is fully ready
    setTimeout(init, 100);
  }
</script>
