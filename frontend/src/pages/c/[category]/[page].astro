---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import AdBanner from '../../../components/banner/AdBanner';
import Pagination from '../../../components/PaginationComponent.astro';
import CreditsButton from '../../../components/buttons/CreditsButton';
import ToolContainer from '../../../components/tool/ToolContainer';
import ToolHead from '../../../components/tool/ToolHead';
import { getCheatsheetsByCategory, getAllCheatsheetCategories } from '../../../lib/cheatsheets-utils';

export async function getStaticPaths() {
  const categories = await getAllCheatsheetCategories();
  const paths = [];
  
  for (const category of categories) {
    const itemsPerPage = 30;
    const totalPages = Math.ceil(category.cheatsheetCount / itemsPerPage);
    
    for (let page = 1; page <= totalPages; page++) {
      paths.push({
        params: { 
          category: category.id,
          page: page.toString()
        },
        props: { category: category.name }
      });
    }
  }
  
  return paths;
}

// Get category and page from params
const { category: categorySlug, page } = Astro.params;
const categoryName = (Astro.props?.category as string) || categorySlug!.replace(/-/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase());
const currentPage = parseInt(page || '1');

// Get cheatsheets for this category
const cheatsheets = await getCheatsheetsByCategory(categoryName);
const totalCheatsheets = cheatsheets.length;

// Pagination logic
const itemsPerPage = 30;
const totalPages = Math.ceil(totalCheatsheets / itemsPerPage);
const startIndex = (currentPage - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const paginatedCheatsheets = cheatsheets.slice(startIndex, endIndex);

// Breadcrumb items
const breadcrumbItems = [
  { label: 'Free DevTools', href: '/freedevtools/' },
  { label: 'Cheatsheets', href: '/freedevtools/c/' },
  { label: categoryName, href: `/freedevtools/c/${categorySlug}/` }
];

// SEO data
const seoTitle = `${categoryName} Cheatsheets - Page ${currentPage} | Online Free DevTools by Hexmos`;
const seoDescription = `Browse page ${currentPage} of ${categoryName.toLowerCase()} cheatsheets. Comprehensive reference covering commands, syntax, and key concepts.`;
const keywords = [
  categoryName.toLowerCase(),
  'cheatsheets',
  'reference',
  'commands',
  'syntax',
  'programming',
  'documentation',
  'page ' + currentPage
];
---

<BaseLayout 
  name={`${categoryName} Cheatsheets`}
  path={`/c/${categorySlug}/`}
  title={seoTitle}
  description={seoDescription}
  canonical={`https://hexmos.com/freedevtools/c/${categorySlug}/${currentPage}/`}
  themeColor="#1e40af"
  keywords={keywords}
  showSidebar={false}
  showHeader={true}
  totalItems={totalCheatsheets}
  features={["Quick reference", "Command syntax", "Easy to scan", "Fast learning", "Free access"]}
  commandCategory="Reference"
>
  <ToolContainer>
    <ToolHead
      name={`${categoryName} Cheatsheets`}
      description={seoDescription}
      breadcrumbItems={breadcrumbItems}
    />

    <!-- Overview Stats -->
    <div id="pagination-info" class="text-center mb-8">
      <div class="grid grid-cols-2 gap-6 mt-8">
        <div class="text-center">
          <div class="text-3xl font-bold text-blue-600">{totalCheatsheets.toLocaleString()}</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Cheatsheets</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-green-600">{totalPages}</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Pages</div>
        </div>
      </div>
    </div>

    <!-- Pagination Info -->
    <div class="bg-slate-50 dark:bg-slate-800 rounded-lg p-4 mb-6 mt-8">
      <div class="text-sm text-slate-600 dark:text-slate-400 text-center">
        Showing {paginatedCheatsheets.length} of {totalCheatsheets} cheatsheets (Page {currentPage} of {totalPages})
      </div>
    </div>

    <!-- Cheatsheets Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 md:gap-4 lg:gap-8 mb-8">
      {paginatedCheatsheets.map((cheatsheet) => (
        <a 
          href={cheatsheet.url}
          class="block bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-900 rounded-xl p-4 md:p-4 lg:p-8 transition-all duration-300 ease-in-out shadow-sm hover:-translate-y-1 hover:shadow-xl hover:border-border"
        >
          <div class="flex items-center justify-between mb-2">
            <h3 class="font-mono text-lg font-semibold text-black dark:text-neon-light m-0 mb-2 md:mb-4">
              {cheatsheet.name}
            </h3>
            <span class="text-blue-600 dark:text-blue-400">→</span>
          </div>
          <p class="text-sm text-slate-800 dark:text-slate-400 m-0">
            {cheatsheet.description}
          </p>
        </a>
      ))}
    </div>

    <!-- Pagination -->
    <Pagination 
      currentPage={currentPage}
      totalPages={totalPages}
      baseUrl={`/freedevtools/c/${categorySlug}/`}
    />

    <div class="mt-12 pt-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
        <a 
          href="/freedevtools/c/" 
          class="inline-flex items-center text-sm text-slate-600 dark:text-slate-400 hover:text-blue-600 dark:hover:text-blue-300 transition-colors"
        >
          ←  Back to Cheatsheets
        </a>
        <CreditsButton href="/freedevtools/c/credits/" />
      </div>
    </div>
  </ToolContainer>
</BaseLayout>

<script>
  // Scroll to pagination info only if hash is present in URL
  if (window.location.hash === '#pagination-info') {
    const paginationInfo = document.getElementById('pagination-info');
    if (paginationInfo) {
      paginationInfo.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }
</script>
