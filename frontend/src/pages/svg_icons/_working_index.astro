---
import BaseLayout from '../../layouts/BaseLayout.astro';
import AdBanner from '../../components/banner/AdBanner';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

async function getAllIcons() {
  // Load the clustor.json file
  const fs = await import('fs/promises');
  const path = await import('path');
  
  const clustorPath = path.join('./src/pages/svg_icons', 'clustor.json');
  const clustorData = JSON.parse(await fs.readFile(clustorPath, 'utf-8'));
  
  const iconsByCategory: Record<
    string,
    Array<{
      name: string;
      url: string;
      description?: string;
      category?: string;
      iconCount?: number;
      previewSvg?: string;
    }>
  > = {};

  // Process each cluster (category)
  for (const [clusterKey, clusterData] of Object.entries(clustorData.clusters)) {
    const cluster = clusterData as any;
    const categoryName = cluster.name; // Use the name from the cluster data
    
    if (!iconsByCategory[categoryName]) {
      iconsByCategory[categoryName] = [];
    }

    // Process each file in the cluster - load preview SVGs for first 6 icons only
    for (let i = 0; i < cluster.fileNames.length; i++) {
      const fileName = cluster.fileNames[i];
      const iconName = fileName.replace(".svg", "");
      
      let previewSvg = '';
      
      // Only load SVG content for the first 6 icons (for preview)
      if (i < 6) {
        const filePath = path.join('./src/pages/svg_icons/_icons', categoryName, fileName);
        try {
          const svgContent = await fs.readFile(filePath, 'utf-8');
          
          // Simple SVG processing for preview
          if (svgContent.includes('<svg')) {
            const widthMatch = svgContent.match(/width="([^"]*)"/);
            const heightMatch = svgContent.match(/height="([^"]*)"/);
            const viewBoxMatch = svgContent.match(/viewBox="([^"]*)"/);
            
            let width = widthMatch ? widthMatch[1] : '24';
            let height = heightMatch ? heightMatch[1] : '24';
            
            const widthNum = parseFloat(width);
            const heightNum = parseFloat(height);
            
            let viewBox = viewBoxMatch ? viewBoxMatch[1] : `0 0 ${widthNum} ${heightNum}`;
            
            previewSvg = svgContent.replace(
              /<svg[^>]*>/,
              `<svg width="56" height="56" viewBox="${viewBox}" preserveAspectRatio="xMidYMid meet" style="max-width: 100%; max-height: 100%;">`
            );
          }
        } catch (error) {
          console.warn(`Could not read file: ${categoryName}/${fileName}`);
        }
      }

      iconsByCategory[categoryName].push({
        name: iconName,
        url: `/freedevtools/svg_icons/${categoryName}/${iconName}`,
        description: `Free ${iconName} icon`,
        category: categoryName,
        iconCount: cluster.fileNames.length,
        previewSvg: previewSvg,
      });
    }
  }

  return iconsByCategory;
}

// Get all icons data
const allIcons = await getAllIcons();
const allCategories = Object.keys(allIcons).sort();


const categoryIconMap = {
  "general": "https://cdn-icons-png.flaticon.com/512/5515/5515389.png",
  "animals": "https://cdn-icons-png.flaticon.com/512/1998/1998619.png",
  "nature": "https://cdn-icons-png.flaticon.com/512/1998/1998619.png",
  "technology": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "business": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "social": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "shapes": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
};
---

<BaseLayout 
  name="SVG Icons"
  path="/freedevtools/svg_icons/"
  title="Free SVG Icons - Download & Edit Vector Graphics | Online Free DevTools by Hexmos"
  description="Download thousands of free SVG icons instantly. Edit colors, add backgrounds, and customize vector graphics for your projects. No registration required."
  canonical="https://hexmos.com/freedevtools/svg_icons/"
  themeColor="#1e40af"
  showSidebar={false}
  showHeader={true}
>
  <div class="max-w-6xl mx-auto px-2 md:px-6">
    <div class="mb-16 mt-[74px]">
      <AdBanner client:load />
    </div>
    <div class="mb-8">
      <nav class="text-sm text-slate-600 dark:text-slate-400 mb-4">
        <a href="/freedevtools/" class="hover:text-blue-600 dark:hover:text-blue-400">Free DevTools</a>
        <span class="mx-2">/</span>
        <span>SVG Icons</span>
      </nav>
      
      <h1 class="text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4">
        Free SVG Icons
      </h1>
      <p class="text-lg text-slate-600 dark:text-slate-400 mb-6">
        Download thousands of free SVG icons instantly. Edit colors, add backgrounds, and customize vector graphics for your projects.
      </p>
    </div>

    <div id="icons-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 md:gap-4 lg:gap-8 mb-8">
      <!-- Icons will be loaded dynamically -->
    </div>
    
    <!-- Credits Section -->
    <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-wrap gap-4">
        <a 
          href="/freedevtools/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          ‚Üê  Back to Free DevTools
        </a>
        <a 
          href="/freedevtools/svg_icons/credits"
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-slate-50 dark:bg-slate-800 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
        >
          Credits & Acknowledgments
        </a>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  .icon-preview svg {
    width: 100% !important;
    height: 100% !important;
    max-width: 64px;
    max-height: 64px;
    display: block;
    object-fit: contain;
  }
  
  .icon-preview {
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }
</style>

<script define:vars={{ allIcons, allCategories, categoryIconMap }}>
  console.log('üîç DEBUG: Script starting');
  console.log('üîç DEBUG: allIcons keys:', Object.keys(allIcons));
  console.log('üîç DEBUG: allCategories:', allCategories);
  console.log('üîç DEBUG: allCategories length:', allCategories.length);
  console.log('üîç DEBUG: categoryIconMap:', categoryIconMap);
  
  // Render category card with preview SVGs
  function renderCategoryCard(category, categoryIcons) {
    console.log(`üîç DEBUG: Rendering category card for: ${category}`);
    console.log(`üîç DEBUG: Category icons count: ${categoryIcons ? categoryIcons.length : 'undefined'}`);
    
    const iconCount = categoryIcons ? categoryIcons.length : 0;
    const iconSlots = Array(6).fill(null);
    
    // Fill available slots with preview icons
    for (let i = 0; i < Math.min(6, iconCount); i++) {
      const icon = categoryIcons[i];
      
      if (icon && icon.previewSvg) {
        // Use the actual preview SVG
        iconSlots[i] = `<div class="flex items-center justify-center p-1">
          <div class="w-14 h-14 text-slate-600 dark:text-slate-400 overflow-hidden flex items-center justify-center">
            <div class="w-14 h-14 flex items-center justify-center">
              ${icon.previewSvg}
            </div>
          </div>
        </div>`;
      } else {
        // Use placeholder for icons beyond the first 6
        iconSlots[i] = `<div class="flex items-center justify-center p-1">
          <div class="w-14 h-14 text-slate-600 dark:text-slate-400 overflow-hidden flex items-center justify-center">
            <div class="w-14 h-14 flex items-center justify-center bg-slate-100 dark:bg-slate-700 rounded-lg">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="text-slate-400">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
            </div>
          </div>
        </div>`;
      }
    }
    
    // Fill empty slots with transparent placeholders
    const iconsHtml = iconSlots.map(slot => {
      return slot || `<div class="flex items-center justify-center p-1">
        <div class="w-14 h-14"></div>
      </div>`;
    }).join('');
    
    const cardHtml = `
      <a href="/freedevtools/svg_icons/${category}" class="block">
        <div class="bg-white border border-slate-200 rounded-xl p-6 pb-20 shadow-sm hover:shadow-md transition-all duration-200">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-bold text-slate-900 capitalize">
              ${category.replace('-', ' ')}
            </h3>
            <span class="text-sm text-slate-500 font-medium">
              ${iconCount} ICONS
            </span>
          </div>
          
          <div class="grid grid-cols-3 gap-2 gap-y-3 w-full h-20">
            ${iconsHtml}
          </div>
        </div>
      </a>
    `;
    
    console.log(`üîç DEBUG: Generated card HTML for ${category}:`, cardHtml.substring(0, 200) + '...');
    return cardHtml;
  }
  
  // Render all categories
  function renderCategories() {
    console.log('üîç DEBUG: renderCategories called');
    console.log('üîç DEBUG: document.readyState:', document.readyState);
    
    const iconsGrid = document.getElementById('icons-grid');
    console.log('üîç DEBUG: icons-grid element:', iconsGrid);
    
    if (!iconsGrid) {
      console.error('‚ùå ERROR: icons-grid element not found!');
      return;
    }
    
    if (!allCategories || allCategories.length === 0) {
      console.error('‚ùå ERROR: allCategories is empty or undefined!');
      console.log('üîç DEBUG: allCategories value:', allCategories);
      return;
    }
    
    console.log('üîç DEBUG: About to render', allCategories.length, 'categories');
    
    const categoriesHtml = allCategories.map(category => {
      console.log(`üîç DEBUG: Processing category: ${category}`);
      const categoryIcons = allIcons[category];
      console.log(`üîç DEBUG: Category icons for ${category}:`, categoryIcons);
      return renderCategoryCard(category, categoryIcons);
    }).join('');
    
    console.log('üîç DEBUG: Generated categories HTML length:', categoriesHtml.length);
    console.log('üîç DEBUG: First 500 chars of HTML:', categoriesHtml.substring(0, 500));
    
    iconsGrid.innerHTML = categoriesHtml;
    
    console.log('üîç DEBUG: InnerHTML set, checking if content is there...');
    console.log('üîç DEBUG: icons-grid children count:', iconsGrid.children.length);
    console.log('üîç DEBUG: icons-grid innerHTML length:', iconsGrid.innerHTML.length);
    
    // Immediate CSS debugging
    const computedStyle = window.getComputedStyle(iconsGrid);
    console.log('üîç DEBUG: Immediate icons-grid computed styles:');
    console.log('  - display:', computedStyle.display);
    console.log('  - visibility:', computedStyle.visibility);
    console.log('  - opacity:', computedStyle.opacity);
    console.log('  - height:', computedStyle.height);
    console.log('  - width:', computedStyle.width);
    console.log('  - overflow:', computedStyle.overflow);
    console.log('üîç DEBUG: icons-grid offsetHeight:', iconsGrid.offsetHeight);
    console.log('üîç DEBUG: icons-grid scrollHeight:', iconsGrid.scrollHeight);
    console.log('üîç DEBUG: icons-grid clientHeight:', iconsGrid.clientHeight);
    
    // Add a temporary visual indicator to test visibility
    iconsGrid.style.border = '3px solid red';
    iconsGrid.style.backgroundColor = 'yellow';
    console.log('üîç DEBUG: Added red border and yellow background to icons-grid for visibility test');
    
    // Set up MutationObserver to catch any changes to the icons-grid
    const observer = new MutationObserver((mutations) => {
      console.log('üîç DEBUG: MutationObserver detected changes to icons-grid:', mutations.length, 'mutations');
      mutations.forEach((mutation, index) => {
        console.log(`üîç DEBUG: Mutation #${index + 1}:`, {
          type: mutation.type,
          target: mutation.target,
          addedNodes: mutation.addedNodes.length,
          removedNodes: mutation.removedNodes.length,
          attributeName: mutation.attributeName,
          oldValue: mutation.oldValue
        });
      });
    });
    
    observer.observe(iconsGrid, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeOldValue: true,
      characterData: true,
      characterDataOldValue: true
    });
    
    console.log('üîç DEBUG: MutationObserver set up to monitor icons-grid changes');
    
    // Monitor for changes to the icons-grid element
    let checkCount = 0;
    const monitorInterval = setInterval(() => {
      checkCount++;
      console.log(`üîç DEBUG: Check #${checkCount} - icons-grid children count:`, iconsGrid.children.length);
      console.log(`üîç DEBUG: Check #${checkCount} - icons-grid innerHTML length:`, iconsGrid.innerHTML.length);
      
      // Check if element is still in DOM
      const isInDOM = document.contains(iconsGrid);
      console.log(`üîç DEBUG: Check #${checkCount} - icons-grid is in DOM:`, isInDOM);
      
      // Check parent element
      console.log(`üîç DEBUG: Check #${checkCount} - icons-grid parent:`, iconsGrid.parentElement);
      
      // Check if element is connected to document
      console.log(`üîç DEBUG: Check #${checkCount} - icons-grid isConnected:`, iconsGrid.isConnected);
      
      const computedStyle = window.getComputedStyle(iconsGrid);
      console.log(`üîç DEBUG: Check #${checkCount} - icons-grid computed styles:`);
      console.log('  - display:', computedStyle.display);
      console.log('  - visibility:', computedStyle.visibility);
      console.log('  - opacity:', computedStyle.opacity);
      console.log('  - height:', computedStyle.height);
      console.log('  - width:', computedStyle.width);
      console.log('  - overflow:', computedStyle.overflow);
      
      console.log(`üîç DEBUG: Check #${checkCount} - icons-grid offsetHeight:`, iconsGrid.offsetHeight);
      console.log(`üîç DEBUG: Check #${checkCount} - icons-grid scrollHeight:`, iconsGrid.scrollHeight);
      console.log(`üîç DEBUG: Check #${checkCount} - icons-grid clientHeight:`, iconsGrid.clientHeight);
      
      // If element is disconnected from DOM, re-render
      if (!isInDOM && checkCount > 1) {
        console.log('üîç DEBUG: Element disconnected from DOM, re-rendering...');
        renderCategories();
        return;
      }
      
      // If styles are empty, try to force re-render
      if (computedStyle.display === '' && checkCount > 2) {
        console.log('üîç DEBUG: Styles are empty, attempting to force re-render...');
        iconsGrid.style.display = 'grid';
        iconsGrid.style.visibility = 'visible';
        iconsGrid.style.opacity = '1';
        console.log('üîç DEBUG: Forced styles applied');
        
        // Check what CSS rules are being applied
        const allStyles = window.getComputedStyle(iconsGrid);
        console.log('üîç DEBUG: All computed styles after force:', {
          display: allStyles.display,
          visibility: allStyles.visibility,
          opacity: allStyles.opacity,
          height: allStyles.height,
          width: allStyles.width,
          position: allStyles.position,
          zIndex: allStyles.zIndex
        });
      }
      
      // Stop monitoring after 10 seconds or if content disappears
      if (checkCount >= 10 || iconsGrid.children.length === 0) {
        clearInterval(monitorInterval);
        console.log('üîç DEBUG: Stopped monitoring - either 10 checks completed or content disappeared');
      }
    }, 1000); // Check every second
    
    // Also check immediately after a short delay to catch quick changes
    setTimeout(() => {
      console.log('üîç DEBUG: Quick check after 100ms - icons-grid children count:', iconsGrid.children.length);
      console.log('üîç DEBUG: Quick check after 100ms - icons-grid innerHTML length:', iconsGrid.innerHTML.length);
    }, 100);
  }
  
  // Initialize after Astro hydration is complete
  console.log('üîç DEBUG: About to initialize, document.readyState:', document.readyState);
  
  function initializeAfterHydration() {
    console.log('üîç DEBUG: Initializing after hydration...');
    
    // Wait a bit more to ensure Astro hydration is complete
    setTimeout(() => {
      console.log('üîç DEBUG: Delayed initialization after hydration');
      renderCategories();
    }, 100);
  }
  
  // Wait for both DOM and window load to ensure Astro hydration is complete
  if (document.readyState === 'loading') {
    console.log('üîç DEBUG: DOM still loading, adding load listener');
    window.addEventListener('load', initializeAfterHydration);
  } else {
    console.log('üîç DEBUG: DOM already ready, calling delayed initialization');
    initializeAfterHydration();
  }
  
  // Additional debugging - check for any scripts that might be interfering
  console.log('üîç DEBUG: All scripts on page:', document.querySelectorAll('script').length);
  console.log('üîç DEBUG: Window object keys:', Object.keys(window).filter(key => key.includes('pagination') || key.includes('filter') || key.includes('search')));
  
  // Check for any event listeners on the document or window
  console.log('üîç DEBUG: Checking for event listeners...');
  const events = ['DOMContentLoaded', 'load', 'resize', 'scroll'];
  events.forEach(eventType => {
    console.log(`üîç DEBUG: Event listeners for ${eventType}:`, document.querySelectorAll(`[on${eventType}]`).length);
  });
  
  // Check if there are any other scripts that might be running
  console.log('üîç DEBUG: All script elements:');
  document.querySelectorAll('script').forEach((script, index) => {
    console.log(`üîç DEBUG: Script ${index}:`, {
      src: script.src,
      type: script.type,
      hasContent: script.innerHTML.length > 0,
      contentLength: script.innerHTML.length
    });
  });
  
  // Check for any global functions that might be interfering
  console.log('üîç DEBUG: Checking for potentially interfering functions:');
  const potentiallyInterferingFunctions = [
    'renderPagination', 'goToPage', 'handleSearch', 'filterIcons', 
    'updateLetterFilters', 'handleLetterFilter', 'setupEventListeners',
    'paginationInitialized', 'paginationEventListenersSet'
  ];
  
  potentiallyInterferingFunctions.forEach(funcName => {
    if (window[funcName]) {
      console.log(`üîç DEBUG: Found potentially interfering function: ${funcName}`, typeof window[funcName]);
    }
  });
  
  // Override innerHTML setter to catch when it's being cleared
  const originalInnerHTML = Object.getOwnPropertyDescriptor(Element.prototype, 'innerHTML');
  Object.defineProperty(iconsGrid, 'innerHTML', {
    get: originalInnerHTML.get,
    set: function(value) {
      console.log('üîç DEBUG: innerHTML being set on icons-grid to:', value.length, 'characters');
      console.log('üîç DEBUG: Stack trace:', new Error().stack);
      return originalInnerHTML.set.call(this, value);
    }
  });
</script>
