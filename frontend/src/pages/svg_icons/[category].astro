---
import BaseLayout from '../../layouts/BaseLayout.astro';
import AdBanner from '../../components/banner/AdBanner';
import { getCollection } from 'astro:content';


export async function getStaticPaths() {
  // Load the clustor.json file to get all categories
  const fs = await import('fs/promises');
  const path = await import('path');
  
  const clustorPath = path.join('./src/pages/svg_icons', 'clustor.json');
  const clustorData = JSON.parse(await fs.readFile(clustorPath, 'utf-8'));
  
  const categories = Object.values(clustorData.clusters).map((cluster: any) => cluster.name);
  
  return categories.map(category => ({
    params: { category },
    props: { category }
  }));
}

const { category } = Astro.params;
const { category: categoryProp } = Astro.props;

async function getCategoryIcons() {
  // Load the clustor.json file
  const fs = await import('fs/promises');
  const path = await import('path');
  
  const clustorPath = path.join('./src/pages/svg_icons', 'clustor.json');
  const clustorData = JSON.parse(await fs.readFile(clustorPath, 'utf-8'));
  
  // Find the cluster by name
  const cluster = Object.values(clustorData.clusters).find((c: any) => c.name === category) as any;
  if (!cluster) {
    return [];
  }
  
  const icons = [];
  
  // Process each file in the cluster
  for (const fileName of cluster.fileNames) {
    const iconName = fileName.replace(".svg", "");
    
    // Read the SVG file content from the category folder
    const filePath = path.join('./src/pages/svg_icons/_icons', category, fileName);
    let svgContent = '';
    try {
      svgContent = await fs.readFile(filePath, 'utf-8');
    } catch (error) {
      console.warn(`Could not read file: ${category}/${fileName}`);
      continue;
    }
    
    icons.push({
      name: iconName,
      description: `Free ${iconName} icon`,
      category: category,
      svgContent: svgContent,
      tags: cluster.keywords || [],
      author: 'Free DevTools',
      license: 'MIT',
      url: `/freedevtools/svg_icons/${category}/${iconName}`
    });
  }
  
  return icons;
}

const categoryIcons = await getCategoryIcons();
const totalIcons = categoryIcons.length;

const categoryIconMap = {
  "general": "https://cdn-icons-png.flaticon.com/512/5515/5515389.png",
  "animals": "https://cdn-icons-png.flaticon.com/512/1998/1998619.png",
  "nature": "https://cdn-icons-png.flaticon.com/512/1998/1998619.png",
  "technology": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "business": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "social": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "shapes": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
};

const categoryIcon = categoryIconMap[category as keyof typeof categoryIconMap] || categoryIconMap.general;
---

<BaseLayout 
  name={`${category} SVG Icons`}
  path={`/freedevtools/svg_icons/${category}`}
  title={`${category} SVG Icons - Free Download & Edit | Free DevTools`}
  description={`Download free ${category} SVG icons instantly. Edit colors, add backgrounds, and customize vector graphics for your projects. ${totalIcons} icons available.`}
  canonical={`https://hexmos.com/freedevtools/svg_icons/${category}`}
  themeColor="#1e40af"
  showSidebar={false}
  showHeader={true}
>
  <!-- JSON-LD Structured Data -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "CollectionPage",
    "name": `${category} SVG Icons`,
    "description": `Free ${category} SVG icons for download and customization`,
    "url": `https://hexmos.com/freedevtools/svg_icons/${category}`,
    "mainEntity": {
      "@type": "ItemList",
      "numberOfItems": totalIcons,
      "itemListElement": categoryIcons.map((icon: any, index: number) => ({
        "@type": "ListItem",
        "position": index + 1,
        "item": {
          "@type": "ImageObject",
          "name": icon.name,
          "description": icon.description,
          "url": `https://hexmos.com${icon.url}`
        }
      }))
    }
  })} />

  <div class="max-w-6xl mx-auto px-2 md:px-6">
    <div class="mb-16 mt-[74px]">
      <AdBanner client:load />
    </div>
    
    <div class="mb-8">
      <nav class="text-sm text-slate-600 dark:text-slate-400 mb-4">
        <a href="/freedevtools/" class="hover:text-blue-600 dark:hover:text-blue-400">Free DevTools</a>
        <span class="mx-2">/</span>
        <a href="/freedevtools/svg_icons/" class="hover:text-blue-600 dark:hover:text-blue-400">SVG Icons</a>
        <span class="mx-2">/</span>
        <span class="capitalize">{category}</span>
      </nav>
      
      <div class="flex items-center mb-4">
        <div class="w-12 h-12 bg-white dark:bg-slate-800 rounded-lg flex items-center justify-center mr-4 border border-slate-200 dark:border-slate-700">
          <img 
            src={categoryIcon}
            alt={`${category} logo`}
            class="w-8 h-8 object-contain"
            onerror="this.src='https://via.placeholder.com/40x40/3b82f6/ffffff?text=' + this.alt.split(' ')[0].charAt(0).toUpperCase()"
          />
        </div>
        <div>
          <h1 class="text-3xl font-bold text-slate-900 dark:text-slate-100 capitalize">
            {category} SVG Icons
          </h1>
          <p class="text-lg text-slate-600 dark:text-slate-400">
            {totalIcons} free {category} icons available for download
          </p>
        </div>
      </div>
      
      <!-- Search Bar -->
      <div class="max-w-md mb-6">
        <div class="relative">
          <input 
            type="text" 
            id="icon-search"
            placeholder="Search icons by name..."
            class="w-full px-4 py-2 pl-10 pr-4 text-sm border border-slate-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100 placeholder-slate-500 dark:placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
      </div>
      
    </div>

    <div id="icons-grid" class="grid grid-cols-6 md:grid-cols-8 lg:grid-cols-10 xl:grid-cols-12 gap-8 mb-8">
      <!-- Icons will be loaded dynamically -->
    </div>
    
    <!-- Credits Section -->
    <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-wrap gap-4">
        <a 
          href="/freedevtools/svg_icons/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          ‚Üê  Back to SVG Icons
        </a>
        <a 
          href="/freedevtools/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-slate-50 dark:bg-slate-800 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
        >
          Free DevTools Home
        </a>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  .icon-preview svg {
    width: 100% !important;
    height: 100% !important;
    max-width: 32px;
    max-height: 32px;
    display: block;
  }
</style>

<script define:vars={{ categoryIcons, totalIcons, category }}>
  let searchQuery = '';
  
  // Filter icons based on search query
  function filterIcons(icons, query) {
    if (!query.trim()) return icons;
    
    const searchLower = query.toLowerCase();
    return icons.filter(icon => 
      icon.name.toLowerCase().includes(searchLower) ||
      icon.description?.toLowerCase().includes(searchLower) ||
      (icon.tags && icon.tags.some(tag => tag.toLowerCase().includes(searchLower)))
    );
  }
  
  // Render icon card
  function renderIconCard(icon) {
    return `
      <div class="bg-transparent rounded-lg p-4 cursor-pointer icon-card hover:bg-slate-100 dark:hover:bg-slate-800 border border-transparent hover:border-slate-300 dark:hover:border-slate-600 transition-all duration-200 group" data-icon-name="${icon.name}" data-icon-url="${icon.url}">
        <div class="flex flex-col items-center text-center">
          <div class="w-8 h-8 flex items-center justify-center">
            <div class="w-8 h-8 text-slate-600 dark:text-slate-400 icon-preview" style="display: flex; align-items: center; justify-content: center;">
              ${icon.svgContent}
            </div>
          </div>
        </div>
      </div>
    `;
  }
  
  // Render all icons
  function renderIcons() {
    const filteredIcons = filterIcons(categoryIcons, searchQuery);
    
    // Render icons
    const iconsGrid = document.getElementById('icons-grid');
    iconsGrid.innerHTML = filteredIcons.map(icon => 
      renderIconCard(icon)
    ).join('');
  }
  
  // Handle search
  function handleSearch(query) {
    searchQuery = query;
    renderIcons();
  }
  
  // Event listeners
  function setupEventListeners() {
    // Handle icon card clicks
    document.addEventListener('click', (e) => {
      if (e.target.closest('.icon-card')) {
        e.preventDefault();
        const iconCard = e.target.closest('.icon-card');
        const iconUrl = iconCard.dataset.iconUrl;
        window.location.href = iconUrl;
        return;
      }
    });
    
    // Handle search input
    document.addEventListener('input', (e) => {
      if (e.target.id === 'icon-search') {
        handleSearch(e.target.value);
      }
    });
  }
  
  // Initialize
  function init() {
    renderIcons();
  }
  
  // Set up event listeners only once
  if (!window.categoryEventListenersSet) {
    setupEventListeners();
    window.categoryEventListenersSet = true;
  }
  
  // Start when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    // Small delay to ensure DOM is fully ready
    setTimeout(init, 100);
  }
</script>
