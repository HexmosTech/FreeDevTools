---
import AdBanner from '../../../components/banner/AdBanner';
import CopyPngButton from '../../../components/buttons/CopyPngButton.tsx';
import CopySvgButton from '../../../components/buttons/CopySvgButton.tsx';
import DownloadPngButton from '../../../components/buttons/DownloadPngButton.tsx';
import DownloadSvgButton from '../../../components/buttons/DownloadSvgButton.tsx';
import ToastProvider from '../../../components/ToastProvider';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { extractSVGDimensions, processSVGContent } from '../../../lib/svg-processor';

export async function getStaticPaths() {
  // Load the clustor.json file to get all icons
  const fs = await import('fs/promises');
  const path = await import('path');
  
  const clustorPath = path.join('./src/pages/svg_icons', 'clustor.json');
  const clustorData = JSON.parse(await fs.readFile(clustorPath, 'utf-8'));
  
  const paths = [];
  
  // Process each cluster (category)
  for (const [clusterKey, clusterData] of Object.entries(clustorData.clusters)) {
    const cluster = clusterData as any;
    const categoryName = cluster.name; // Use the name from the cluster data
    
    // Process each file in the cluster
    for (const fileName of cluster.fileNames) {
      const iconName = fileName.replace(".svg", "");
      
      // Read the SVG file content from the public folder
      const filePath = path.join('./public/svg_icons', categoryName, fileName);
      let svgContent = '';
      try {
        svgContent = await fs.readFile(filePath, 'utf-8');
      } catch (error) {
        console.warn(`Could not read file: ${categoryName}/${fileName}`);
        continue;
      }
      
      // Process SVG content to handle irregular dimensions
      const processedSvgContent = processSVGContent(svgContent, 128);
      
      paths.push({
        params: { category: categoryName, icon: iconName },
        props: {
          iconData: {
            name: iconName,
            description: `Free ${iconName} icon`,
            category: categoryName,
            svgContent: processedSvgContent,
            originalSvgContent: svgContent, // Keep original for downloads
            tags: cluster.keywords || [],
            author: 'Free DevTools by Hexmos',
            license: 'MIT'
          }
        }
      });
    }
  }
  
  console.log('üîç DEBUG: getStaticPaths generated', paths.length, 'paths');
  console.log('üîç DEBUG: First few paths:', paths.slice(0, 3).map(p => p.params.icon));
  
  return paths;
}

const { category, icon } = Astro.params;
const { iconData } = Astro.props as {
  iconData: {
    name: string;
    description: string;
    category: string;
    svgContent: string;
    originalSvgContent: string;
    tags: string[];
    author: string;
    license: string;
  };
};

// Generate SEO-friendly title and description
const seoTitle = `${iconData.name} - Free SVG Icon Download | Online Free DevTools by Hexmos`;
const seoDescription = `Download ${iconData.name} SVG icon for free. High-quality vector graphic for your projects. No registration required.`;
const canonical = `https://hexmos.com/freedevtools/svg_icons/${category}/${icon}`;

// Extract SVG dimensions for structured data
const svgDimensions = extractSVGDimensions(iconData.originalSvgContent);

// Generate thumbnail URL (points to the actual SVG image in public folder)
const thumbnailUrl = `https://hexmos.com/freedevtools/svg_icons/${category}/${icon}.svg`;

// Generate dates using today's date
const currentDate = new Date().toISOString();
const datePublished = currentDate;
const dateModified = currentDate;
---

<BaseLayout 
  name={iconData.name}
  path={`/freedevtools/svg_icons/${category}/${icon}`}
  title={seoTitle}
  description={seoDescription}
  canonical={canonical}
  themeColor="#1e40af"
  showSidebar={false}
  showHeader={true}
>
  <!-- JSON-LD Structured Data -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "ImageObject",
    "name": iconData.name,
    "description": iconData.description,
    "caption": `${iconData.name} free SVG icon download | Online Free DevTools by Hexmos`,
    "url": canonical,
    "contentUrl": canonical,
    "thumbnailUrl": thumbnailUrl,
    "encodingFormat": "image/svg+xml",
    "fileFormat": "image/svg+xml",
    "inLanguage": "en",
    "datePublished": datePublished,
    "dateModified": dateModified,
    "width": svgDimensions.width,
    "height": svgDimensions.height,
    "author": {
      "@type": "Organization",
      "name": iconData.author
    },
    "creator": {
      "@type": "Organization",
      "name": iconData.author
    },
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": canonical
    },
    "representativeOfPage": true,
    "isPartOf": {
      "@type": "Collection",
      "name": `${iconData.category} Icons`,
      "url": `https://hexmos.com/freedevtools/svg_icons/${category}`
    },
    "license": iconData.license,
    "keywords": iconData.tags.join(", "),
    "category": iconData.category
  })} />

  <ToastProvider client:load>
    <div class="max-w-6xl mx-auto px-2 md:px-6">
    <div class="mb-16 mt-[74px]">
      <AdBanner client:load />
    </div>
    
    <div class="mb-8">
      <nav class="text-sm text-slate-600 dark:text-slate-400 mb-4">
        <a href="/freedevtools/" class="hover:text-blue-600 dark:hover:text-blue-400">Free DevTools</a>
        <span class="mx-2">/</span>
        <a href="/freedevtools/svg_icons/" class="hover:text-blue-600 dark:hover:text-blue-400">SVG Icons</a>
        <span class="mx-2">/</span>
        <a href={`/freedevtools/svg_icons/${category}`} class="hover:text-blue-600 dark:hover:text-blue-400 capitalize">{category}</a>
        <span class="mx-2">/</span>
        <span>{iconData.name}</span>
      </nav>
      
      <h1 class="text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4">
        {iconData.name}
      </h1>
    
    </div>

    <!-- Icon Display and Controls -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
      <!-- Big Canvas with Icon -->
      <div class="rounded-xl relative icon-display-container" style="background-color: #f7f7f7;">
        
        <!-- Icon Display -->
        <div id="icon-preview" class="text-slate-600 dark:text-slate-400" set:html={iconData.svgContent}></div>
      </div>
      
      <!-- 2x2 Button Grid -->
      <div class="flex flex-col justify-center">
        <p class="text-lg text-slate-600 dark:text-slate-400 mb-6">
          {iconData.description}
        </p>
        
                <div class="space-y-4">
                  <!-- Copy Buttons Row -->
                  <div class="grid grid-cols-2 gap-4">
                    <!-- Copy PNG -->
                    <CopyPngButton iconData={iconData} client:load />
                    
                    <!-- Copy SVG -->
                    <CopySvgButton iconData={iconData} client:load />
                  </div>
                  
                  <!-- Download Buttons Row -->
                  <div class="grid grid-cols-2 gap-4">
                    <!-- PNG Download with Size Selector -->
                    <DownloadPngButton iconData={iconData} client:load />
                    
                    <!-- SVG Download -->
                    <DownloadSvgButton iconData={iconData} client:load />
                  </div>
                </div>
      </div>
    </div>


    <!-- Credits Section -->
    <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-wrap gap-4">
        <a 
          href="/freedevtools/svg_icons/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          ‚Üê  Back to SVG Icons
        </a>
        <a 
          href="/freedevtools/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-slate-50 dark:bg-slate-800 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
        >
          Free DevTools Home
        </a>
      </div>
    </div>
  </div>
  </ToastProvider>
</BaseLayout>


<style>
  /* SVG Display Styles */
  #icon-preview {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    overflow: hidden;
    padding: 2rem; /* Add padding around the icon */
  }
  
  #icon-preview svg {
    max-width: 80% !important; /* Reduce size to 80% to add breathing room */
    max-height: 80% !important;
    width: auto !important;
    height: auto !important;
    display: block;
    object-fit: contain;
  }
  
  /* Ensure the container maintains aspect ratio */
  .icon-display-container {
    position: relative;
    width: 100%;
    height: 100%;
    min-height: 300px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
</style>
