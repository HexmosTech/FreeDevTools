---
import BaseLayout from '../../layouts/BaseLayout.astro';
import AdBanner from '../../components/banner/AdBanner';
import Pagination from '../../components/Pagination.astro';
import BottomPagination from '../../components/BottomPagination.astro';
import { getCollection } from 'astro:content';

const ITEMS_PER_PAGE = 20;


async function getAllCommands() {
  const tldrEntries = await (getCollection as any)('tldr');

  const commandsByPlatform: Record<
    string,
    Array<{
      name: string;
      url: string;
      description?: string;
      category?: string;
    }>
  > = {};

  for (const entry of tldrEntries) {
    // Extract platform and command name from path
    const pathParts = (entry as any).id.split("/");
    const platform = pathParts[pathParts.length - 2]; // e.g., 'android'
    const fileName = pathParts[pathParts.length - 1]; // e.g., 'am.md'
    const commandName = fileName.replace(".md", ""); // e.g., 'am'

    if (!commandsByPlatform[platform]) {
      commandsByPlatform[platform] = [];
    }

    // Get description from frontmatter if available
    const description =
      (entry as any).data?.description ||
      (entry as any).data?.title ||
      `Documentation for ${commandName} command`;

    const commandName_final = (entry as any).data?.name || commandName;

    commandsByPlatform[platform].push({
      name: commandName_final,
      url: (entry as any).data?.path || `/freedevtools/tldr/${platform}/${commandName}`,
      description,
      category: (entry as any).data?.category,
    });
  }

  return commandsByPlatform;
}

// Get all commands data for client-side pagination
const allCommands = await getAllCommands();
const allPlatforms = Object.keys(allCommands).sort();
const totalPlatforms = allPlatforms.length;
const totalPages = Math.ceil(totalPlatforms / ITEMS_PER_PAGE);

const platformIconMap = {
  "linux": "https://raw.githubusercontent.com/github/explore/eb40fa94e4b686db568094600bb30065acce30c3/topics/linux/linux.png",
  "common": "https://cdn-icons-png.flaticon.com/512/5515/5515389.png",
  "sunos": "https://w7.pngwing.com/pngs/761/862/png-transparent-sun-microsystems-logo-oracle-corporation-scalable-graphics-sun-logo-blue-text-computer.png",
  "freebsd": "https://img.favpng.com/5/20/24/freebsd-ports-linux-operating-systems-png-favpng-2Ri1uwih5gV0NtinDFzi2xJ6N_t.jpg",
  "android": "https://cdn-icons-png.flaticon.com/512/174/174836.png",
  "netbsd": "https://w1.pngwing.com/pngs/196/904/png-transparent-circle-logo-netbsd-fedora-file-explorer-orange.png",
  "openbsd": "https://w7.pngwing.com/pngs/205/710/png-transparent-openbsd-berkeley-software-distribution-unix-like-operating-systems-kernel-cartoon-logo-text-logo-fruit.png",
  "cisco-ios": "https://w7.pngwing.com/pngs/118/537/png-transparent-cisco-logo-anyconnect-router-brand-logo-3d-icon-thumbnail.png",
  "osx": "https://cdn-icons-png.flaticon.com/512/2/2235.png",
  "windows": "https://www.freeiconspng.com/thumbs/windows-icon-png/cute-ball-windows-icon-png-16.png",
};

---

<BaseLayout 
  name="TLDR"
  path="/tldr/"
  title="TLDR - Command Documentation | Online Free DevTools by Hexmos"
  description="Comprehensive documentation for command-line tools across different platforms including Linux, macOS, Windows, Android, and more."
  canonical="https://hexmos.com/freedevtools/tldr/"
  themeColor="#1e40af"
  showSidebar={false}
  showHeader={true}
  totalItems={totalPlatforms}
  itemsPerPage={ITEMS_PER_PAGE}
  currentPage={1}
  keywords={["tldr", "command documentation", "cli", "terminal", "linux", "macos", "windows", "android"]}
  features={["Command examples", "Multi-platform", "Quick reference", "Free documentation", "Easy to understand"]}
  commandCategory="Documentation"
>
  <div class="max-w-6xl mx-auto px-2 md:px-6">
    <div class="mb-16 mt-[74px]">
      <AdBanner />
    </div>
    <div class="mb-8">
      <nav class="text-sm text-slate-600 dark:text-slate-400 mb-4">
        <a href="/freedevtools/" class="hover:text-blue-600 dark:hover:text-blue-400">Free DevTools</a>
        <span class="mx-2">/</span>
        <span>TLDR</span>
      </nav>
      
      <div>
        <h1 id="head-title" class="text-2xl font-medium mb-2 text-black dark:text-slate-300">
          TLDR
        </h1>
        <p class="text-muted-foreground text-sm md:text-lg lg:text-lg font-normal ">
          Comprehensive documentation for command-line tools across different platforms.
        </p>
      </div>
      
      <!-- Pagination -->
      <Pagination 
        totalItems={totalPlatforms}
        itemsPerPage={ITEMS_PER_PAGE}
        currentPage={1}
        totalPages={totalPages}
        itemsLabel="platforms"
      />
    </div>

    <div id="platforms-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 md:gap-4 lg:gap-8 mb-8">
      <!-- Platforms will be loaded dynamically -->
    </div>
    
    <!-- Bottom Pagination -->
    <BottomPagination 
      totalItems={totalPlatforms}
      currentPage={1}
      totalPages={totalPages}
      itemsLabel="platforms"
    />
    
    <!-- Credits Section -->
    <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-wrap gap-4">
        <a 
        href="/freedevtools/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
        ‚Üê  Back to Free DevTools
        </a>
        <a 
        href="/freedevtools/tldr/creditsTLDR/"
        class="inline-flex items-center px-4 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-slate-50 dark:bg-slate-800 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
      >
        Credits & Acknowledgments
      </a>
      </div>
    </div>
  </div>
</BaseLayout>

<script define:vars={{ allCommands, allPlatforms, totalPlatforms, totalPages, ITEMS_PER_PAGE, platformIconMap }}>
  // Platform icon mapping
  const platformIcons = platformIconMap;
  
  // Pagination state
  let currentPage = 1;
  let itemsPerPage = ITEMS_PER_PAGE;
  
  // Get current page and items per page from URL
  function getCurrentPageFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const page = parseInt(urlParams.get('page') || '1', 10);
    const items = parseInt(urlParams.get('items') || ITEMS_PER_PAGE.toString(), 10);
    
    // Update items per page if specified in URL
    if (items !== itemsPerPage) {
      itemsPerPage = items;
      const dropdown = document.getElementById('items-per-page');
      if (dropdown) {
        dropdown.value = items.toString();
      }
    }
    
    return Math.max(1, Math.min(page, Math.ceil(totalPlatforms / itemsPerPage)));
  }
  
  // Update URL without page reload
  function updateURL(page, items = null) {
    const url = new URL(window.location);
    if (page === 1) {
      url.searchParams.delete('page');
    } else {
      url.searchParams.set('page', page.toString());
    }
    
    const currentItems = items || itemsPerPage;
    if (currentItems !== ITEMS_PER_PAGE) {
      url.searchParams.set('items', currentItems.toString());
    } else {
      url.searchParams.delete('items');
    }
    
    window.history.pushState({}, '', url);
  }
  
  // Generate page numbers for pagination
  function getPageNumbers(currentPage, totalPages) {
    const pages = [];
    const maxVisible = 5;
    
    if (totalPages <= maxVisible) {
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else if (currentPage <= 3) {
      for (let i = 1; i <= maxVisible; i++) {
        pages.push(i);
      }
    } else if (currentPage >= totalPages - 2) {
      for (let i = totalPages - maxVisible + 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      for (let i = currentPage - 2; i <= currentPage + 2; i++) {
        pages.push(i);
      }
    }
    
    return pages;
  }
  
  // Render platform card
  function renderPlatformCard(platform, platformCommands) {
    const iconUrl = platformIcons[platform] || 'https://cdn-icons-png.flaticon.com/512/5515/5515389.png';
    
    const commandsHtml = platformCommands.slice(0, 5).map(command => 
      `<a href="/freedevtools/tldr/${platform}/${command.name}/" class="block text-sm text-blue-600 dark:text-blue-300 hover:text-black dark:hover:text-white hover:font-bold">${command.name}</a>`
    ).join('');
    
    const moreCommandsHtml = platformCommands.length > 5 ? 
      `<p class="text-xs text-slate-500 dark:text-slate-400">+${platformCommands.length - 5} more commands</p>` : '';
    
    return `
      <div class="bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-900 rounded-xl p-4 md:p-4 lg:p-8 transition-all duration-300 ease-in-out shadow-sm hover:-translate-y-1 hover:shadow-xl hover:border-border">
        <div class="flex items-center mb-4">
          <div class="w-10 h-10 bg-white dark:bg-slate-800 rounded-lg flex items-center justify-center mr-3 border border-slate-200 dark:border-slate-700">
            <img 
              src="${iconUrl}"
              alt="${platform} logo"
              class="w-8 h-8 object-contain"
              onerror="this.src='https://via.placeholder.com/40x40/3b82f6/ffffff?text=' + this.alt.split(' ')[0].charAt(0).toUpperCase()"
            />
          </div>
          <a 
            href="/freedevtools/tldr/${platform}/"
            class="text-xl font-semibold text-black dark:text-neon-light capitalize hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
          >
            ${platform.replace('-', ' ')}
          </a>
        </div>
        
        <p class="text-sm text-slate-800 dark:text-slate-400 mb-4 m-0">
          ${platformCommands.length} commands available
        </p>
        
        <div class="space-y-2">
          ${commandsHtml}
          ${moreCommandsHtml}
        </div>
        
        <div class="mt-4 pt-4 border-t border-slate-200 dark:border-slate-900">
          <a 
            href="/freedevtools/tldr/${platform}/"
            class="text-sm font-medium text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300"
          >
            View all ${platform} commands ‚Üí
          </a>
        </div>
      </div>
    `;
  }
  
  // Render pagination
  function renderPagination() {
    const totalPages = Math.ceil(totalPlatforms / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedPlatforms = allPlatforms.slice(startIndex, endIndex);
    
    // Update pagination info
    document.getElementById('pagination-info').textContent = 
      `Showing ${paginatedPlatforms.length} of ${totalPlatforms} items (Page ${currentPage} of ${totalPages})`;
    
    document.getElementById('page-info').textContent = `${currentPage} / ${totalPages}`;
    document.getElementById('bottom-page-info').textContent = 
      `Page ${currentPage} of ${totalPages} ‚Ä¢ ${totalPlatforms} total items`;
    
    // Update page input value
    const pageInput = document.getElementById('page-input');
    if (pageInput) {
      pageInput.value = currentPage.toString();
      pageInput.max = totalPages;
    }
    
    // Update button states
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const bottomPrevBtn = document.getElementById('bottom-prev-btn');
    const bottomNextBtn = document.getElementById('bottom-next-btn');
    
    const hasPrev = currentPage > 1;
    const hasNext = currentPage < totalPages;
    
    [prevBtn, bottomPrevBtn].forEach(btn => {
      if (btn) {
        btn.disabled = !hasPrev;
      }
    });
    
    [nextBtn, bottomNextBtn].forEach(btn => {
      if (btn) {
        btn.disabled = !hasNext;
      }
    });
    
    // Render platforms
    const platformsGrid = document.getElementById('platforms-grid');
    platformsGrid.innerHTML = paginatedPlatforms.map(platform => 
      renderPlatformCard(platform, allCommands[platform])
    ).join('');
    
    // Render page numbers
    const pageNumbers = getPageNumbers(currentPage, totalPages);
    const pageNumbersContainer = document.getElementById('page-numbers');
    pageNumbersContainer.innerHTML = pageNumbers.map(pageNum => {
      const isCurrentPage = pageNum === currentPage;
      const buttonClass = isCurrentPage 
        ? 'bg-blue-600 text-white' 
        : 'text-slate-700 dark:text-slate-300 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-600';
      
      return `<button data-page="${pageNum}" class="page-number-btn inline-flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors ${buttonClass}">${pageNum}</button>`;
    }).join('');
    
    // Show bottom pagination if there are multiple pages
    const bottomPagination = document.getElementById('bottom-pagination');
    bottomPagination.style.display = totalPages > 1 ? 'flex' : 'none';
  }
  
  // Navigate to page
  function goToPage(page) {
    const totalPages = Math.ceil(totalPlatforms / itemsPerPage);
    if (page < 1 || page > totalPages || page === currentPage) {
      return;
    }
    
    currentPage = page;
    updateURL(page);
    renderPagination();
    
    // Scroll to head-title element
    const headTitle = document.getElementById('head-title');
    if (headTitle) {
      headTitle.scrollIntoView({ behavior: 'smooth', block: 'start' });
    } else {
      // Fallback to top of page if head-title not found
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  }
  
  // Handle items per page change
  function handleItemsPerPageChange(newItemsPerPage) {
    const newTotalPages = Math.ceil(totalPlatforms / newItemsPerPage);
    const newCurrentPage = Math.min(currentPage, newTotalPages);
    
    itemsPerPage = newItemsPerPage;
    currentPage = newCurrentPage;
    
    updateURL(currentPage, itemsPerPage);
    renderPagination();
    
    // Scroll to head-title element
    const headTitle = document.getElementById('head-title');
    if (headTitle) {
      headTitle.scrollIntoView({ behavior: 'smooth', block: 'start' });
    } else {
      // Fallback to top of page if head-title not found
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  }
  
  // Event listeners - use event delegation to avoid re-attaching listeners
  function setupEventListeners() {
    // Use event delegation on the document to handle all clicks
    document.addEventListener('click', (e) => {
      // Handle previous buttons
      if (e.target.id === 'prev-btn' || e.target.id === 'bottom-prev-btn') {
        e.preventDefault();
        goToPage(currentPage - 1);
        return;
      }
      
      // Handle next buttons
      if (e.target.id === 'next-btn' || e.target.id === 'bottom-next-btn') {
        e.preventDefault();
        goToPage(currentPage + 1);
        return;
      }
      
      // Handle page number buttons
      if (e.target.classList.contains('page-number-btn')) {
        e.preventDefault();
        const page = parseInt(e.target.dataset.page, 10);
        goToPage(page);
        return;
      }
      
      // Handle go to page button
      if (e.target.id === 'go-to-page-btn') {
        e.preventDefault();
        const pageInput = document.getElementById('page-input');
        if (pageInput) {
          const page = parseInt(pageInput.value, 10);
          const totalPages = Math.ceil(totalPlatforms / itemsPerPage);
          if (page >= 1 && page <= totalPages) {
            goToPage(page);
          }
        }
        return;
      }
    });
    
    // Handle items per page dropdown change
    document.addEventListener('change', (e) => {
      if (e.target.id === 'items-per-page') {
        const newItemsPerPage = parseInt(e.target.value, 10);
        handleItemsPerPageChange(newItemsPerPage);
      }
    });
    
    // Handle page input enter key press
    document.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        if (e.target.id === 'page-input') {
          e.preventDefault();
          const page = parseInt(e.target.value, 10);
          const totalPages = Math.ceil(totalPlatforms / itemsPerPage);
          if (page >= 1 && page <= totalPages) {
            goToPage(page);
          }
        }
      }
    });
    
    // Handle page input value changes (real-time updates)
    document.addEventListener('input', (e) => {
      if (e.target.id === 'page-input') {
        const page = parseInt(e.target.value, 10);
        const totalPages = Math.ceil(totalPlatforms / itemsPerPage);
        
        // Validate input
        if (page < 1) {
          e.target.value = '1';
        } else if (page > totalPages) {
          e.target.value = totalPages.toString();
        }
      }
    });
  }
  
  // Handle browser back/forward (only add once)
  if (!window.paginationInitialized) {
    window.addEventListener('popstate', () => {
      currentPage = getCurrentPageFromURL();
      renderPagination();
    });
    window.paginationInitialized = true;
  }
  
  // Initialize pagination
  function init() {
    currentPage = getCurrentPageFromURL();
    renderPagination();
  }
  
  // Set up event listeners only once
  if (!window.paginationEventListenersSet) {
    setupEventListeners();
    window.paginationEventListenersSet = true;
  }
  
  // Start when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    // Small delay to ensure DOM is fully ready
    setTimeout(init, 100);
  }
  
  // Handle command search navigation
  document.addEventListener('commandSelected', (event) => {
    const customEvent = event;
    const command = customEvent.detail;
    window.location.href = command.url;
  });
</script>
