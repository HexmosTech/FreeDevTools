---
import AdBanner from '../../../components/banner/AdBanner';
import BaseLayout from '../../../layouts/BaseLayout.astro';

async function getAllCommands() {
  const commandFiles = import.meta.glob(
    "/src/pages/markdown_pages/tldr/**/*.md"
  );

  const commandsByPlatform: Record<
    string,
    Array<{
      name: string;
      url: string;
      description?: string;
      category?: string;
    }>
  > = {};

  for (const [path, file] of Object.entries(commandFiles)) {
    // Extract platform and command name from path
    const pathParts = path.split("/");
    const platform = pathParts[pathParts.length - 2]; // e.g., 'android'
    const fileName = pathParts[pathParts.length - 1]; // e.g., 'am.md'
    const commandName = fileName.replace(".md", ""); // e.g., 'am'

    if (!commandsByPlatform[platform]) {
      commandsByPlatform[platform] = [];
    }

    // Get description from frontmatter if available
    const description =
      (file as any).frontmatter?.description ||
      (file as any).frontmatter?.title ||
      `Documentation for ${commandName} command`;

    // Get additional frontmatter data
    const frontmatter = (file as any).frontmatter || {};

    const commandName_final = frontmatter.name || commandName;

    // Debug logging
    if (!frontmatter.name) {
      console.log(
        `❌ Missing name field: ${path} -> using fallback: ${commandName}`
      );
    }
    if (frontmatter.name === "") {
      console.log(`❌ Empty name field: ${path}`);
    }

    commandsByPlatform[platform].push({
      name: commandName_final,
      url: frontmatter.path || `/freedevtools/tldr/${platform}/${commandName}`,
      description,
      category: frontmatter.category,
    });
  }

  return commandsByPlatform;
}

async function getCommandsByPlatform(platform: string) {
  const allCommands = await getAllCommands();
  return allCommands[platform] || [];
}

export async function getStaticPaths() {
  const commandFiles = import.meta.glob('/src/pages/markdown_pages/tldr/**/*.md', { eager: true });
  const platforms = new Set<string>();
  
  for (const path of Object.keys(commandFiles)) {
    const pathParts = path.split('/');
    const platform = pathParts[pathParts.length - 2];
    platforms.add(platform);
  }
  
  return Array.from(platforms).map(platform => ({
    params: { platform }
  }));
}

const { platform } = Astro.params;
const commands = await getCommandsByPlatform(platform!);
---

<BaseLayout 
  name={`${platform} Commands`}
  path={`/tldr/${platform}/`}
  title={`${platform} Commands - TLDR - Free DevTools`}
  description={`Complete documentation for ${platform} command-line tools and utilities.`}
  canonical={`https://hexmos.com/freedevtools/tldr/${platform}/`}
  themeColor="#1e40af"
  showSidebar={false}
  showHeader={true}
>
  <div class="max-w-6xl mx-auto px-2 md:px-6">
    <div class="mb-16 mt-[74px]">
      <AdBanner client:load />
      </div>
    <div class="mb-8">
      <nav class="text-sm text-slate-600 dark:text-slate-400 mb-4">
        <a href="/freedevtools/" class="hover:text-blue-600 dark:hover:text-blue-400">Free DevTools</a>
        <span class="mx-2">/</span>
        <a href="/freedevtools/tldr/" class="hover:text-blue-600 dark:hover:text-blue-400">TLDR</a>
        <span class="mx-2">/</span>
        <span class="capitalize">{platform}</span>
      </nav>
      
      <h1 class="text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 capitalize">
        {platform} Commands
      </h1>
      <p class="text-lg text-slate-600 dark:text-slate-400">
        {commands.length} commands available for {platform}
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 md:gap-4 lg:gap-8">
      {commands.map((command) => (
        <a 
          href={command.url}
          class="block bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-900 rounded-xl p-4 md:p-4 lg:p-8 transition-all duration-300 ease-in-out shadow-sm hover:-translate-y-1 hover:shadow-xl hover:border-border"
        >
          <div class="flex items-center justify-between mb-2">
            <h3 class="font-mono text-lg font-semibold text-black dark:text-neon-light m-0 mb-2 md:mb-4">
              {command.name}
            </h3>
            <span class="text-blue-600 dark:text-blue-400">→</span>
          </div>
          <p class="text-sm text-slate-800 dark:text-slate-400 m-0">
            {command.description}
          </p>
        </a>
      ))}
    </div>
    <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-wrap gap-4">
        <a 
          href="/freedevtools/tldr/"
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          ← Back to tldr
        </a>
      </div>
    </div>
  </div>
</BaseLayout>
