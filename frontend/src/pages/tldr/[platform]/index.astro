---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import AdBanner from '../../../components/banner/AdBanner';
import BaseLayout from '../../../layouts/BaseLayout.astro';

async function getCommandsByPlatform(platform: string) {
  const tldrEntries: CollectionEntry<'tldr'>[] = await getCollection('tldr');
  
  return tldrEntries
    .filter(entry => {
      const pathParts = entry.id.split('/');
      const entryPlatform = pathParts[pathParts.length - 2];
      return entryPlatform === platform;
    })
    .map(entry => {
      const pathParts = entry.id.split('/');
      const fileName = pathParts[pathParts.length - 1];
      const commandName = fileName.replace('.md', '');
      
      return {
        name: entry.data.name || commandName,
        url: entry.data.path || `/freedevtools/tldr/${platform}/${commandName}`,
        description: entry.data.description || `Documentation for ${commandName} command`,
        category: entry.data.category,
      };
    });
}

export async function getStaticPaths() {
  const tldrEntries: CollectionEntry<'tldr'>[] = await getCollection('tldr');
  const platforms = new Set<string>();
  
  for (const entry of tldrEntries) {
    const pathParts = entry.id.split('/');
    const platform = pathParts[pathParts.length - 2];
    platforms.add(platform);
  }
  
  return Array.from(platforms).map(platform => ({
    params: { platform }
  }));
}

const { platform } = Astro.params;
const commands = await getCommandsByPlatform(platform!);

const ITEMS_PER_PAGE = 30;
const totalCommands = commands.length;
const totalPages = Math.ceil(totalCommands / ITEMS_PER_PAGE);
---

<BaseLayout 
  name={`${platform} Commands`}
  path={`/tldr/${platform}/`}
  title={`${platform} Commands - TLDR - Free DevTools`}
  description={`Complete documentation for ${platform} command-line tools and utilities.`}
  canonical={`https://hexmos.com/freedevtools/tldr/${platform}/`}
  themeColor="#1e40af"
  showSidebar={false}
  showHeader={true}
>
  <div class="max-w-6xl mx-auto px-2 md:px-6">
    <div class="mb-16 mt-[74px]">
      <AdBanner client:load />
      </div>
    <div class="mb-8">
      <nav class="text-sm text-slate-600 dark:text-slate-400 mb-4">
        <a href="/freedevtools/" class="hover:text-blue-600 dark:hover:text-blue-400">Free DevTools</a>
        <span class="mx-2">/</span>
        <a href="/freedevtools/tldr/" class="hover:text-blue-600 dark:hover:text-blue-400">TLDR</a>
        <span class="mx-2">/</span>
        <span class="capitalize">{platform}</span>
      </nav>
      
      <h1 class="text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4 capitalize">
        {platform} Commands
      </h1>
      <p class="text-lg text-slate-600 dark:text-slate-400 mb-6">
        {commands.length} commands available for {platform}
      </p>
      
      <!-- Pagination Info -->
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 p-4 bg-slate-50 dark:bg-slate-800 rounded-lg">
        <div id="pagination-info" class="text-sm text-slate-900 dark:text-slate-400 mb-2 sm:mb-0">
          Loading...
        </div>
        
        <!-- Pagination Controls -->
        <div class="flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-2">
          <!-- Items per page dropdown -->
          <div class="flex items-center space-x-2">
            <label for="items-per-page" class="text-sm text-slate-700 dark:text-slate-300">
              Items per page:
            </label>
            <select 
              id="items-per-page"
              class="px-3 py-2 text-sm border border-slate-300 dark:border-slate-600 rounded-md bg-white dark:bg-slate-700 text-slate-700 dark:text-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="10">10</option>
              <option value="20">20</option>
              <option value="30" selected>30</option>
              <option value="50">50</option>
              <option value="100">100</option>
            </select>
          </div>
          
          <!-- Pagination buttons -->
          <div class="flex items-center space-x-2">
            <button 
              id="prev-btn"
              class="inline-flex items-center px-3 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              disabled
              >
                ← Previous
            </button>
            
            <span id="page-info" class="text-sm text-slate-500 dark:text-slate-400">
              1 / {totalPages}
            </span>
            
            <button 
              id="next-btn"
              class="inline-flex items-center px-3 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              disabled
              >
                Next →
            </button>
          </div>
        </div>
      </div>
    </div>

    <div id="commands-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 md:gap-4 lg:gap-8 mb-8">
      <!-- Commands will be loaded dynamically -->
    </div>
    
    <!-- Bottom Pagination -->
    <div id="bottom-pagination" class="mt-8 flex flex-col items-center" style="display: none;">
        <div class="flex items-center space-x-1">
        <button 
          id="bottom-prev-btn"
          class="inline-flex items-center px-3 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
            >
              ← Previous
        </button>
          
          <!-- Page Numbers -->
        <div id="page-numbers" class="flex items-center space-x-1">
          <!-- Page numbers will be generated dynamically -->
        </div>
        
        <button 
          id="bottom-next-btn"
          class="inline-flex items-center px-3 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md hover:bg-slate-50 dark:hover:bg-slate-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          Next →
        </button>
        </div>
      
      <div id="bottom-page-info" class="mt-4 text-sm text-slate-500 dark:text-slate-400">
        Page 1 of {totalPages} • {totalCommands} total items
      </div>
    </div>
    <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-wrap gap-4">
        <a 
          href="/freedevtools/tldr/"
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          ← Back to tldr
        </a>
      </div>
    </div>
  </div>
</BaseLayout>

<script define:vars={{ commands, totalCommands, totalPages, ITEMS_PER_PAGE }}>
  // Pagination state
  let currentPage = 1;
  let itemsPerPage = ITEMS_PER_PAGE;
  
  // Get current page and items per page from URL
  function getCurrentPageFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const page = parseInt(urlParams.get('page') || '1', 10);
    const items = parseInt(urlParams.get('items') || ITEMS_PER_PAGE.toString(), 10);
    
    // Update items per page if specified in URL
    if (items !== itemsPerPage) {
      itemsPerPage = items;
      const dropdown = document.getElementById('items-per-page');
      if (dropdown) {
        dropdown.value = items.toString();
      }
    }
    
    return Math.max(1, Math.min(page, Math.ceil(totalCommands / itemsPerPage)));
  }
  
  // Update URL without page reload
  function updateURL(page, items = null) {
    const url = new URL(window.location);
    if (page === 1) {
      url.searchParams.delete('page');
    } else {
      url.searchParams.set('page', page.toString());
    }
    
    const currentItems = items || itemsPerPage;
    if (currentItems !== ITEMS_PER_PAGE) {
      url.searchParams.set('items', currentItems.toString());
    } else {
      url.searchParams.delete('items');
    }
    
    window.history.pushState({}, '', url);
  }
  
  // Generate page numbers for pagination
  function getPageNumbers(currentPage, totalPages) {
    const pages = [];
    const maxVisible = 5;
    
    if (totalPages <= maxVisible) {
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else if (currentPage <= 3) {
      for (let i = 1; i <= maxVisible; i++) {
        pages.push(i);
      }
    } else if (currentPage >= totalPages - 2) {
      for (let i = totalPages - maxVisible + 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      for (let i = currentPage - 2; i <= currentPage + 2; i++) {
        pages.push(i);
      }
    }
    
    return pages;
  }
  
  // Render command card
  function renderCommandCard(command) {
    return `
      <a 
        href="${command.url}"
        class="block bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-900 rounded-xl p-4 md:p-4 lg:p-8 transition-all duration-300 ease-in-out shadow-sm hover:-translate-y-1 hover:shadow-xl hover:border-border"
      >
        <div class="flex items-center justify-between mb-2">
          <h3 class="font-mono text-lg font-semibold text-black dark:text-neon-light m-0 mb-2 md:mb-4">
            ${command.name}
          </h3>
          <span class="text-blue-600 dark:text-blue-400">→</span>
        </div>
        <p class="text-sm text-slate-800 dark:text-slate-400 m-0">
          ${command.description}
        </p>
      </a>
    `;
  }
  
  // Render pagination
  function renderPagination() {
    const totalPages = Math.ceil(totalCommands / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedCommands = commands.slice(startIndex, endIndex);
    
    // Update pagination info
    document.getElementById('pagination-info').textContent = 
      `Showing ${paginatedCommands.length} of ${totalCommands} items (Page ${currentPage} of ${totalPages})`;
    
    document.getElementById('page-info').textContent = `${currentPage} / ${totalPages}`;
    document.getElementById('bottom-page-info').textContent = 
      `Page ${currentPage} of ${totalPages} • ${totalCommands} total items`;
    
    // Update button states
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const bottomPrevBtn = document.getElementById('bottom-prev-btn');
    const bottomNextBtn = document.getElementById('bottom-next-btn');
    
    const hasPrev = currentPage > 1;
    const hasNext = currentPage < totalPages;
    
    [prevBtn, bottomPrevBtn].forEach(btn => {
      if (btn) {
        btn.disabled = !hasPrev;
      }
    });
    
    [nextBtn, bottomNextBtn].forEach(btn => {
      if (btn) {
        btn.disabled = !hasNext;
      }
    });
    
    // Render commands
    const commandsGrid = document.getElementById('commands-grid');
    commandsGrid.innerHTML = paginatedCommands.map(command => 
      renderCommandCard(command)
    ).join('');
    
    // Render page numbers
    const pageNumbers = getPageNumbers(currentPage, totalPages);
    const pageNumbersContainer = document.getElementById('page-numbers');
    pageNumbersContainer.innerHTML = pageNumbers.map(pageNum => {
      const isCurrentPage = pageNum === currentPage;
      const buttonClass = isCurrentPage 
        ? 'bg-blue-600 text-white' 
        : 'text-slate-700 dark:text-slate-300 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-600';
      
      return `<button data-page="${pageNum}" class="page-number-btn inline-flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors ${buttonClass}">${pageNum}</button>`;
    }).join('');
    
    // Show bottom pagination if there are multiple pages
    const bottomPagination = document.getElementById('bottom-pagination');
    bottomPagination.style.display = totalPages > 1 ? 'flex' : 'none';
  }
  
  // Navigate to page
  function goToPage(page) {
    const totalPages = Math.ceil(totalCommands / itemsPerPage);
    if (page < 1 || page > totalPages || page === currentPage) {
      return;
    }
    
    currentPage = page;
    updateURL(page);
    renderPagination();
    
    // Scroll to top of page
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }
  
  // Handle items per page change
  function handleItemsPerPageChange(newItemsPerPage) {
    const newTotalPages = Math.ceil(totalCommands / newItemsPerPage);
    const newCurrentPage = Math.min(currentPage, newTotalPages);
    
    itemsPerPage = newItemsPerPage;
    currentPage = newCurrentPage;
    
    updateURL(currentPage, itemsPerPage);
    renderPagination();
    
    // Scroll to top of page
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }
  
  // Event listeners - use event delegation to avoid re-attaching listeners
  function setupEventListeners() {
    // Use event delegation on the document to handle all clicks
    document.addEventListener('click', (e) => {
      // Handle previous buttons
      if (e.target.id === 'prev-btn' || e.target.id === 'bottom-prev-btn') {
        e.preventDefault();
        goToPage(currentPage - 1);
        return;
      }
      
      // Handle next buttons
      if (e.target.id === 'next-btn' || e.target.id === 'bottom-next-btn') {
        e.preventDefault();
        goToPage(currentPage + 1);
        return;
      }
      
      // Handle page number buttons
      if (e.target.classList.contains('page-number-btn')) {
        e.preventDefault();
        const page = parseInt(e.target.dataset.page, 10);
        goToPage(page);
        return;
      }
    });
    
    // Handle items per page dropdown change
    document.addEventListener('change', (e) => {
      if (e.target.id === 'items-per-page') {
        const newItemsPerPage = parseInt(e.target.value, 10);
        handleItemsPerPageChange(newItemsPerPage);
      }
    });
  }
  
  // Handle browser back/forward (only add once)
  if (!window.platformPaginationInitialized) {
    window.addEventListener('popstate', () => {
      currentPage = getCurrentPageFromURL();
      renderPagination();
    });
    window.platformPaginationInitialized = true;
  }
  
  // Initialize pagination
  function init() {
    currentPage = getCurrentPageFromURL();
    renderPagination();
  }
  
  // Set up event listeners only once
  if (!window.platformPaginationEventListenersSet) {
    setupEventListeners();
    window.platformPaginationEventListenersSet = true;
  }
  
  // Start when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    // Small delay to ensure DOM is fully ready
    setTimeout(init, 100);
  }
</script>
