---
import BaseLayout from '../../layouts/BaseLayout.astro';
import AdBanner from '../../components/banner/AdBanner';
import Pagination from '../../components/PaginationComponent.astro';
import CreditsButton from '../../components/buttons/CreditsButton';
import { getEmojisByCategory, getEmojiCategories } from '../../lib/emojis';

export async function getStaticPaths() {
  const categories = getEmojiCategories();
  
  return categories
    .filter((category) => category && category.trim() !== '')
    .map((category) => ({
      params: { category: category.toLowerCase().replace(/[^a-z0-9]+/g, '-') },
      props: { category }
    }));
}

// Prefer original category from build-time props to preserve symbols like '&'
const { category: categorySlug } = Astro.params;
const categoryName = (Astro.props?.category as string) || categorySlug!.replace(/-/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase());

// SEO metadata and descriptions for categories
const categorySeo: Record<string, { title: string; description: string; keywords: string[] } > = {
  'Activities': {
    title: 'Activities Emojis - Sports, Events, and Hobbies | Online Free DevTools by Hexmos',
    description: 'Explore activities emojis covering sports, games, celebrations, and hobbies. Copy emoji, view meanings, and find shortcodes instantly.',
    keywords: ['activities emojis', 'sports emojis', 'games emojis', 'celebration emojis', 'hobby emojis', 'copy emoji', 'emoji meanings']
  },
  'Animals & Nature': {
    title: 'Animals & Nature Emojis - Wildlife, Plants, and Weather | Online Free DevTools by Hexmos',
    description: 'Discover animals and nature emojis including wildlife, pets, plants, and weather symbols. Copy emoji, view meanings, and find shortcodes instantly.',
    keywords: ['animals emojis', 'nature emojis', 'wildlife emojis', 'plant emojis', 'weather emojis', 'copy emoji', 'emoji meanings']
  },
  'Food & Drink': {
    title: 'Food & Drink Emojis - Meals, Beverages, and Snacks | Online Free DevTools by Hexmos',
    description: 'Browse food and drink emojis including meals, beverages, fruits, vegetables, and snacks. Copy emoji, view meanings, and find shortcodes instantly.',
    keywords: ['food emojis', 'drink emojis', 'meal emojis', 'beverage emojis', 'fruit emojis', 'copy emoji', 'emoji meanings']
  },
  'Objects': {
    title: 'Objects Emojis - Technology, Tools, and Items | Online Free DevTools by Hexmos',
    description: 'Explore object emojis including technology, tools, clothing, and everyday items. Copy emoji, view meanings, and find shortcodes instantly.',
    keywords: ['object emojis', 'technology emojis', 'tool emojis', 'clothing emojis', 'item emojis', 'copy emoji', 'emoji meanings']
  },
  'People & Body': {
    title: 'People & Body Emojis - Faces, Gestures, and Body Parts | Online Free DevTools by Hexmos',
    description: 'Discover people and body emojis including faces, gestures, body parts, and family members. Copy emoji, view meanings, and find shortcodes instantly.',
    keywords: ['people emojis', 'body emojis', 'face emojis', 'gesture emojis', 'family emojis', 'copy emoji', 'emoji meanings']
  },
  'Smileys & Emotion': {
    title: 'Smileys & Emotion Emojis - Faces, Feelings, and Expressions | Online Free DevTools by Hexmos',
    description: 'Browse smileys and emotion emojis including faces, feelings, and expressions. Copy emoji, view meanings, and find shortcodes instantly.',
    keywords: ['smiley emojis', 'emotion emojis', 'face emojis', 'feeling emojis', 'expression emojis', 'copy emoji', 'emoji meanings']
  },
  'Symbols': {
    title: 'Symbols Emojis - Signs, Shapes, and Icons | Online Free DevTools by Hexmos',
    description: 'Explore symbol emojis including signs, shapes, icons, and special characters. Copy emoji, view meanings, and find shortcodes instantly.',
    keywords: ['symbol emojis', 'sign emojis', 'shape emojis', 'icon emojis', 'character emojis', 'copy emoji', 'emoji meanings']
  },
  'Travel & Places': {
    title: 'Travel & Places Emojis - Destinations, Transportation, and Locations | Online Free DevTools by Hexmos',
    description: 'Discover travel and places emojis including destinations, transportation, and location symbols. Copy emoji, view meanings, and find shortcodes instantly.',
    keywords: ['travel emojis', 'places emojis', 'destination emojis', 'transportation emojis', 'location emojis', 'copy emoji', 'emoji meanings']
  },
  'Flags': {
    title: 'Flags Emojis - Country and Regional Flags | Online Free DevTools by Hexmos',
    description: 'Browse flag emojis including country flags, regional flags, and special flags. Copy emoji, view meanings, and find shortcodes instantly.',
    keywords: ['flag emojis', 'country emojis', 'regional emojis', 'national emojis', 'copy emoji', 'emoji meanings']
  }
};

const seoData = categorySeo[categoryName] || {
  title: `${categoryName} Emojis | Online Free DevTools by Hexmos`,
  description: `Explore ${categoryName.toLowerCase()} emojis. Copy emoji, view meanings, and find shortcodes instantly.`,
  keywords: [`${categoryName.toLowerCase()} emojis`, 'copy emoji', 'emoji meanings', 'emoji shortcodes']
};

// Get emojis for this category
const emojis = await getEmojisByCategory(categoryName);
const totalEmojis = emojis.length;

// Pagination logic for page 1
const itemsPerPage = 30;
const currentPage = 1;
const totalPages = Math.ceil(totalEmojis / itemsPerPage);
const startIndex = (currentPage - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const paginatedEmojis = emojis.slice(startIndex, endIndex);

// Breadcrumb items
const breadcrumbItems = [
  { label: 'Free DevTools', href: '/freedevtools/' },
  { label: 'Emojis', href: '/freedevtools/emojis/' },
  { label: categoryName, href: `/freedevtools/emojis/${categorySlug}/` }
];
---

<BaseLayout 
  name={categoryName}
  path={`/emojis/${categorySlug}/`}
  title={seoData.title}
  description={seoData.description}
  canonical={`https://hexmos.com/freedevtools/emojis/${categorySlug}/`}
  themeColor="#1e40af"
  keywords={seoData.keywords}
  showSidebar={false}
  showHeader={true}
  totalItems={totalEmojis}
  features={["Copy instantly", "View meanings", "Find shortcodes", "No signup required", "Free access"]}
  emojiCategory={categoryName}
>
  <div class="max-w-6xl mx-auto px-2 md:px-6">
    <div class="mb-16 mt-[74px]">
      <AdBanner client:visible />
    </div>
    
    <div class="mb-8">
      <nav class="text-sm text-slate-600 dark:text-slate-400 mb-4">
        <a href="/freedevtools/" class="hover:text-blue-600 dark:hover:text-blue-400">Free DevTools</a>
        <span class="mx-2">/</span>
        <a href="/freedevtools/emojis/" class="hover:text-blue-600 dark:hover:text-blue-400">Emojis</a>
        <span class="mx-2">/</span>
        <span>{categoryName}</span>
      </nav>
      
      <h1 class="text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4">
            {categoryName} Emojis
          </h1>
      <p class="text-lg text-slate-600 dark:text-slate-400 mb-6">
        {seoData.description}
      </p>
    </div>

    <!-- Overview Stats -->
    <div id="pagination-info" class="text-center mb-8">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8">
        <div class="text-center">
          <div class="text-3xl font-bold text-blue-600">{totalEmojis.toLocaleString()}</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Emojis</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-green-600">{totalPages}</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Pages</div>
        </div>
        </div>
      </div>
      
    <!-- Pagination Info -->
    <div class="bg-slate-50 dark:bg-slate-800 rounded-lg p-4 mb-6 mt-8">
      <div class="text-sm text-slate-600 dark:text-slate-400 text-center">
        Showing {paginatedEmojis.length} of {totalEmojis} emojis (Page {currentPage} of {totalPages})
      </div>
    </div>

    <!-- Emojis Grid -->
    <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-4 mb-8">
      {paginatedEmojis.map((emoji) => (
        <div class="emoji-card bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-700 rounded-lg p-4 text-center hover:shadow-lg transition-all duration-200 cursor-pointer" data-emoji={emoji.code} data-title={emoji.title || emoji.fluentui_metadata?.cldr || emoji.slug}>
          <div class="text-3xl mb-2">{emoji.code}</div>
          <div class="text-xs text-slate-600 dark:text-slate-400 truncate" title={emoji.title || emoji.fluentui_metadata?.cldr || emoji.slug}>
            {emoji.title || emoji.fluentui_metadata?.cldr || emoji.slug}
          </div>
        </div>
      ))}
    </div>
    
    <!-- Pagination -->
    <Pagination 
      currentPage={currentPage}
      totalPages={totalPages}
      baseUrl={`/freedevtools/emojis/${categorySlug}/`}
    />
    
    <div class="mt-12 pt-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
        <a 
          href="/freedevtools/emojis/" 
          class="inline-flex items-center text-sm text-slate-600 dark:text-slate-400 hover:text-blue-600 dark:hover:text-blue-300 transition-colors"
        >
          ‚Üê  Back to Emojis
        </a>
        <CreditsButton href="/freedevtools/emojis/credits/" />
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  // Scroll to pagination info only if hash is present in URL
  if (window.location.hash === '#pagination-info') {
    const paginationInfo = document.getElementById('pagination-info');
    if (paginationInfo) {
      paginationInfo.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }

  // Copy emoji functionality
  document.addEventListener('DOMContentLoaded', function() {
    const emojiCards = document.querySelectorAll('.emoji-card');
    
    emojiCards.forEach((card: any) => {
      card.addEventListener('click', function(this: any) {
        const emoji = this.dataset.emoji;
        const title = this.dataset.title;
        
        // Copy to clipboard
        navigator.clipboard.writeText(emoji).then(() => {
          // Show feedback
          const originalText = this.querySelector('.text-xs').textContent;
          this.querySelector('.text-xs').textContent = 'Copied!';
          this.style.backgroundColor = '#10b981';
          this.style.color = 'white';
          
          setTimeout(() => {
            this.querySelector('.text-xs').textContent = originalText;
            this.style.backgroundColor = '';
            this.style.color = '';
          }, 1000);
        }).catch((err: any) => {
          console.error('Failed to copy emoji:', err);
        });
      });
    });
  });
</script>