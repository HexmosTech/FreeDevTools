---
import CreditsButton from '../../components/buttons/CreditsButton';
import Pagination from '../../components/PaginationComponent.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import ToolContainer from '../../components/tool/ToolContainer';
import ToolHead from '../../components/tool/ToolHead';
import { getAllEmojis, getEmojiCategories } from '../../lib/emojis';
import AdBanner from '../../components/banner/AdBanner.astro';

export async function getStaticPaths() {
  const emojis = await getAllEmojis();
  const categories = getEmojiCategories();
  
  const itemsPerPage = 30;
  const totalPages = Math.ceil(categories.length / itemsPerPage);
  
  const paths = [];
  for (let page = 1; page <= totalPages; page++) {
    paths.push({
      params: { page: page.toString() }
    });
  }
  
  return paths;
}

const { page } = Astro.params;
const currentPage = parseInt(page || '1');

const emojis = await getAllEmojis();

// Metadata-based categories
const categories = getEmojiCategories();
const emojisByCategory: Record<string, any[]> = {};
for (const cat of categories) {
  emojisByCategory[cat] = emojis.filter((e) => (e.fluentui_metadata?.group || e.emoji_net_data?.category || (e as any).given_category || 'Other') === cat);
}

// Sort categories and emojis within categories
const sortedCategories = Object.keys(emojisByCategory).sort();
for (const category of sortedCategories) {
  emojisByCategory[category].sort((a, b) => {
    const titleA = a.title || a.fluentui_metadata?.cldr || a.slug || '';
    const titleB = b.title || b.fluentui_metadata?.cldr || b.slug || '';
    return titleA.localeCompare(titleB);
  });
}

// Pagination logic
const itemsPerPage = 36;
const totalPages = Math.ceil(sortedCategories.length / itemsPerPage);
const startIndex = (currentPage - 1) * itemsPerPage;
const endIndex = startIndex + itemsPerPage;
const paginatedCategories = sortedCategories.slice(startIndex, endIndex);

// Category icons mapping
const categoryIconMap: Record<string, string> = {
  "Smileys & Emotion": "üòÄ",
  "People & Body": "üë§",
  "Animals & Nature": "üê∂",
  "Food & Drink": "üçé",
  "Travel & Places": "‚úàÔ∏è",
  "Activities": "‚öΩ",
  "Objects": "üì±",
  "Symbols": "‚ù§Ô∏è",
  "Flags": "üèÅ",
  "Other": "‚ùì"
};

// Breadcrumb items
const breadcrumbItems = [
  { label: 'Free DevTools', href: '/freedevtools/' },
  { label: 'Emojis', href: '/freedevtools/emojis/' }
];
---

<BaseLayout 
  name="Emojis"
  path="/emojis/"
  title="Emoji Reference - Browse & Copy Emojis | Online Free DevTools by Hexmos"
  description="Explore the emoji reference by category. Find meanings, names, and shortcodes. Browse thousands of emojis and copy instantly. Free, fast, no signup."
  canonical="https://hexmos.com/freedevtools/emojis/"
  keywords={[
    'emoji reference',
    'emoji categories',
    'copy emojis',
    'emoji meanings',
    'emoji shortcodes'
  ]}
  
  showHeader={true}
  totalItems={sortedCategories.length}
  features={["Browse by category", "Copy instantly", "Find meanings", "No signup required", "Free access"]}
  emojiCategory="Reference"
>
  <ToolContainer>
    <div class="mb-16 mt-[74px]">
      <AdBanner />
    </div>
    <ToolHead
      name="Emojis"
      description="Comprehensive emoji reference with categories, meanings, and copy functionality. Browse categories like Smileys & Emotion, People & Body, Animals & Nature, Food & Drink, Travel & Places, Activities, Objects, Symbols, and Flags."
      breadcrumbItems={breadcrumbItems}
    />

    <!-- Overview Stats -->
    <div id="pagination-info" class="text-center mb-8">
      <div class="grid grid-cols-2 gap-6 mt-8">
        <div class="text-center">
          <div class="text-3xl font-bold text-blue-600">{sortedCategories.length}</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Categories</div>
        </div>
        <div class="text-center">
          <div class="text-3xl font-bold text-green-600">{emojis.length.toLocaleString()}</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">Emojis</div>
        </div>
      </div>
    </div>

    <div id="emoji-categories" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 md:gap-4 lg:gap-8">
      {paginatedCategories.map((category) => (
        <div class="bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-900 rounded-xl p-4 md:p-4 lg:p-8 transition-all duration-300 ease-in-out shadow-sm hover:-translate-y-1 hover:shadow-xl hover:border-border">
          <div class="flex items-center mb-4">
            <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 dark:from-blue-600 dark:to-blue-700 rounded-lg flex items-center justify-center mr-3 border border-slate-200 dark:border-slate-700 shadow-sm">
              <span class="text-white font-bold text-lg select-none">
                {categoryIconMap[category] || "‚ùì"}
              </span>
            </div>
            <a 
              href={`/freedevtools/emojis/${category.toLowerCase().replace(/[^a-z0-9]+/g, '-')}/`}
              class="text-xl font-semibold text-black dark:text-neon-light capitalize hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            >
              {category.replace('-', ' ')}
            </a>
          </div>
          
          <p class="text-sm text-slate-800 dark:text-slate-400 mb-4 m-0">
            {emojisByCategory[category].length} emojis available
          </p>
          
          <div class="space-y-2">
            {emojisByCategory[category].slice(0, 5).map((emoji) => {
              const emojiName = emoji.title || emoji.fluentui_metadata?.cldr || emoji.slug;
              const truncatedName = emojiName.length > 27 ? emojiName.substring(0, 27) + '...' : emojiName;
              return (
                <a 
                  href={`/freedevtools/emojis/${emoji.slug}/`}
                  class="block text-sm text-blue-600 dark:text-blue-400 hover:text-black dark:hover:text-white hover:font-bold"
                >
                  {emoji.code || emoji.emoji} {truncatedName}
                </a>
              );
            })}
            {emojisByCategory[category].length > 5 && (
              <p class="text-xs text-slate-500 dark:text-slate-500">
                +{emojisByCategory[category].length - 5} more items
              </p>
            )}
          </div>
          
          <div class="mt-4 pt-4 border-t border-slate-200 dark:border-slate-900">
            <a 
              href={`/freedevtools/emojis/${category.toLowerCase().replace(/[^a-z0-9]+/g, '-')}/`}
              class="text-sm font-medium text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300"
            >
              View all {category} emojis ‚Üí
            </a>
          </div>
        </div>
      ))}
    </div>

    <!-- Pagination -->
    <Pagination 
      currentPage={currentPage}
      totalPages={totalPages}
      baseUrl="/freedevtools/emojis/"
    />

    <!-- Credits Section -->
    <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-wrap gap-4">
        <a 
          href="/freedevtools/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          ‚Üê  Back to Free DevTools
        </a>
        <CreditsButton href="/freedevtools/emojis/credits/" />
      </div>
    </div>
  </ToolContainer>
</BaseLayout>

<script>
  // Scroll to pagination info only if hash is present in URL
  if (window.location.hash === '#pagination-info') {
    const paginationInfo = document.getElementById('pagination-info');
    if (paginationInfo) {
      paginationInfo.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  }
</script>
