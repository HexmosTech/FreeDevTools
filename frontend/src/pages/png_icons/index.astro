---
import BaseLayout from '../../layouts/BaseLayout.astro';
import AdBanner from '../../components/banner/AdBanner';
import Pagination from '../../components/Pagination.astro';
import BottomPagination from '../../components/BottomPagination.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

const ITEMS_PER_PAGE = 30;

async function getAllIcons() {
  // Load the clustor.json file
  const fs = await import('fs/promises');
  const path = await import('path');
  
  const clustorPath = path.join('./src/pages/svg_icons', 'clustor.json');
  const clustorData = JSON.parse(await fs.readFile(clustorPath, 'utf-8'));
  
  const iconsByCategory: Record<
    string,
    Array<{
      name: string;
      url: string;
      description?: string;
      category?: string;
      svgContent?: string;
    }>
  > = {};

  // Process each cluster (category)
  for (const [clusterKey, clusterData] of Object.entries(clustorData.clusters)) {
    const cluster = clusterData as any;
    const categoryName = cluster.name; // Use the name from the cluster data
    
    if (!iconsByCategory[categoryName]) {
      iconsByCategory[categoryName] = [];
    }

    // Process each file in the cluster
    for (const fileName of cluster.fileNames) {
      const iconName = fileName.replace(".svg", "");
      
      // Read the SVG file content from the category folder
      const filePath = path.join('./src/pages/svg_icons/_icons', categoryName, fileName);
      let svgContent = '';
      try {
        svgContent = await fs.readFile(filePath, 'utf-8');
      } catch (error) {
        console.warn(`Could not read file: ${categoryName}/${fileName}`);
        continue;
      }

      iconsByCategory[categoryName].push({
        name: iconName,
        url: `/freedevtools/png_icons/${categoryName}/${iconName}`,
        description: `Free ${iconName} icon`,
        category: categoryName,
        svgContent: svgContent,
      });
    }
  }

  return iconsByCategory;
}

// Get all icons data for client-side pagination
const allIcons = await getAllIcons();
const allCategories = Object.keys(allIcons).sort();
const totalCategories = allCategories.length;
const totalPages = Math.ceil(totalCategories / ITEMS_PER_PAGE);


const categoryIconMap = {
  "general": "https://cdn-icons-png.flaticon.com/512/5515/5515389.png",
  "animals": "https://cdn-icons-png.flaticon.com/512/1998/1998619.png",
  "nature": "https://cdn-icons-png.flaticon.com/512/1998/1998619.png",
  "technology": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "business": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "social": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
  "shapes": "https://cdn-icons-png.flaticon.com/512/2103/2103633.png",
};
---

<BaseLayout 
  name="PNG Icons"
  path="/freedevtools/png_icons/"
  title="Free PNG Icons - Download & Edit Vector Graphics | Free DevTools"
  description="Download 50000+ of free PNG icons instantly. Edit colors, add backgrounds, and customize vector graphics for your projects. No signup, no registration, just download high quality"
  canonical="https://hexmos.com/freedevtools/png_icons/"
  themeColor="#1e40af"
  showSidebar={false}
  showHeader={true}
>
  <div class="max-w-6xl mx-auto px-2 md:px-6">
    <div class="mb-16 mt-[74px]">
      <AdBanner client:load />
    </div>
    <div class="mb-8">
      <nav class="text-sm text-slate-600 dark:text-slate-400 mb-4">
        <a href="/freedevtools/" class="hover:text-blue-600 dark:hover:text-blue-400">Free DevTools</a>
        <span class="mx-2">/</span>
        <span>PNG Icons</span>
      </nav>
      
      <h1 class="text-3xl font-bold text-slate-900 dark:text-slate-100 mb-4">
        Free PNG Icons
      </h1>
      <p class="text-lg text-slate-600 dark:text-slate-400 mb-6">
        Download 50000+ of free PNG icons instantly. Edit colors, add backgrounds, and customize vector graphics for your projects. No signup, no registration, just download high quality
      </p>
      
      <!-- Search Bar -->
      <div class="max-w-md mb-6">
        <div class="relative">
          <input 
            type="text" 
            id="icon-search"
            placeholder="Search icons by name or category..."
            class="w-full px-4 py-2 pl-10 pr-4 text-sm border border-slate-300 dark:border-slate-600 rounded-lg bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100 placeholder-slate-500 dark:placeholder-slate-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
        </div>
      </div>
      
      <!-- Pagination -->
      <Pagination 
        totalItems={totalCategories}
        itemsPerPage={ITEMS_PER_PAGE}
        currentPage={1}
        totalPages={totalPages}
        itemsLabel="categories"
      />
    </div>

    <div id="icons-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2 md:gap-4 lg:gap-8 mb-8">
      <!-- Icons will be loaded dynamically -->
    </div>
    
    <!-- Bottom Pagination -->
    <BottomPagination 
      totalItems={totalCategories}
      currentPage={1}
      totalPages={totalPages}
      itemsLabel="categories"
    />
    
    <!-- Letter Filter -->
    <div class="mt-8 mb-6">
      <div class="flex flex-wrap gap-2 justify-center">
        <button 
          id="filter-clear"
          class="px-3 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 rounded-md transition-colors border border-slate-300 dark:border-slate-600"
        >
          Clear
        </button>
        <button 
          id="filter-others"
          class="px-3 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 rounded-md transition-colors border border-slate-300 dark:border-slate-600"
        >
          Others
        </button>
        <div id="letter-filters" class="flex flex-wrap gap-2">
          <!-- Letters A-Z will be generated dynamically -->
        </div>
      </div>
    </div>
    
    <!-- Credits Section -->
    <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
      <div class="flex flex-wrap gap-4">
        <a 
          href="/freedevtools/" 
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          ‚Üê  Back to Free DevTools
        </a>
        <a 
          href="/freedevtools/png_icons/credits"
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-slate-50 dark:bg-slate-800 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
        >
          Credits & Acknowledgments
        </a>
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  .icon-preview svg {
    width: 100% !important;
    height: 100% !important;
    max-width: 20px;
    max-height: 20px;
    display: block;
  }
</style>

<script define:vars={{ allIcons, allCategories, totalCategories, totalPages, ITEMS_PER_PAGE, categoryIconMap }}>
  // Category icon mapping
  const categoryIcons = categoryIconMap;
  
  // Pagination state
  let currentPage = 1;
  let itemsPerPage = ITEMS_PER_PAGE;
  let searchQuery = '';
  let letterFilter = '';
  
  // Get current page and items per page from URL
  function getCurrentPageFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const page = parseInt(urlParams.get('page') || '1', 10);
    const items = parseInt(urlParams.get('items') || ITEMS_PER_PAGE.toString(), 10);
    
    // Update items per page if specified in URL
    if (items !== itemsPerPage) {
      itemsPerPage = items;
      const dropdown = document.getElementById('items-per-page');
      if (dropdown) {
        dropdown.value = items.toString();
      }
    }
    
    return Math.max(1, Math.min(page, Math.ceil(totalCategories / itemsPerPage)));
  }
  
  // Update URL without page reload
  function updateURL(page, items = null) {
    const url = new URL(window.location);
    if (page === 1) {
      url.searchParams.delete('page');
    } else {
      url.searchParams.set('page', page.toString());
    }
    
    const currentItems = items || itemsPerPage;
    if (currentItems !== ITEMS_PER_PAGE) {
      url.searchParams.set('items', currentItems.toString());
    } else {
      url.searchParams.delete('items');
    }
    
    window.history.pushState({}, '', url);
  }
  
  // Generate page numbers for pagination
  function getPageNumbers(currentPage, totalPages) {
    const pages = [];
    const maxVisible = 5;
    
    if (totalPages <= maxVisible) {
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else if (currentPage <= 3) {
      for (let i = 1; i <= maxVisible; i++) {
        pages.push(i);
      }
    } else if (currentPage >= totalPages - 2) {
      for (let i = totalPages - maxVisible + 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      for (let i = currentPage - 2; i <= currentPage + 2; i++) {
        pages.push(i);
      }
    }
    
    return pages;
  }
  
  // Filter icons based on search query and letter filter
  function filterIcons(categories, query, letter) {
    let filtered = categories;
    
    // Apply search filter
    if (query.trim()) {
      const searchLower = query.toLowerCase();
      const searchFiltered = {};
      
      Object.entries(categories).forEach(([category, icons]) => {
        const matchingIcons = icons.filter(icon => 
          icon.name.toLowerCase().includes(searchLower) ||
          icon.description?.toLowerCase().includes(searchLower) ||
          category.toLowerCase().includes(searchLower)
        );
        
        if (matchingIcons.length > 0) {
          searchFiltered[category] = matchingIcons;
        }
      });
      
      filtered = searchFiltered;
    }
    
    // Apply letter filter
    if (letter) {
      const letterFiltered = {};
      
      Object.entries(filtered).forEach(([category, icons]) => {
        const firstChar = category.charAt(0).toLowerCase();
        
        if (letter === 'others') {
          // Show categories that start with numbers or symbols
          if (!/[a-z]/.test(firstChar)) {
            letterFiltered[category] = icons;
          }
        } else {
          // Show categories that start with the selected letter
          if (firstChar === letter.toLowerCase()) {
            letterFiltered[category] = icons;
          }
        }
      });
      
      filtered = letterFiltered;
    }
    
    return filtered;
  }
  
  // Render icon card
  function renderIconCard(icon) {
    return `
      <div class="bg-transparent rounded-md p-2 cursor-pointer icon-card hover:bg-slate-100 dark:hover:bg-slate-700 border border-transparent hover:border-slate-300 dark:hover:border-slate-600 transition-all duration-200" data-icon-name="${icon.name}" data-icon-url="${icon.url}">
        <div class="flex flex-col items-center text-center">
          <div class="w-6 h-6 flex items-center justify-center">
            <div class="w-6 h-6 text-slate-600 dark:text-slate-400 icon-preview" style="display: flex; align-items: center; justify-content: center;">
              ${icon.svgContent}
            </div>
          </div>
        </div>
      </div>
    `;
  }
  
  // Render category card
  function renderCategoryCard(category, categoryIcons) {
    const iconsHtml = categoryIcons.slice(0, 6).map(icon => 
      `<div class="w-10 h-10 flex items-center justify-center">
        <div class="w-8 h-8 text-slate-600 dark:text-slate-400 icon-preview" style="display: flex; align-items: center; justify-content: center;">
          ${icon.svgContent}
        </div>
      </div>`
    ).join('');
    
    return `
      <a href="/freedevtools/png_icons/${category}" class="block">
        <div class="bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-700 rounded-xl p-6 shadow-sm hover:shadow-md transition-all duration-200">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100 capitalize">
              ${category.replace('-', ' ')}
            </h3>
            <span class="text-sm text-slate-500 dark:text-slate-400 font-medium">
              ${categoryIcons.length} ICONS
            </span>
          </div>
          
          <div class="grid grid-cols-3 gap-3">
            ${iconsHtml}
          </div>
        </div>
      </a>
    `;
  }
  
  // Render pagination
  function renderPagination() {
    const filteredIcons = filterIcons(allIcons, searchQuery, letterFilter);
    const filteredCategories = Object.keys(filteredIcons).sort();
    const totalPages = Math.ceil(filteredCategories.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const paginatedCategories = filteredCategories.slice(startIndex, endIndex);
    
    // Update pagination info
    document.getElementById('pagination-info').textContent = 
      `Showing ${paginatedCategories.length} of ${filteredCategories.length} categories (Page ${currentPage} of ${totalPages})`;
    
    document.getElementById('page-info').textContent = `${currentPage} / ${totalPages}`;
    document.getElementById('bottom-page-info').textContent = 
      `Page ${currentPage} of ${totalPages} ‚Ä¢ ${filteredCategories.length} total categories`;
    
    // Update button states
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const bottomPrevBtn = document.getElementById('bottom-prev-btn');
    const bottomNextBtn = document.getElementById('bottom-next-btn');
    
    const hasPrev = currentPage > 1;
    const hasNext = currentPage < totalPages;
    
    [prevBtn, bottomPrevBtn].forEach(btn => {
      if (btn) {
        btn.disabled = !hasPrev;
      }
    });
    
    [nextBtn, bottomNextBtn].forEach(btn => {
      if (btn) {
        btn.disabled = !hasNext;
      }
    });
    
    // Render categories
    const iconsGrid = document.getElementById('icons-grid');
    iconsGrid.innerHTML = paginatedCategories.map(category => 
      renderCategoryCard(category, filteredIcons[category])
    ).join('');
    
    // Render page numbers
    const pageNumbers = getPageNumbers(currentPage, totalPages);
    const pageNumbersContainer = document.getElementById('page-numbers');
    pageNumbersContainer.innerHTML = pageNumbers.map(pageNum => {
      const isCurrentPage = pageNum === currentPage;
      const buttonClass = isCurrentPage 
        ? 'bg-blue-600 text-white' 
        : 'text-slate-700 dark:text-slate-300 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-600';
      
      return `<button data-page="${pageNum}" class="page-number-btn inline-flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors ${buttonClass}">${pageNum}</button>`;
    }).join('');
    
    // Show bottom pagination if there are multiple pages
    const bottomPagination = document.getElementById('bottom-pagination');
    bottomPagination.style.display = totalPages > 1 ? 'flex' : 'none';
    
    // Update letter filter buttons
    updateLetterFilters(filteredCategories);
  }
  
  // Generate and update letter filter buttons
  function updateLetterFilters(categories) {
    const letterFiltersContainer = document.getElementById('letter-filters');
    if (!letterFiltersContainer) return;
    
    // Count categories for each letter
    const letterCounts = {};
    categories.forEach(category => {
      const firstChar = category.charAt(0).toLowerCase();
      if (/[a-z]/.test(firstChar)) {
        letterCounts[firstChar] = (letterCounts[firstChar] || 0) + 1;
      } else {
        letterCounts['others'] = (letterCounts['others'] || 0) + 1;
      }
    });
    
    // Generate A-Z buttons
    const letters = 'abcdefghijklmnopqrstuvwxyz'.split('');
    const letterButtons = letters.map(letter => {
      const count = letterCounts[letter] || 0;
      const isActive = letterFilter === letter;
      const buttonClass = isActive 
        ? 'px-3 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors border border-blue-600'
        : 'px-3 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 rounded-md transition-colors border border-slate-300 dark:border-slate-600';
      
      return `<button class="letter-filter-btn ${buttonClass}" data-letter="${letter}" ${count === 0 ? 'disabled' : ''}>
        ${letter.toUpperCase()}${count > 0 ? ` (${count})` : ''}
      </button>`;
    }).join('');
    
    letterFiltersContainer.innerHTML = letterButtons;
    
    // Update Others button
    const othersBtn = document.getElementById('filter-others');
    if (othersBtn) {
      const othersCount = letterCounts['others'] || 0;
      const isActive = letterFilter === 'others';
      othersBtn.className = isActive 
        ? 'px-3 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors border border-blue-600'
        : 'px-3 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 rounded-md transition-colors border border-slate-300 dark:border-slate-600';
      othersBtn.textContent = `Others${othersCount > 0 ? ` (${othersCount})` : ''}`;
      othersBtn.disabled = othersCount === 0;
    }
    
    // Update Clear button
    const clearBtn = document.getElementById('filter-clear');
    if (clearBtn) {
      const isActive = letterFilter === '';
      clearBtn.className = isActive 
        ? 'px-3 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors border border-blue-600'
        : 'px-3 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 rounded-md transition-colors border border-slate-300 dark:border-slate-600';
    }
  }
  
  // Navigate to page
  function goToPage(page) {
    const filteredIcons = filterIcons(allIcons, searchQuery, letterFilter);
    const filteredCategories = Object.keys(filteredIcons).sort();
    const totalPages = Math.ceil(filteredCategories.length / itemsPerPage);
    
    if (page < 1 || page > totalPages || page === currentPage) {
      return;
    }
    
    currentPage = page;
    updateURL(page);
    renderPagination();
    
    // Scroll to top of page
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }
  
  // Handle items per page change
  function handleItemsPerPageChange(newItemsPerPage) {
    const filteredIcons = filterIcons(allIcons, searchQuery, letterFilter);
    const filteredCategories = Object.keys(filteredIcons).sort();
    const newTotalPages = Math.ceil(filteredCategories.length / newItemsPerPage);
    const newCurrentPage = Math.min(currentPage, newTotalPages);
    
    itemsPerPage = newItemsPerPage;
    currentPage = newCurrentPage;
    
    updateURL(currentPage, itemsPerPage);
    renderPagination();
    
    // Scroll to top of page
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }
  
  // Handle search
  function handleSearch(query) {
    searchQuery = query;
    currentPage = 1;
    renderPagination();
  }
  
  // Handle letter filter
  function handleLetterFilter(letter) {
    letterFilter = letter;
    currentPage = 1;
    renderPagination();
  }
  
  // Event listeners - use event delegation to avoid re-attaching listeners
  function setupEventListeners() {
    // Use event delegation on the document to handle all clicks
    document.addEventListener('click', (e) => {
      // Handle previous buttons
      if (e.target.id === 'prev-btn' || e.target.id === 'bottom-prev-btn') {
        e.preventDefault();
        goToPage(currentPage - 1);
        return;
      }
      
      // Handle next buttons
      if (e.target.id === 'next-btn' || e.target.id === 'bottom-next-btn') {
        e.preventDefault();
        goToPage(currentPage + 1);
        return;
      }
      
      // Handle page number buttons
      if (e.target.classList.contains('page-number-btn')) {
        e.preventDefault();
        const page = parseInt(e.target.dataset.page, 10);
        goToPage(page);
        return;
      }
      
      // Handle icon card clicks
      if (e.target.closest('.icon-card')) {
        e.preventDefault();
        const iconCard = e.target.closest('.icon-card');
        const iconUrl = iconCard.dataset.iconUrl;
        window.location.href = iconUrl;
        return;
      }
      
      // Handle letter filter clicks
      if (e.target.classList.contains('letter-filter-btn')) {
        e.preventDefault();
        const letter = e.target.dataset.letter;
        handleLetterFilter(letter);
        return;
      }
      
      // Handle Others filter click
      if (e.target.id === 'filter-others') {
        e.preventDefault();
        handleLetterFilter('others');
        return;
      }
      
      // Handle Clear filter click
      if (e.target.id === 'filter-clear') {
        e.preventDefault();
        handleLetterFilter('');
        return;
      }
    });
    
    // Handle items per page dropdown change
    document.addEventListener('change', (e) => {
      if (e.target.id === 'items-per-page') {
        const newItemsPerPage = parseInt(e.target.value, 10);
        handleItemsPerPageChange(newItemsPerPage);
      }
    });
    
    // Handle search input
    document.addEventListener('input', (e) => {
      if (e.target.id === 'icon-search') {
        handleSearch(e.target.value);
      }
    });
  }
  
  // Handle browser back/forward (only add once)
  if (!window.paginationInitialized) {
    window.addEventListener('popstate', () => {
      currentPage = getCurrentPageFromURL();
      renderPagination();
    });
    window.paginationInitialized = true;
  }
  
  // Initialize pagination
  function init() {
    currentPage = getCurrentPageFromURL();
    renderPagination();
  }
  
  // Set up event listeners only once
  if (!window.paginationEventListenersSet) {
    setupEventListeners();
    window.paginationEventListenersSet = true;
  }
  
  // Start when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    // Small delay to ensure DOM is fully ready
    setTimeout(init, 100);
  }
</script>
