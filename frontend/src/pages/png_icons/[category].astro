---
import BaseLayout from '../../layouts/BaseLayout.astro';
import AdBanner from '../../components/banner/AdBanner.astro';
import CreditsButton from '../../components/buttons/CreditsButton';
import ToolContainer from '../../components/tool/ToolContainer';
import ToolHead from '../../components/tool/ToolHead';
import { getCollection } from 'astro:content';
import { Tooltips } from 'astro-tooltips';

export async function getStaticPaths() {
  const pngIconsEntries = await getCollection('pngIconsMetadata');
  const iconsData = pngIconsEntries[0]?.data;

  if (!iconsData) {
    throw new Error('PNG icons metadata not found');
  }

  const categories = Object.values(iconsData.clusters).map(
    (cluster: any) => cluster.name
  );

  return categories.map((category) => ({
    params: { category },
    props: { category },
  }));
}

const { category } = Astro.params;

async function getCategoryIcons() {
  const pngIconsEntries = await getCollection('pngIconsMetadata');
  const iconsData = pngIconsEntries[0]?.data;

  if (!iconsData) {
    return [];
  }

  // Find the cluster by name
  const cluster = Object.values(iconsData.clusters).find(
    (c: any) => c.name === category
  ) as any;
  if (!cluster) {
    return [];
  }

  const icons = [];

  // Process each file object in the cluster - NO PNG loading at build time
  for (const fileObj of cluster.fileNames) {
    const iconName =
      typeof fileObj === 'string'
        ? fileObj.replace('.svg', '')
        : fileObj.fileName?.replace('.svg', '') || '';

    icons.push({
      name: iconName,
      description:
        typeof fileObj === 'object'
          ? fileObj.description || `Free ${iconName} icon`
          : `Free ${iconName} icon`,
      category: category,
      tags:
        typeof fileObj === 'object'
          ? fileObj.tags || cluster.keywords || []
          : cluster.keywords || [],
      author:
        typeof fileObj === 'object'
          ? fileObj.author || 'Free DevTools'
          : 'Free DevTools',
      license: typeof fileObj === 'object' ? fileObj.license || 'MIT' : 'MIT',
      url: `/freedevtools/png_icons/${category}/${iconName}/`,
    });
  }

  return icons;
}

const categoryIcons = await getCategoryIcons();
const totalIcons = categoryIcons.length;

const categoryIconMap = {
  general: 'https://cdn-icons-png.flaticon.com/512/5515/5515389.png',
  animals: 'https://cdn-icons-png.flaticon.com/512/1998/1998619.png',
  nature: 'https://cdn-icons-png.flaticon.com/512/1998/1998619.png',
  technology: 'https://cdn-icons-png.flaticon.com/512/2103/2103633.png',
  business: 'https://cdn-icons-png.flaticon.com/512/2103/2103633.png',
  social: 'https://cdn-icons-png.flaticon.com/512/2103/2103633.png',
  shapes: 'https://cdn-icons-png.flaticon.com/512/2103/2103633.png',
};

const categoryIcon =
  categoryIconMap[category as keyof typeof categoryIconMap] ||
  categoryIconMap.general;

// Breadcrumb data
const breadcrumbItems = [
  { label: 'Free DevTools', href: '/freedevtools/' },
  { label: 'PNG Icons', href: '/freedevtools/png_icons/' },
  { label: category },
];
---

<BaseLayout
  name={`${category} PNG Icons`}
  path={`/freedevtools/png_icons/${category}`}
  title={`${category} PNG Icons - Free Download & Edit | Online Free DevTools by Hexmos`}
  description={`Download free ${category} PNG icons instantly. Edit colors, add backgrounds, and customize vector graphics for your projects. ${totalIcons} icons available.`}
  canonical={`https://hexmos.com/freedevtools/png_icons/${category}/`}
  showHeader={true}
  totalItems={totalIcons}
  category={category}
  partOf="PNG Icons"
  partOfUrl="https://hexmos.com/freedevtools/png_icons/"
  keywords={[category, 'png icons', 'vector graphics', 'free icons']}
>
  <Tooltips delay={[500, 100]} />

  <ToolContainer>
    <div class="mb-16 mt-[74px]">
      <AdBanner />
    </div>
    <ToolHead
      name={`${category} PNG Graphics Collection`}
      description={`Browse ${totalIcons} ready-to-use ${category} images, instantly downloadable without restrictions`}
      breadcrumbItems={breadcrumbItems}
    />
  </ToolContainer>
  <div class="min-h-[200px]">
    <div
      id="icons-grid"
      class="grid grid-cols-2 mt-3 md:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-6 mb-8"
    >
      <!-- Icons will be loaded dynamically -->
    </div>
  </div>
  <!-- Credits Section -->
  <div class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700">
    <div class="flex flex-wrap gap-4">
      <a
        href="/freedevtools/png_icons/"
        class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
      >
        ‚Üê Back to PNG Icons
      </a>
      <CreditsButton href="/freedevtools/png_icons/credits/" />
    </div>
  </div>
</BaseLayout>

<style>
  .icon-preview svg {
    width: 100% !important;
    height: 100% !important;
    max-width: 104px;
    max-height: 104px;
    display: block;
    object-fit: contain;
  }
</style>

<script define:vars={{ categoryIcons, totalIcons, category }}>
  let searchQuery = '';

  // Filter icons based on search query
  function filterIcons(icons, query) {
    if (!query.trim()) return icons;

    const searchLower = query.toLowerCase();
    return icons.filter(
      (icon) =>
        icon.name.toLowerCase().includes(searchLower) ||
        icon.description?.toLowerCase().includes(searchLower) ||
        (icon.tags &&
          icon.tags.some((tag) => tag.toLowerCase().includes(searchLower)))
    );
  }

  // Render icon card
  function renderIconCard(icon) {
    const iconName = icon.name
      .replace(/_/g, ' ')
      .replace(/\b\w/g, (l) => l.toUpperCase());

    return `
      <a href="${icon.url}" 
        title="${iconName}"
        class="bg-white rounded-lg p-4 cursor-pointer hover:bg-slate-100 border border-white hover:border-slate-300 transition-all duration-200 shadow-sm hover:shadow-md"
        <div class="flex flex-col items-center text-center">
          <div class="w-24 h-24 flex items-center justify-center">
            <div class="w-24 h-24 text-slate-600 icon-preview" style="display: flex; align-items: center; justify-content: center; overflow: hidden;">
              <img 
                src="/freedevtools/svg_icons/${icon.category}/${icon.name}.svg" 
                alt="${iconName} icon"
                class="w-20 h-20 object-contain"
                loading="lazy"
                onerror="this.style.display='none'; this.nextElementSibling.style.display='block';"
              />
              <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="text-slate-400" style="display:none;">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
            </div>
          </div>
        </div>
      </a>
    `;
  }

  // Render all icons
  function renderIcons() {
    const filteredIcons = filterIcons(categoryIcons, searchQuery);

    // Render icons
    const iconsGrid = document.getElementById('icons-grid');
    iconsGrid.innerHTML = filteredIcons
      .map((icon) => renderIconCard(icon))
      .join('');
  }

  // Handle search
  function handleSearch(query) {
    searchQuery = query;
    renderIcons();
  }

  // Event listeners
  function setupEventListeners() {
    // Handle icon card clicks
    document.addEventListener('click', (e) => {
      if (e.target.closest('.icon-card')) {
        e.preventDefault();
        const iconCard = e.target.closest('.icon-card');
        const iconUrl = iconCard.dataset.iconUrl;
        window.location.href = iconUrl;
        return;
      }
    });

    // Handle search input
    document.addEventListener('input', (e) => {
      if (e.target.id === 'icon-search') {
        handleSearch(e.target.value);
      }
    });
  }

  // Initialize after Astro hydration is complete
  function init() {
    renderIcons();
  }

  function initializeAfterHydration() {
    console.log(
      'üîç DEBUG: Initializing category page after Astro hydration...'
    );

    // Wait a bit more to ensure Astro hydration is complete
    setTimeout(() => {
      console.log(
        'üîç DEBUG: Delayed initialization after hydration for category page'
      );
      init();
    }, 100);
  }

  // Set up event listeners only once
  if (!window.categoryEventListenersSet) {
    setupEventListeners();
    window.categoryEventListenersSet = true;
  }

  // Wait for both DOM and window load to ensure Astro hydration is complete
  if (document.readyState === 'loading') {
    console.log(
      'üîç DEBUG: Category page DOM still loading, adding load listener'
    );
    window.addEventListener('load', initializeAfterHydration);
  } else {
    console.log(
      'üîç DEBUG: Category page DOM already ready, calling delayed initialization'
    );
    initializeAfterHydration();
  }
</script>
