---
import AdBanner from '../../../components/banner/AdBanner';
import CopyPngButton from '../../../components/buttons/CopyPngButton.tsx';
import CopySvgButton from '../../../components/buttons/CopySvgButton.tsx';
import DownloadPngButton from '../../../components/buttons/DownloadPngButton.tsx';
import DownloadSvgButton from '../../../components/buttons/DownloadSvgButton.tsx';
import CreditsButton from '../../../components/buttons/CreditsButton';
import ToastProvider from '../../../components/ToastProvider';
import BaseLayout from '../../../layouts/BaseLayout.astro';
// SVG processing moved to client-side for better performance


export async function getStaticPaths() {
  // Load the cluster_png.json file to get all icons
  const fs = await import('fs/promises');
  const path = await import('path');
  
  const clustorPath = path.join('./src/pages/png_icons', 'cluster_png.json');
  const clustorData = JSON.parse(await fs.readFile(clustorPath, 'utf-8'));
  
  const paths = [];
  
  // Process each cluster (category) - NO PNG loading at build time
  for (const [clusterKey, clusterData] of Object.entries(clustorData.clusters)) {
    const cluster = clusterData as any;
    const categoryName = cluster.name; // Use the name from the cluster data
    
    // Process each file object in the cluster - NO PNG loading at build time
    for (const fileObj of cluster.fileNames) {
      const iconName = fileObj.fileName.replace(".svg", "");
      paths.push({
        params: { category: categoryName, icon: iconName },
        props: {
          iconData: {
            name: iconName,
            description: fileObj.description || `Free ${iconName} icon`,
            category: categoryName,
            svgContent: '', // Will be loaded client-side
            originalSvgContent: '', // Will be loaded client-side
            tags: fileObj.tags || cluster.keywords || [],
            author: fileObj.author || 'Free DevTools by Hexmos',
            license: fileObj.license || 'MIT',
            usecases: fileObj.usecases || '',
            synonyms: fileObj.synonyms || [],
            industry: fileObj.industry || '',
            emotional_cues: fileObj.emotional_cues || ''
          }
        }
      });
    }
  }
  
  console.log('🔍 DEBUG: getStaticPaths generated', paths.length, 'paths');
  console.log('🔍 DEBUG: First few paths:', paths.slice(0, 3).map(p => p.params.icon));
  
  return paths;
}


const { category, icon } = Astro.params;
const { iconData } = Astro.props as {
  iconData: {
    name: string;
    category: string;
    svgContent: string;
    originalSvgContent: string;
    tags: string[];
    author: string;
    license: string;
    description: string;
    usecases: string;
    synonyms: string[];
    industry: string;
    emotional_cues: string;
  };
};


// Generate SEO-friendly title and description
const seoTitle = `Free ${iconData.name} PNG Icon Download | Online Free DevTools by Hexmos`;
const seoDescription = `${iconData.name} PNG graphic from the ${iconData.category} collection. Crisp image asset, download freely with no sign-ups or limits.`;


// Generate better alt text for the icon
const altText = `${iconData.name} ${iconData.category} icon - Free PNG download`;


const canonical = `https://hexmos.com/freedevtools/png_icons/${category}/${icon}/`;


// Extract png dimensions for structured data (will be updated client-side)
const svgDimensions = { width: 128, height: 128, viewBox: "0 0 128 128", aspectRatio: 1 };


// Calculate optimal display size (scale to fit ~280px while maintaining aspect ratio)
const maxDisplaySize = 280;


// Extract viewBox dimensions from the original png
const viewBoxMatch = iconData.originalSvgContent.match(/viewBox="([^"]*)"/);
let originalWidth, originalHeight;


if (viewBoxMatch) {
  const viewBox = viewBoxMatch[1].split(/\s+/);
  originalWidth = parseFloat(viewBox[2]) || 48;
  originalHeight = parseFloat(viewBox[3]) || 48;
} else {
  // Fallback to extracted dimensions
  originalWidth = svgDimensions.width || 48;
  originalHeight = svgDimensions.height || 48;
}


const aspectRatio = originalWidth / originalHeight;


// Simple scaling: scale the larger dimension to maxDisplaySize
let displayWidth, displayHeight;


if (originalWidth >= originalHeight) {
  // Landscape or square: scale by width
  displayWidth = maxDisplaySize;
  displayHeight = maxDisplaySize / aspectRatio;
} else {
  // Portrait: scale by height
  displayHeight = maxDisplaySize;
  displayWidth = maxDisplaySize * aspectRatio;
}


// Generate thumbnail URL (points to the actual png image in public folder)
// For brand-oauth icon, use PNG thumbnail for better Google search preview
const thumbnailUrl = icon === 'brand-oauth' && category === 'factory' 
  ? `https://hexmos.com/freedevtools/emoji_data/abacus/abacus_3d.png`
  : `https://hexmos.com/freedevtools/svg_icons/${category}/${icon}.svg`;


// Set encoding format based on the same condition
const encodingFormat = icon === 'brand-oauth' && category === 'factory' 
  ? "image/png"
  : "image/svg+xml";
 
---

<BaseLayout 
  name={iconData.name}
  path={`/freedevtools/png_icons/${category}/${icon}/`}
  title={seoTitle}
  description={seoDescription}
  canonical={canonical}
  themeColor="#1e40af"
  imgWidth={svgDimensions.width}
  imgHeight={svgDimensions.height}
  thumbnailUrl={thumbnailUrl}
  ogImage={thumbnailUrl}
  twitterImage={thumbnailUrl}
  showSidebar={false}
  showHeader={true}
  encodingFormat={encodingFormat}
  partOf={`${iconData.category} Icons`}
  partOfUrl={`https://hexmos.com/freedevtools/png_icons/${category}/`}
  keywords={iconData.tags}
  features={iconData.tags}
  category={iconData.category}
  iconName={iconData.name}
  iconCategory={iconData.category}
  iconTags={iconData.tags}
  author={iconData.author}
  license={iconData.license}
>
<ToastProvider client:load>
  <div class="max-w-6xl mx-auto px-4 md:px-6 py-6">

    {/* Ad Banner */}
    <div class="mb-12 mt-8 md:mt-16">
      <AdBanner />
    </div>

    {/* Breadcrumb Navigation */}
    <nav class="text-sm mb-6 flex flex-wrap items-center gap-2">
      <a href="/freedevtools/png_icons/credits/" class="text-blue-600 dark:text-blue-400 hover:font-semibold">Credits</a>
      <span>/</span>
      <a href="/freedevtools/png_icons/" class="text-blue-600 dark:text-blue-400 hover:font-semibold">png Icons</a>
      <span>/</span>
      <a href={`/freedevtools/png_icons/${category}/`} class="text-blue-600 dark:text-blue-400 hover:font-semibold">{category}</a>
      <span>/</span>
      <span class="text-slate-600 dark:text-slate-400">{iconData.name}</span>
    </nav>

    {/* Title & Description */}
    <header class="mb-10">
      <h1 class="text-3xl md:text-4xl font-semibold mb-3 text-black dark:text-slate-200">
        {iconData.name} PNG Icon
      </h1>
      <p class="text-sm md:text-base text-slate-600 dark:text-slate-400 leading-relaxed">
        {iconData.description
          .replace(/SVG/g, "PNG")
          .replace(/\bAn PNG\b/g, "A PNG")}
      </p>
    </header>

    {/* Main Section: Icon + Buttons (left) + Metadata (right) */}
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-10">

      {/* Left Block: Icon + Buttons */}
      <div class="flex flex-col items-start space-y-4">

      {/* Icon Canvas (Wider + Taller) */}
      <div class="flex items-center justify-center bg-gray-100 rounded-xl p-4 shadow-md w-full max-w-md h-[400px]">
        <picture>
          <source type="image/svg+xml" srcSet={`/freedevtools/svg_icons/${category}/${icon}.svg`} />
          <img
            src={`/freedevtools/svg_icons/${category}/${icon}.svg`}
            alt={altText}
            style={{
              width: "280px",       // width adjusts automatically
              height: "280px",      // fill container height
              maxWidth: "100%",    // don't overflow container width
              objectFit: "contain",
              display: "block"
            }}
            loading="eager"
            decoding="async"
            title={`${iconData.name} ${iconData.category} icon`}
          />
        </picture>
      </div>


        {/* Copy & Download Buttons */}
        <div class="grid grid-cols-2 gap-2 w-full max-w-md">
          <CopyPngButton iconData={iconData} client:load />
          <CopySvgButton iconData={iconData} client:load />
          <DownloadPngButton iconData={iconData} client:load />
          <DownloadSvgButton iconData={iconData} client:load />
        </div>

      </div>

      {/* Right Block: Metadata */}
      <div class="flex flex-col justify-start space-y-6">

        {/* SEO Description */}
        <p class="text-lg text-slate-600 dark:text-slate-400">{seoDescription}</p>

        {/* Sections */}
        {[
          { title: "Where It’s Used", content: iconData.usecases },
          { 
            title: "Similar Phrases", 
            content: iconData.synonyms.length ? (
              <div class="flex flex-wrap gap-2">
                {iconData.synonyms.map((synonym) => (
                  <span key={synonym} class="inline-block bg-gray-200 dark:bg-slate-700 text-sm text-slate-800 dark:text-slate-200 px-2 py-1 rounded-full select-none">
                    {synonym}
                  </span>
                ))}
              </div>
            ) : "No synonyms available." 
          },
          { title: "Relevant Sectors", content: iconData.industry },
          { title: "Emotional Tone", content: iconData.emotional_cues }
        ].map((section) => (
          <div key={section.title}>
            <h2 class="text-lg font-semibold mb-2 text-black dark:text-slate-300">{section.title}</h2>
            <div class="text-slate-700 dark:text-slate-400 leading-relaxed">{section.content}</div>
          </div>
        ))}

        {/* Tags */}
        <div>
          <h2 class="text-xl font-semibold mb-3 text-black dark:text-slate-300">Tags</h2>
          {iconData.tags.length > 0 ? (
            <div class="flex flex-wrap gap-2">
              {iconData.tags.map((tag) => (
                <span key={tag} class="inline-block bg-blue-100 text-blue-800 rounded-full px-3 py-1 text-sm font-medium select-none cursor-default dark:bg-blue-800 dark:text-blue-100">
                  {tag}
                </span>
              ))}
            </div>
          ) : (
            <p class="text-slate-700 dark:text-slate-400">No tags available.</p>
          )}
        </div>
      </div>
    </div>

    {/* Footer / Navigation */}
    <div class="mt-12 pt-6 border-t border-slate-200 dark:border-slate-700 flex flex-wrap gap-4">
      <a 
        href="/freedevtools/png_icons/" 
        class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
      >
        ← Back to PNG Icons
      </a>
      <CreditsButton href="/freedevtools/png_icons/credits/" />
    </div>
  </div>
</ToastProvider>




</BaseLayout>

<script define:vars={{ iconData, category, icon }}>
  // Load PNG content client-side for better performance
  async function loadSVGContent() {
    try {
      const response = await fetch(`/freedevtools/svg_icons/${category}/${icon}.svg`);
      const svgContent = await response.text();
      
      // Update the image source to use the loaded SVG
      const img = document.querySelector('img[alt*="icon"]');
      if (img) {
        // Create a blob URL for the SVG
        const blob = new Blob([svgContent], { type: 'image/svg+xml' });
        const url = URL.createObjectURL(blob);
        img.src = url;
        
        // Extract dimensions from SVG content
        const parser = new DOMParser();
        const svgDoc = parser.parseFromString(svgContent, 'image/svg+xml');
        const svgElement = svgDoc.querySelector('svg');
        
        if (svgElement) {
          const width = svgElement.getAttribute('width') || '128';
          const height = svgElement.getAttribute('height') || '128';
          const viewBox = svgElement.getAttribute('viewBox') || `0 0 ${width} ${height}`;
          
          // Update image dimensions
          img.width = parseInt(width);
          img.height = parseInt(height);
          
          console.log('🔍 DEBUG: Loaded SVG with dimensions:', width, 'x', height);
        }
      }
    } catch (error) {
      console.warn('Failed to load SVG content:', error);
    }
  }
  
  // Load SVG content after page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadSVGContent);
  } else {
    loadSVGContent();
  }
</script>

<style>
  /* Simple SVG styling */
  .icon-display-container svg {
    max-width: 100%;
    max-height: 100%;
    width: auto;
    height: auto;
  }
</style>
