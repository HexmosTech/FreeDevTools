---
import Header from '../components/Header.tsx';
import Footer from '../components/Footer.tsx';
// import Sidebar from '../components/Sidebar';
import { ThemeProvider } from '../components/theme/ThemeContext.tsx';
import ToastProvider from '../components/ToastProvider.tsx';
import '../styles/global.css';

export interface Props {
  // Basic SEO
  name: string;
  title: string;
  path: string;
  description?: string;
  canonical?: string;
  themeColor?: string;
  keywords?: string[];
  ogImage?: string;
  twitterImage?: string;
  
  // Layout
  showSidebar?: boolean;
  showHeader?: boolean;
  
  // Content metadata
  datePublished?: string;
  dateModified?: string;
  softwareVersion?: string;
  features?: string[];
  author?: string;
  license?: string;
  category?: string;
  
  // Image/Media
  imgWidth?: number;
  imgHeight?: number;
  thumbnailUrl?: string;
  encodingFormat?: string;
  
  // Hierarchical structure
  partOf?: string;
  partOfUrl?: string;
  
  // Schema type override
  pageType?: string;
  
  // Collection/List specific
  totalItems?: number;
  itemsPerPage?: number;
  currentPage?: number;
  
  // Tool specific
  toolType?: string;
  toolCategory?: string;
  
  // Icon specific
  iconName?: string;
  iconCategory?: string;
  iconTags?: string[];
  
  // Emoji specific
  emojiCode?: string;
  emojiCategory?: string;
  
  // Command/Cheatsheet specific
  commandName?: string;
  platform?: string;
  commandCategory?: string;
}

const { 
  // Basic SEO
  name,
  title, 
  description, 
  canonical, 
  themeColor = "#1e40af", 
  keywords = [],
  ogImage = "https://hexmos.com/freedevtools/site-banner.png",
  twitterImage = "https://hexmos.com/freedevtools/site-banner.png",
  
  // Layout
  showHeader = true,
  showSidebar = false,
  
  // Content metadata
  datePublished,
  dateModified,
  softwareVersion = "1.0.0",
  features = [],
  author = "Free DevTools by Hexmos",
  license = "MIT",
  category,
  
  // Image/Media
  imgWidth = 1136,
  imgHeight = 768,
  thumbnailUrl,
  encodingFormat = "text/html",
  
  // Hierarchical structure
  partOf = "Free DevTools",
  partOfUrl = "https://hexmos.com/freedevtools/",
  
  // Schema type override
  pageType: customPageType,
  
  // Collection/List specific
  totalItems,
  itemsPerPage,
  currentPage = 1,
  
  // Tool specific
  toolType,
  toolCategory,
  
  // Icon specific
  iconName,
  iconCategory,
  iconTags = [],
  
  // Emoji specific
  emojiCode,
  emojiCategory,
  
  // Command/Cheatsheet specific
  commandName,
  platform,
  commandCategory,
} = Astro.props;

const currentUrl = canonical || Astro.url.href;
const keywordsString = keywords.length > 0 ? keywords.join(', ') : '';

// Determine page type based on path and props
function determinePageType(path: string, props: any): string {
  if (props.pageType) return props.pageType;
  
  // SVG Icon pages
  if (path.includes('/svg_icons/')) {
    if (path.match(/\/svg_icons\/[^\/]+\/[^\/]+$/)) {
      return 'ImageObject'; // Individual icon page
    } else if (path.match(/\/svg_icons\/[^\/]+$/)) {
      return 'CollectionPage'; // Category page
    } else {
      return 'CollectionPage'; // Main SVG icons page
    }
  }
  
  // Tool pages
  if (path.match(/\/t\/[^\/]+$/) || path.match(/\/t\/[^\/]+\/[^\/]+$/)) {
    return 'SoftwareApplication';
  }
  
  // Cheatsheet pages
  if (path.includes('/c/')) {
    if (path.match(/\/c\/[^\/]+\/[^\/]+$/)) {
      return 'TechArticle'; // Individual cheatsheet
    } else if (path.match(/\/c\/[^\/]+$/)) {
      return 'CollectionPage'; // Category page
    } else {
      return 'CollectionPage'; // Main cheatsheets page
    }
  }
  
  // TLDR pages
  if (path.includes('/tldr/')) {
    if (path.match(/\/tldr\/[^\/]+\/[^\/]+$/)) {
      return 'TechArticle'; // Individual command page
    } else if (path.match(/\/tldr\/[^\/]+$/)) {
      return 'CollectionPage'; // Platform page
    } else {
      return 'CollectionPage'; // Main TLDR page
    }
  }
  
  // Emoji pages
  if (path.includes('/emojis/')) {
    if (path.match(/\/emojis\/[^\/]+$/)) {
      return 'CollectionPage'; // Category page
    } else {
      return 'CollectionPage'; // Main emojis page
    }
  }
  
  // Default
  return 'WebPage';
}

// Generate base schema properties
function getBaseSchema(props: any) {
  const currentDate = new Date().toISOString();
  
  return {
    "@context": "https://schema.org",
    "url": props.canonical || currentUrl,
    "inLanguage": "en",
    "datePublished": props.datePublished || currentDate,
    "dateModified": props.dateModified || currentDate,
    "author": {
      "@type": "Organization",
      "name": props.author || "Free DevTools by Hexmos",
      "url": "https://hexmos.com/freedevtools/"
    },
    "publisher": {
      "@type": "Organization",
      "name": "Free DevTools by Hexmos",
      "url": "https://hexmos.com/freedevtools/"
    },
    "isPartOf": {
      "@type": "Collection",
      "name": props.partOf || "Free DevTools",
      "url": props.partOfUrl || "https://hexmos.com/freedevtools/"
    },
    "license": props.license === "MIT" ? "https://opensource.org/licenses/MIT" : (props.license || "https://opensource.org/licenses/MIT"),
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": props.canonical || currentUrl
    }
  };
}

// Generate specific schema based on page type
function generatePageSpecificSchema(pageType: string, props: any) {
  const baseSchema = getBaseSchema(props);
  
  switch (pageType) {
    case 'ImageObject': // Individual SVG icon
      return {
        ...baseSchema,
        "@type": "ImageObject",
        "name": props.iconName || props.name,
        "description": props.description,
        "contentUrl": props.thumbnailUrl || props.ogImage,
        "thumbnailUrl": props.thumbnailUrl || props.ogImage,
        "image": props.thumbnailUrl || props.ogImage,
        "encodingFormat": props.encodingFormat || "image/svg+xml",
        "width": props.imgWidth,
        "height": props.imgHeight,
        "keywords": [...(props.keywords || []), ...(props.iconTags || [])].join(", "),
        "about": {
          "@type": "Thing",
          "name": props.iconCategory || props.category
        },
        "offers": {
          "@type": "Offer",
          "price": "0",
          "priceCurrency": "USD",
          "availability": "https://schema.org/InStock"
        },
        "license": props.license === "MIT" ? "https://opensource.org/licenses/MIT" : (props.license || "https://opensource.org/licenses/MIT"),
        "creator": {
          "@type": "Organization",
          "name": props.author || "Free DevTools by Hexmos",
          "url": "https://hexmos.com/freedevtools/"
        },
        "copyrightHolder": {
          "@type": "Organization", 
          "name": props.author || "Free DevTools by Hexmos"
        },
        "copyrightYear": new Date().getFullYear(),
        "isAccessibleForFree": true,
        "usageInfo": {
          "@type": "CreativeWork",
          "text": "Free to use under MIT license. No attribution required but appreciated."
        }
      };
      
    case 'SoftwareApplication': // Tool page
      return {
        ...baseSchema,
        "@type": "SoftwareApplication",
        "name": props.name,
        "description": props.description,
        "applicationCategory": "DeveloperTool",
        "operatingSystem": "Any",
        "browserRequirements": "Requires JavaScript. Requires HTML5.",
        "softwareVersion": props.softwareVersion,
        "featureList": props.features || [],
        "keywords": props.keywords?.join(", ") || "",
        "screenshot": props.ogImage,
        "offers": {
          "@type": "Offer",
          "price": "0",
          "priceCurrency": "USD",
          "availability": "https://schema.org/InStock"
        }
      };
      
    case 'TechArticle': // Command/Cheatsheet page
      return {
        ...baseSchema,
        "@type": "TechArticle",
        "headline": props.name,
        "description": props.description,
        "articleBody": props.description,
        "keywords": props.keywords?.join(", ") || "",
        "about": {
          "@type": "Thing",
          "name": props.commandName || props.name
        },
        "mentions": props.platform ? {
          "@type": "Thing",
          "name": props.platform
        } : undefined,
        "articleSection": props.commandCategory || props.category
      };
      
    case 'CollectionPage': // Category/List pages
      const collectionSchema: any = {
        ...baseSchema,
        "@type": "CollectionPage",
        "name": props.name,
        "description": props.description,
        "keywords": props.keywords?.join(", ") || "",
        "mainEntity": {
          "@type": "ItemList",
          "numberOfItems": props.totalItems || 0,
          "itemListElement": [] // This would be populated with actual items
        }
      };
      
      // Add pagination info if available
      if (props.totalItems && props.itemsPerPage) {
        collectionSchema.mainEntity.numberOfItems = props.totalItems;
        collectionSchema.mainEntity.numberOfPages = Math.ceil(props.totalItems / props.itemsPerPage);
        collectionSchema.mainEntity.currentPage = props.currentPage;
      }
      
      return collectionSchema;
      
    default: // WebPage
      return {
        ...baseSchema,
        "@type": "WebPage",
        "name": props.name,
        "description": props.description,
        "keywords": props.keywords?.join(", ") || ""
      };
  }
}

// Generate the final schema
const detectedPageType = determinePageType(Astro.props.path, Astro.props);
const schema = generatePageSpecificSchema(detectedPageType, Astro.props);

// Debug: Print the final schema
console.log('üîç JSON-LD Schema for:', Astro.props.path);
console.log('üìÑ Page Type:', detectedPageType);
console.log('üìã Generated Schema:', JSON.stringify(schema, null, 2));

const GA_MEASUREMENT_ID = 'G-WXSDF484XZ';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Basic SEO Meta Tags -->
    <title>{title}</title>
    {description && <meta name="description" content={description} />}
    {keywordsString && <meta name="keywords" content={keywordsString} />}
    <meta name="theme-color" content={themeColor} />
    {canonical && <link rel="canonical" href={canonical} />}
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    {description && <meta property="og:description" content={description} />}
    <meta property="og:url" content={currentUrl} />
    <meta property="og:image" content={thumbnailUrl || ogImage} />
    <meta property="og:site_name" content="FreeDev Tools" />
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    {description && <meta name="twitter:description" content={description} />}
    <meta name="twitter:image" content={thumbnailUrl || twitterImage} />
    
    <!-- JSON-LD Structured Data -->
    {schema && (
      <script type="application/ld+json" set:html={JSON.stringify(schema)} />
    )}
    
    <!-- Additional SEO Meta Tags -->
    <meta name="robots" content="index, follow" />
    <meta name="author" content="FreeDev Tools" />
    <meta name="generator" content="Astro" />
    
    <!-- Image-specific meta tags for better SEO -->
    {thumbnailUrl && (
      <>
        <meta name="image" content={thumbnailUrl} />
        <meta property="og:image:width" content={imgWidth.toString()} />
        <meta property="og:image:height" content={imgHeight.toString()} />
        <meta property="og:image:type" content={encodingFormat} />
        <meta property="og:image:alt" content={name} />
        <meta name="twitter:image:alt" content={name} />
      </>
    )}
    
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="/freedevtools/t/favicon.webp" />
    
    <!-- Fonts -->
    <!-- Preconnect to font origins -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>

<!-- Preload font CSS with media print and onload trick -->
<link rel="preload" as="style" href="https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400..800;1,400..800&display=swap" crossorigin="anonymous">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400..800;1,400..800&display=swap" media="print" onload="this.media='all'">

<link rel="preload" as="style" href="https://fonts.googleapis.com/css2?family=Cal+Sans&family=DM+Serif+Text:ital@0;1&family=Lora:ital,wght@0,400..700;1,400..700&display=swap" crossorigin="anonymous">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Cal+Sans&family=DM+Serif+Text:ital@0;1&family=Lora:ital,wght@0,400..700;1,400..700&display=swap" media="print" onload="this.media='all'">

    <!-- Google Analytics-->
   
      <>
        <script async src={`https://www.googletagmanager.com/gtag/js?id=${GA_MEASUREMENT_ID}`}></script>
        <script define:vars={{ GA_MEASUREMENT_ID }}>
          const isLocalhost = 
            window.location.hostname === 'localhost' || 
            window.location.hostname === '127.0.0.1';
                     
          if (!isLocalhost) {
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', GA_MEASUREMENT_ID);
          } else {
            console.log('Google Analytics disabled on localhost/development environment');
          }
        </script>
      </>
    
    
    <!-- Theme initialization script -->
    <script>
      (function() {
        const theme = localStorage.getItem('theme') || 'dark';
        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      })();
    </script>
  </head>
  <body class="m-0 p-0 font-sans bg-slate-50 text-slate-800 leading-relaxed dark:bg-slate-900 dark:text-slate-200 min-h-screen flex flex-col">
    <div class="flex flex-1">
      {showHeader && (
        <ThemeProvider client:load>
          <Header client:load />
        </ThemeProvider>
      )}
      
      <main class="flex-1 overflow-auto bg-background" class:list={[
        showHeader ? "pt-16 md:pt-16" : "pt-0 lg:pt-0"
      ]}>
        <ThemeProvider client:load>
          <ToastProvider client:load>
            <slot />
          </ToastProvider>
        </ThemeProvider>
      </main>
    </div>
    
    <!-- Footer -->
    <ThemeProvider client:load>
      <Footer client:load />
    </ThemeProvider>
  </body>
</html>