{
  "category": "translation-services",
  "categoryDisplay": "Translation Services",
  "description": "Translation tools and services to enable AI assistants to translate content between different languages.",
  "totalRepositories": 1,
  "repositories": {
    "mmntm--weblate-mcp": {
      "owner": "mmntm",
      "name": "weblate-mcp",
      "url": "https://github.com/mmntm/weblate-mcp",
      "imageUrl": "",
      "description": "Comprehensive Model Context Protocol server for Weblate translation management, enabling AI assistants to perform translation tasks, project management, and content discovery with smart format transformations.",
      "stars": 8,
      "forks": 5,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T02:30:23Z",
      "readme_content": "# Weblate MCP Server\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) server that provides seamless integration with Weblate translation management platform. This server enables AI assistants to interact directly with your Weblate instance for comprehensive translation management.\n\n## 🌟 Features\n\n- **🔧 Complete Weblate API Access**: Full integration with Weblate's REST API\n- **🤖 AI-Powered Workflow**: Natural language interaction with your translation projects\n- **📊 Project Management**: Create, list, and manage translation projects\n- **🔍 Component Operations**: Handle translation components and configurations\n- **✏️ Translation Management**: Update, search, and manage translations\n- **🌐 Language Support**: Work with all supported languages in your Weblate instance\n- **🚀 Multiple Transports**: HTTP/SSE, Streamable HTTP, and STDIO support\n- **🛡️ Type Safety**: Full TypeScript implementation with comprehensive error handling\n- **⚡ LLM-Optimized**: Tools designed to guide AI models toward efficient usage patterns\n\n## 🎯 What is This?\n\nThis MCP server acts as a bridge between AI assistants (like Claude Desktop) and your Weblate translation management platform. Instead of manually navigating the Weblate web interface, you can use natural language to:\n\n- **\"List all projects in my Weblate instance\"**\n- **\"Show me the French translations for the frontend component\"**\n- **\"Update the welcome message translation\"**\n- **\"Create a new translation project\"**\n\n## 🚀 Quick Start\n\n### Option 1: Use with npx (Recommended)\n\nThe easiest way to use this MCP server is with npx - no installation required!\n\n**For Claude Desktop or other MCP clients:**\n```json\n{\n  \"mcpServers\": {\n    \"weblate\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@mmntm/weblate-mcp\"],\n      \"env\": {\n        \"WEBLATE_API_URL\": \"https://your-weblate-instance.com/api\",\n        \"WEBLATE_API_TOKEN\": \"your-weblate-api-token\"\n      }\n    }\n  }\n}\n```\n\n**Manual testing:**\n```bash\n# Test the server directly\nnpx @mmntm/weblate-mcp\n```\n\n### Option 2: Development Setup\n\n### Prerequisites\n- Node.js 18+\n- pnpm package manager\n- Weblate instance with API access\n\n### Installation\n```bash\n# Clone and install\ngit clone <this-repo>\ncd weblate-mcp\npnpm install\n\n# Configure environment\ncp .env.example .env\n# Edit .env with your Weblate API URL and token\n\n# Build and start\npnpm build\npnpm start\n```\n\nServer runs on `http://localhost:3001` by default.\n\n### Environment Configuration\n```env\nWEBLATE_API_URL=https://your-weblate-instance.com\nWEBLATE_API_TOKEN=your-api-token-here\nPORT=3001\nNODE_ENV=production\nLOG_LEVEL=info\n```\n\n## 🔗 MCP Client Configuration\n\n### Claude Desktop (npx method - Recommended)\nAdd to your Claude Desktop config (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n```json\n{\n  \"mcpServers\": {\n    \"weblate\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@mmntm/weblate-mcp\"],\n      \"env\": {\n        \"WEBLATE_API_URL\": \"https://your-weblate-instance.com/api\",\n        \"WEBLATE_API_TOKEN\": \"your-weblate-api-token\"\n      }\n    }\n  }\n}\n```\n\n### Claude Desktop (Development/Local)\nFor development or local builds:\n```json\n{\n  \"mcpServers\": {\n    \"weblate\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/weblate-mcp/dist/main.js\"],\n      \"env\": {\n        \"WEBLATE_API_URL\": \"https://your-weblate-instance.com/api\",\n        \"WEBLATE_API_TOKEN\": \"your-api-token\"\n      }\n    }\n  }\n}\n```\n\n### HTTP Clients (Cursor, VS Code, Web Apps)\n```json\n{\n  \"transport\": \"http\",\n  \"url\": \"http://localhost:3001/mcp\"\n}\n```\n\n## 🛠️ Available Tools\n\n### 📊 Project Management\n| Tool | Description |\n|------|-------------|\n| **`listProjects`** | List all available Weblate projects with URLs and metadata |\n\n### 🔧 Component Management\n| Tool | Description |\n|------|-------------|\n| **`listComponents`** | List components in a specific project with source language details |\n\n### ✏️ Translation Management\n| Tool | Description |\n|------|-------------|\n| **`searchUnitsWithFilters`** ⭐ | **Efficient search using Weblate's native filtering syntax** |\n| **`searchStringInProject`** | Search for translations containing specific text in a project |\n| **`getTranslationForKey`** | Get translation value for a specific key |\n| **`writeTranslation`** | Update or write translation values with approval support |\n| **`bulkWriteTranslations`** ⚡ | **Batch update multiple translations efficiently with error handling** |\n| **`findTranslationsForKey`** | Find all translations for a specific key across languages |\n\n#### 🚀 Why searchUnitsWithFilters is Recommended\n\nThe `searchUnitsWithFilters` tool uses Weblate's native filtering syntax, making it the most efficient way to find translations:\n\n- **❌ Inefficient**: Getting all keys then checking each one individually (can make thousands of API calls)\n- **✅ Efficient**: Single filtered search using Weblate's query syntax\n\n**Example efficient queries:**\n- `state:=0` - Find untranslated strings\n- `state:=10` - Find strings that need editing  \n- `source:\"login\"` - Find strings containing \"login\"\n- `component:common AND state:=0` - Complex filters\n\n### 🌐 Language Management\n| Tool | Description |\n|------|-------------|\n| **`listLanguages`** | List languages available in a specific project |\n\n### 📊 Translation Statistics Dashboard\n| Tool | Description |\n|------|-------------|\n| **`getProjectStatistics`** | Comprehensive project statistics with completion rates and string counts |\n| **`getComponentStatistics`** | Detailed statistics for a specific component |\n| **`getProjectDashboard`** | Complete dashboard overview with all component statistics |\n| **`getTranslationStatistics`** | Statistics for specific translation (project/component/language) |\n| **`getComponentLanguageProgress`** | Translation progress for all languages in a component with progress bars |\n| **`getLanguageStatistics`** | Statistics for a language across all projects |\n| **`getUserStatistics`** | User contribution statistics and activity metrics |\n\n### 📈 Change Tracking & History\n| Tool | Description |\n|------|-------------|\n| **`listRecentChanges`** | Recent changes across all projects with user and timestamp filtering |\n| **`getProjectChanges`** | Recent changes for a specific project |\n| **`getComponentChanges`** | Recent changes for a specific component |\n| **`getChangesByUser`** | Recent changes by a specific user |\n\n## 💡 Usage Examples\n\n### Project Operations\n```typescript\n// List all projects\nawait list_projects();\n\n// Get specific project details\nawait get_project({ slug: \"my-project\" });\n\n// Create a new project\nawait create_project({\n  name: \"New Project\",\n  slug: \"new-project\",\n  web: \"https://example.com\"\n});\n```\n\n### Translation Operations\n```typescript\n// List translations for a component\nawait list_translations({\n  project_slug: \"my-project\",\n  component_slug: \"frontend\"\n});\n\n// Get specific translation\nawait get_translation({\n  project_slug: \"my-project\",\n  component_slug: \"frontend\",\n  language_code: \"fr\"\n});\n\n// Update translations\nawait update_translation({\n  project_slug: \"my-project\",\n  component_slug: \"frontend\",\n  language_code: \"fr\",\n  translations: {\n    \"welcome\": \"Bienvenue\",\n    \"goodbye\": \"Au revoir\"\n  }\n});\n```\n\n## 📚 Documentation\n\n| Document | Description |\n|----------|-------------|\n| **[📖 Documentation Hub](./docs/README.md)** | Complete documentation overview and quick start |\n| **[🚀 Installation & Setup](./docs/MCP_SETUP.md)** | Installation, configuration, and Claude Desktop setup |\n| **[📋 API Reference](./docs/API.md)** | Complete API documentation with examples |\n| **[🛠️ Development Guide](./docs/DEVELOPMENT.md)** | Contributing, development setup, and testing |\n| **[🏗️ Architecture](./docs/ARCHITECTURE.md)** | Codebase structure, patterns, and design decisions |\n| **[📦 Release Process](./docs/RELEASE.md)** | Release management and publishing workflow |\n| **[🔄 Changesets Guide](./docs/CHANGESETS.md)** | Version management with changesets |\n\n## 🏗️ Architecture\n\n```\n┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐\n│   MCP Client    │───▶│  Weblate MCP     │───▶│  Weblate API    │\n│  (IDE/Editor)   │    │     Server       │    │   (REST API)    │\n└─────────────────┘    └──────────────────┘    └─────────────────┘\n                              │\n                              ▼\n                       ┌──────────────────┐\n                       │   MCP Tools      │\n                       │ • Projects       │\n                       │ • Components     │\n                       │ • Translations   │\n                       │ • Languages      │\n                       └──────────────────┘\n```\n\n**Technology Stack:**\n- **NestJS**: Modern Node.js framework with dependency injection\n- **TypeScript**: Full type safety and IntelliSense support\n- **Weblate REST API**: Comprehensive API wrapper with interfaces\n- **MCP Protocol**: Standard Model Context Protocol implementation\n- **Axios**: HTTP client for API communication\n\n## 🧪 Development\n\n### Development Setup\n```bash\n# Start development server with hot reload\npnpm run dev\n\n# Run tests\npnpm test\n\n# Run end-to-end tests\npnpm run test:e2e\n\n# Generate test coverage\npnpm run test:cov\n\n# Build for production\npnpm build\n```\n\n### Adding New Tools\n1. Create tool file in `src/tools/`\n2. Implement MCP tool interface\n3. Add to service providers\n4. Write tests\n5. Update documentation\n\nSee [Development Guide](./docs/DEVELOPMENT.md) for detailed instructions.\n\n## 🎯 Use Cases\n\n### Translation Management\n- **Project oversight**: Monitor translation progress across projects\n- **Content updates**: Update translations programmatically\n- **Quality assurance**: Review and approve translations\n- **Team coordination**: Manage translation workflows\n\n### Development Integration\n- **CI/CD pipelines**: Automate translation updates in deployment\n- **Content management**: Sync translations with content systems\n- **Localization testing**: Validate translations in different contexts\n- **Documentation**: Generate translation reports and statistics\n\n### AI-Assisted Workflows\n- **Natural language queries**: Ask about translation status in plain English\n- **Contextual operations**: AI understands your translation needs\n- **Batch operations**: Perform bulk updates with AI assistance\n- **Smart suggestions**: Get AI-powered translation recommendations\n\n## 🔒 Security & Production\n\n- **API Token Security**: Store tokens securely, use environment variables\n- **Rate Limiting**: Built-in request throttling and retry logic\n- **Error Handling**: Comprehensive error responses with debugging info\n- **Input Validation**: All inputs validated with Zod schemas\n- **HTTPS Support**: Secure communication with Weblate instances\n\n## 🤝 Contributing\n\nWe welcome contributions! Please see our [Contributing Guidelines](./docs/DEVELOPMENT.md#contributing):\n\n1. **Fork** the repository\n2. **Create** a feature branch from main\n3. **Implement** changes with tests\n4. **Update** documentation\n5. **Submit** a pull request\n\n### Code Style\n- Use TypeScript for type safety\n- Follow NestJS conventions\n- Add comprehensive tests\n- Update documentation\n\n## 📄 License\n\nMIT License - see [LICENSE](./LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- **Weblate**: For providing an excellent translation management platform\n- **Model Context Protocol**: For the standardized protocol specification\n- **NestJS**: For the robust application framework\n- **Contributors**: Everyone who helps improve this project\n\n---\n\n**Built with ❤️ for the translation community**\n\n*Need help? Check our [documentation](./docs/) or create an [issue](https://github.com/mmntm/weblate-mcp/issues)!* ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "weblate",
        "mmntm",
        "translation",
        "translation services",
        "translation tools",
        "translation management"
      ]
    }
  }
}