{
  "category": "sports",
  "categoryDisplay": "Sports",
  "description": "Tools for accessing sports-related data, results, and statistics.",
  "totalRepositories": 6,
  "repositories": {
    "RobSpectre--mvf1": {
      "owner": "RobSpectre",
      "name": "mvf1",
      "url": "https://github.com/RobSpectre/mvf1",
      "imageUrl": "",
      "description": "MCP server that controls [MultiViewer](https://multiviewer.app), an app for watching motorsports like Formula 1, World Endurance Championship, IndyCar and others.",
      "stars": 13,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-06T01:02:22Z",
      "readme_content": "***************\nmvf1\n***************\n\nA Python package, command line interface and MCP server to control video players for\n`MultiViewer`_, the best way to watch Formula 1.\n\n.. image:: https://dl.circleci.com/status-badge/img/gh/RobSpectre/mvf1/tree/main.svg?style=svg\n        :target: https://dl.circleci.com/status-badge/redirect/gh/RobSpectre/mvf1/tree/main\n\n.. image:: https://codecov.io/gh/RobSpectre/mvf1/branch/main/graph/badge.svg?token=L5N96KXN2V \n :target: https://codecov.io/gh/RobSpectre/mvf1\n\n.. image:: https://readthedocs.org/projects/mvf1/badge/?version=latest\n    :target: https://mvf1.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n\nTable of Contents\n=================\n\n\n.. contents::\n    :local:\n    :depth: 1\n    :backlinks: none\n\n\nFeatures\n===============\n\n* Command line interface for controlling `MultiViewer`_. Useful for\n  integrations with control interfaces like `StreamDeck`_\n* Pythonic interface for controlling `MultiViewer`_. No GraphQL needed!\n* MCP server for controlling `MultiViewer`_ - perfect for controlling the\n  broadcast for with AI agents.\n* `Type hints`_\n* `Full documentation`_\n* `Test coverage`_\n* `black`_ Praise the Dark Lord\n\n\nInstallation\n===============\n\nThe latest version can be installed via `pip`_.\n\n.. code-block:: bash\n\n   $ pip install mvf1\n\n\nQuickstart\n================\n\nCommand Line\n----------------\n\n.. code-block:: bash\n\n    $ mvf1-cli --help\n\nModel Context Protocol (MCP) Server\n------------------------------------\n\n.. code-block:: bash\n\n    $ mvf1-cli mcp \n\nTo use in an AI agent, use your framework's affordance for a `stdio` MCP\nserver.\n\nHere is an example with PydanticAI.\n\n.. code-block:: python\n\n    from pydantic_ai import Agent\n    from pydantic_ai.mcp import MCPServerStdio\n\n    server = MCPServerStdio(  \n        'mvf1-cli',\n        args=[\n            'mcp'\n        ]\n    )\n    agent = Agent('openai:gpt-4o', mcp_servers=[server])\n\nLibrary\n----------------\n\nDisplaying all players\n\n.. code-block:: python\n\n    >>> from mvf1 import MultiViewerForF1\n    >>> remote = MultiViewerForF1()\n    >>> remote.players\n    [6: INTERNATIONAL, 7: PER]\n\nPause all players\n\n.. code-block:: python\n\n    >>> from mvf1 import MultiViewerForF1\n    >>> remote = MultiViewerForF1()\n    >>> for player in remote.players:\n    >>>     player.mute()\n    {'data': {'playerSetMuted': True}}\n    {'data': {'playerSetMuted': True}}\n\nRetrieve specific player\n\n.. code-block:: python\n\n    >>> from mvf1 import MultiViewerForF1\n    >>> remote = MultiViewerForF1()\n    >>> player = remote.player(6)\n    >>> player.state\n    {'ts': 1677168293.21, 'paused': False, 'muted': True, 'volume': 100, 'live': False, 'currentTime': 10.002025, 'interpolatedCurrentTime': 363.656025}\n\nSwitch stream of player to data channel\n\n.. code-block:: python\n\n    >>> from mvf1 import MultiViewerForF1\n    >>> remote = MultiViewerForF1()\n    >>> player = remote.player(6)\n    >>> player.switch_stream('DATA')\n    {'data': {'playerCreate': '12'}}\n\nSynchronize all players to specific player\n\n.. code-block:: python\n\n    >>> from mvf1 import MultiViewerForF1\n    >>> remote = MultiViewerForF1()\n    >>> player = remote.player(6)\n    >>> player.sync()\n    {'data': {'playerSync': True}}\n\nSynchornize all players to player streaming broadcast commentary\n\n.. code-block:: python\n\n    >>> from mvf1 import MultiViewerForF1\n    >>> remote = MultiViewerForF1()\n    >>> remote.player_sync_to_commentary()\n    {'data': {'playerSync': True}}\n\n\nDevelopment\n================\n\nHacking\n---------------\n\nTo hack on the project, clone the `GitHub repo`_:\n\n.. code-block:: bash\n   \n   $ git clone https://github.com/RobSpectre/mvf1\n\nThen install in a `virtualenv`_.\n\n.. code-block:: bash\n\n   $ pip install -e ./\n\n\nTest\n---------------\n\nThe project uses `tox`_ for tests. Simply run from project root\n\n.. code-block:: bash\n\n    $ tox\n\n\nMeta\n================\n\n* Written by `Rob Spectre`_.\n* Released under `MIT License`_.\n* Software is as is - no warranty expressed or implied, diggity.\n* This package is not developed or maintained by `MultiViewer`_ or\n  `Formula 1 TV`_.\n* Shout out to the excellent `MultiViewer`_ team! This app absolutely\n  changed how I enjoy Formula 1.\n* 🏎️ Go Weeyums! 🏎️\n\n\n.. _MultiViewer: https://multiviewer.app/\n.. _pip: https://multiviewer.app/\n.. _GitHub Repo: https://github.com/RobSpectre/mvf1\n.. _virtualenv: https://multiviewer.app/\n.. _Rob Spectre: https://brooklynhacker.com\n.. _MIT License: http://opensource.org/licenses/MIT\n.. _tox: https://tox.wiki/en/latest/\n.. _black: https://black.readthedocs.io/en/stable/\n.. _StreamDeck: https://www.elgato.com/en/welcome-to-stream-deck\n.. _type hints: https://docs.python.org/3/library/typing.html\n.. _Full documentation: https://mvf1.readthedocs.io/en/latest/\n.. _Test coverage: https://app.codecov.io/gh/RobSpectre/mvf1\n.. _Formula 1 TV: https://f1tv.formula1.com/\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "robspectre",
        "sports",
        "multiviewer",
        "accessing sports",
        "sports tools",
        "robspectre mvf1"
      ]
    },
    "guillochon--mlb-api-mcp": {
      "owner": "guillochon",
      "name": "mlb-api-mcp",
      "url": "https://github.com/guillochon/mlb-api-mcp",
      "imageUrl": "",
      "description": "MCP server that acts as a proxy to the freely available MLB API, which provides player info, stats, and game information.",
      "stars": 30,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T18:13:58Z",
      "readme_content": "# MLB API MCP Server\n\n[![CI Status](https://github.com/guillochon/mlb-api-mcp/actions/workflows/ci.yml/badge.svg)](https://github.com/guillochon/mlb-api-mcp/actions/workflows/ci.yml)\n![License](https://img.shields.io/github/license/guillochon/mlb-api-mcp)\n[![smithery badge](https://smithery.ai/badge/@guillochon/mlb-api-mcp)](https://smithery.ai/server/@guillochon/mlb-api-mcp)\n![Coverage](https://img.shields.io/badge/coverage-86.27%25-brightgreen)\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) server that provides comprehensive access to MLB statistics and baseball data through a FastMCP-based interface.\n\n## Overview\n\nThis MCP server acts as a bridge between AI applications and MLB data sources, enabling seamless integration of baseball statistics, game information, player data, and more into AI workflows and applications.\n\n## Features\n\n### MLB Data Access\n- **Current standings** for all MLB teams with flexible filtering by league, season, and date\n- **Game schedules** and results with date range support\n- **Player statistics** including traditional and sabermetric stats (WAR, wOBA, wRC+)\n- **Team information** and rosters with various roster types\n- **Live game data** including boxscores, linescores, and play-by-play\n- **Game highlights** and scoring plays\n- **Player and team search** functionality\n- **Draft information** and award recipients\n- **Game pace statistics** and lineup information\n\n### MCP Tools\n\nAll MLB/statistics/game/player/team/etc. functionality is exposed as MCP tools, not as RESTful HTTP endpoints. These tools are accessible via the `/mcp/` endpoint using the MCP protocol. For a list of available tools and their descriptions, visit `/tools/` when the server is running.\n\n#### Key MCP Tools\n- `get_mlb_standings` - Current MLB standings with league and season filters\n- `get_mlb_schedule` - Game schedules for specific dates, ranges, or teams\n- `get_mlb_team_info` - Detailed team information\n- `get_mlb_player_info` - Player biographical information\n- `get_mlb_boxscore` - Complete game boxscores\n- `get_mlb_linescore` - Inning-by-inning game scores\n- `get_mlb_game_highlights` - Video highlights for games\n- `get_mlb_game_scoring_plays` - Play-by-play data with event filtering\n- `get_mlb_game_pace` - Game duration and pace statistics\n- `get_mlb_game_lineup` - Detailed lineup information for games\n- `get_multiple_mlb_player_stats` - Traditional player statistics\n- `get_mlb_sabermetrics` - Advanced sabermetric statistics (WAR, wOBA, etc.)\n- `get_mlb_roster` - Team rosters with various roster types\n- `get_mlb_search_players` - Search players by name\n- `get_mlb_search_teams` - Search teams by name\n- `get_mlb_players` - All players for a sport/season\n- `get_mlb_teams` - All teams for a sport/season\n- `get_mlb_draft` - Draft information by year\n- `get_mlb_awards` - Award recipients\n- `get_current_date` - Current date\n- `get_current_time` - Current time\n\nFor the full list and detailed descriptions, see `/tools/` or `/docs` when the server is running.\n\n### HTTP Endpoints\n\nThe following HTTP endpoints are available:\n- `/` - Redirects to `/docs`\n- `/docs` - Interactive API documentation and tool listing\n- `/health/` - Health check endpoint\n- `/mcp/info` - MCP server information\n- `/tools/` - List of all available MCP tools\n- `/mcp/` (POST) - MCP protocol endpoint for MCP-compatible clients\n\n> **Note:** There are no RESTful HTTP endpoints for MLB/statistics/game/player/team/etc. All such functionality is accessed via MCP tools through the `/mcp/` endpoint.\n\n### MCP Integration\n- Compatible with MCP-enabled AI applications\n- Tool-based interaction model with comprehensive endpoint descriptions\n- Automatic API documentation generation\n- Schema validation and type safety\n- Full response schema descriptions for better AI integration\n\n## Installation\n\n### Installing via Smithery\n\nTo install MLB API Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@guillochon/mlb-api-mcp):\n\n```bash\nnpx -y @smithery/cli install @guillochon/mlb-api-mcp --client claude\n```\n\n### Option 1: Local Installation\n\n1. Install uv if you haven't already:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n2. Clone the repository:\n```bash\ngit clone https://github.com/guillochon/mlb-api-mcp.git\ncd mlb-api-mcp\n```\n\n3. Create and activate a virtual environment:\n\n```bash\nuv venv\nsource .venv/bin/activate  # On Unix/macOS\n# or\n.venv\\Scripts\\activate  # On Windows\n```\n\n4. Install dependencies:\n\n```bash\nuv pip install -e .\n```\n\n### Option 2: Docker Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/guillochon/mlb-api-mcp.git\ncd mlb-api-mcp\n```\n\n2. Build the Docker image:\n```bash\ndocker build -t mlb-api-mcp .\n```\n\n3. Run the container (default timezone is UTC, uses Python 3.12):\n```bash\ndocker run -p 8000:8000 mlb-api-mcp\n```\n\n#### Setting the Timezone\n\nTo run the container in your local timezone, pass the `TZ` environment variable (e.g., for New York):\n\n```bash\ndocker run -e TZ=America/New_York -p 8000:8000 mlb-api-mcp\n```\n\nReplace `America/New_York` with your desired [IANA timezone name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).\n\nThe server will be available at `http://localhost:8000` with:\n- **MCP Server**: `http://localhost:8000/mcp/`\n- **Documentation**: `http://localhost:8000/docs`\n\n#### Docker Options\n\nYou can also run the container with additional options:\n\n```bash\n# Run in detached mode\ndocker run -d -p 8000:8000 --name mlb-api-server mlb-api-mcp\n\n# Run with custom port mapping\ndocker run -p 3000:8000 mlb-api-mcp\n\n# View logs\ndocker logs mlb-api-server\n\n# Stop the container\ndocker stop mlb-api-server\n\n# Remove the container\ndocker rm mlb-api-server\n```\n\n## Usage\n\n### Starting the Server\n\nRun the MCP server locally:\n```bash\n# For stdio transport (default, for MCP clients like Smithery)\nuv run python main.py\n\n# For HTTP transport (for web access)\nuv run python main.py --http\n```\n\nThe server will start with:\n- **MCP Server** on `http://localhost:8000/mcp/`\n- **Interactive API documentation** available at `http://localhost:8000/docs`\n\n### MCP Client Integration\n\nThis server can be integrated into any MCP-compatible application. The server provides tools for:\n- Retrieving team standings and schedules\n- Getting comprehensive player and team statistics\n- Accessing live game data and historical records\n- Searching for players and teams\n- Fetching sabermetric statistics like WAR\n- And much more...\n\n## API Documentation\n\nOnce the server is running, visit `http://localhost:8000/docs` for comprehensive API documentation including:\n- Available HTTP endpoints\n- List of all available MCP tools at `/tools/`\n- Tool descriptions and parameters\n- Interactive testing interface\n- Parameter descriptions and examples\n\n## Dependencies\n\n- **mcp[cli]**: MCP-compliant server framework with CLI support\n- **FastAPI**: Web framework for HTTP transport\n- **python-mlb-statsapi**: Official MLB Statistics API wrapper\n- **uvicorn[standard]**: ASGI server for running the app\n- **websockets**: WebSocket support (latest version to avoid deprecation warnings)\n- **python-dotenv**: Environment variable management\n- **httpx**: HTTP client for API requests\n\n## Development\n\nThis project uses:\n- Python 3.10+ (Docker uses Python 3.12)\n- FastMCP for the web framework\n- uv for fast Python package management\n- Hatchling for build management\n- MLB Stats API for comprehensive baseball data access\n- Ruff for linting and formatting\n\n### Setup Pre-commit Hooks\n\n1. Install pre-commit:\n\n```bash\npip install pre-commit\n```\n\n2. Initialize pre-commit hooks:\n\n```bash\npre-commit install\n```\n\nNow, the linting checks will run automatically whenever you commit code. You can also run them manually:\n\n```bash\npre-commit run --all-files\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit issues or pull requests.\n\n## License\n\nThis project is open source. Please check the license file for details.\n\n## Testing\n\nThis project includes comprehensive test coverage with pytest and coverage reporting.\n\n### Running Tests\n\n```bash\n# Run all tests with coverage (default)\nuv run pytest\n\n# Run tests with verbose output\nuv run pytest -v\n\n# Run specific test file\nuv run pytest tests/test_mlb_api.py\n\n# Run specific test function\nuv run pytest tests/test_mlb_api.py::test_get_mlb_standings\n\n# Run tests without coverage\nuv run tests/run_coverage.py test\n\n# Generate HTML coverage report\nuv run tests/run_coverage.py html\n\n# Clean up coverage files\nuv run tests/run_coverage.py clean\n```\n\n### Coverage\n\n- **Current Coverage**: 86.27% (exceeds 80% threshold)\n- **Coverage Source**: `mlb_api.py` and `generic_api.py`\n- **Reports**: Terminal output, HTML (`htmlcov/index.html`), and XML (`coverage.xml`)\n- **CI Integration**: Coverage checking and badge updates run automatically on every push/PR\n\n### Test Structure\n\nThe test suite includes:\n- **Unit tests** for all MCP tools (MLB API and Generic API)\n- **Error handling tests** for API failures\n- **Edge case tests** for boundary conditions\n- **Mock-based tests** to avoid external API calls\n\n### Adding New Tests\n\nWhen adding new functionality:\n\n1. Add corresponding test cases to `tests/test_mlb_api.py`\n2. Include both success and error scenarios\n3. Use mocking to avoid external dependencies\n4. Ensure coverage remains above 80%\n\nExample test structure:\n```python\ndef test_new_function_success(mcp):\n    \"\"\"Test successful execution of new function\"\"\"\n    new_function = get_tool(mcp, 'new_function')\n    with patch('mlb_api.external_api_call', return_value={'data': 'success'}):\n        result = new_function(param='value')\n        assert 'data' in result\n\ndef test_new_function_error_handling(mcp):\n    \"\"\"Test error handling in new function\"\"\"\n    new_function = get_tool(mcp, 'new_function')\n    with patch('mlb_api.external_api_call', side_effect=Exception(\"API Error\")):\n        result = new_function(param='value')\n        assert 'error' in result\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mlb",
        "sports",
        "mcp",
        "mlb api",
        "accessing sports",
        "guillochon mlb"
      ]
    },
    "mikechao--balldontlie-mcp": {
      "owner": "mikechao",
      "name": "balldontlie-mcp",
      "url": "https://github.com/mikechao/balldontlie-mcp",
      "imageUrl": "",
      "description": "MCP server that integrates balldontlie api to provide information about players, teams and games for the NBA, NFL and MLB",
      "stars": 14,
      "forks": 10,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-19T12:13:35Z",
      "readme_content": "# Balldontlie MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@mikechao/balldontlie-mcp)](https://smithery.ai/server/@mikechao/balldontlie-mcp)\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/07e29bcd-3fb7-46e6-b4b9-8908b3ef18f2)\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/mikechao-balldontlie-mcp-badge.png)](https://mseep.ai/app/mikechao-balldontlie-mcp)\n\n<a href=\"https://glama.ai/mcp/servers/@mikechao/balldontlie-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@mikechao/balldontlie-mcp/badge\" alt=\"balldontlie-mcp MCP server\" />\n</a>\n\nAn MCP Server implementation that integrates the [Balldontlie API](https://www.balldontlie.io/), to provide information about players, teams and games for the NBA, NFL and MLB.\n\n## Tools\n\n- **get_teams**\n\n  - Gets the list of team from one of the following leagues NBA (National Basketball Association), MLB (Major League Baseball), NFL (National Football League)\n  - Inputs:\n    - `league` (enum ['NBA', 'NFL', 'MLB']): The sports league to get teams for\n\n- **get_players**\n\n  - Gets the list of players from one of the following leagues NBA (National Basketball Association), MLB (Major League Baseball), NFL (National Football League)\n  - Inputs:\n    - `league` (enum ['NBA', 'NFL', 'MLB']): The sports league to get players for\n    - `firstName` (string, optional): The first name of the player to search for\n    - `lastName` (string, optional): The last name of the player to search for\n    - `cursor` (number, optional): Cursor for pagination\n\n- **get_games**\n\n  - Gets the list of games from one of the following leagues NBA (National Basketball Association), MLB (Major League Baseball), NFL (National Football League)\n  - Inputs:\n    - `league` (enum ['NBA', 'NFL', 'MLB']): The sports league to get games for\n    - `dates` (string[], optional): Get games for specific dates, format: YYYY-MM-DD\n    - `teamIds` (string[], optional): Get games for specific games\n    - `cursor` (number, optional): Cursor for pagination\n\n- **get_game**\n\n  - Get a specific game from one of the following leagues NBA (National Basketball Association), MLB (Major League Baseball), NFL (National Football League)\n  - Inputs:\n    - `league` (enum ['NBA', 'NFL', 'MLB']): The sports league to get the game for\n    - `gameId` (number): The id of the game from the get_games tool\n\n## Prompts\n\n- **schedule_generator**\n\nGiven a league (NBA, MLB, NFL), a starting date and ending date generates an interactive schedule in Claude Desktop.\n\n![claude desktop example](https://mikechao.github.io/images/schedule_geneartor_prompt.webp)\n\n## Sample queries\n\nWith this MCP Server installed you can ask Claude or other LLM questions like the following.\n\n```\nShow me today's baseball games.\nCan you find football players with the last name Purdy?\nHow many NBA players have the last name Ming?\n```\n\n## Configuration\n\n### Getting an API Key\n\n1. Sign up for account at [Balldontlie.io](https://www.balldontlie.io/)\n2. The free plan is enough for this MCP Server\n\n### Installing using Desktop Extension (DXT)\n\n1. Download the `dxt` file from the [Releases](https://github.com/mikechao/balldontlie-mcp/releases)\n2. Open it with Claude Desktop\n   or\n   Go to File -> Settings -> Extensions and drag the .DXT file to the window to install it\n\n### Installing via Smithery\n\nTo install balldontlie-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mikechao/balldontlie-mcp):\n\n```bash\nnpx -y @smithery/cli install @mikechao/balldontlie-mcp --client claude\n```\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcp-servers\": {\n    \"balldontlie\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"balldontlie-mcp\"\n      ],\n      \"env\": {\n        \"BALLDONTLIE_API_KEY\": \"YOUR API KEY HERE\"\n      }\n    }\n  }\n}\n```\n\n### Usage with LibreChat\n\n```yaml\nmcpServers:\n  balldontlie:\n    command: sh\n    args:\n      - -c\n      - BALLDONTLIE_API_KEY=your-api-key-here npx -y balldontlie-mcp\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n\n## Disclaimer\n\nThis library is not officially associated with balldontlie.io. It is a third-party implementation of the balldontlie api with a MCP Server.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sports",
        "mlb",
        "api",
        "accessing sports",
        "balldontlie api",
        "sports tools"
      ]
    },
    "r-huijts--firstcycling-mcp": {
      "owner": "r-huijts",
      "name": "firstcycling-mcp",
      "url": "https://github.com/r-huijts/firstcycling-mcp",
      "imageUrl": "",
      "description": "Access cycling race data, results, and statistics through natural language. Features include retrieving start lists, race results, and rider information from firstcycling.com.",
      "stars": 14,
      "forks": 7,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-26T08:44:25Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/r-huijts-firstcycling-mcp-badge.png)](https://mseep.ai/app/r-huijts-firstcycling-mcp)\n\n# FirstCycling MCP Server\n\nThis is a Model Context Protocol (MCP) server that provides professional cycling data from FirstCycling. It allows you to retrieve comprehensive information about professional cyclists, race results, race details, and historical cycling data.\n\n## Features\n\nThis MCP server offers rich access to professional cycling data, providing tools for:\n\n- Finding information about professional cyclists\n- Retrieving race results and details\n- Exploring historical race data\n- Analyzing rider performance and career progression\n- Accessing information about cycling teams and competitions\n\n## Real-World Use Cases\n\nWith this MCP server, you can use Claude to:\n\n### Rider Analysis\n\n- **Performance Tracking**: \"How has Tadej Pogačar performed in the Tour de France over the years?\"\n- **Career Progression**: \"Show me the team history and career progression of Wout van Aert.\"\n- **Specialization Analysis**: \"What are Mathieu van der Poel's results in Monument classics?\"\n- **Victory Analysis**: \"List all WorldTour victories for Jonas Vingegaard.\"\n- **Historical Comparison**: \"Compare the Grand Tour results of Primož Roglič and Jonas Vingegaard.\"\n\n### Race Research\n\n- **Recent Results**: \"Show me the results of the 2023 Paris-Roubaix.\"\n- **Historical Context**: \"Who are the youngest and oldest winners of the Tour of Flanders?\"\n- **Team Analysis**: \"Get the startlist for the 2023 Tour de France with detailed team information.\"\n- **Race Statistics**: \"Show me the victory table for Liège-Bastogne-Liège. Who has won it the most times?\"\n- **Stage Information**: \"Can you show me the stage profiles for the 2023 Giro d'Italia?\"\n\n### Sports Journalism\n\n- \"Create a detailed profile of Remco Evenepoel for a cycling magazine article.\"\n- \"Write a preview for the upcoming Tour de France based on the recent results of top contenders like Tadej Pogačar and Jonas Vingegaard.\"\n- \"Analyze the evolution of Tom Pidcock's career based on his race results and team history.\"\n\n### Cycling Education\n\n- \"Explain what makes the Monument classics special using data about their history and winners.\"\n- \"Create an educational summary about Grand Tours and their significance in professional cycling.\"\n- \"Describe the typical career progression of a professional cyclist using examples from the data.\"\n\n## Requirements\n\n- Python 3.10 or higher\n- `uv` package manager (recommended)\n- Dependencies as listed in `pyproject.toml`, including:\n  - mcp\n  - beautifulsoup4\n  - lxml\n  - pandas\n  - slumber\n  - and other packages for web scraping and data processing\n\n## Setup\n\n1. Clone this repository\n2. Create and activate a virtual environment:\n   ```\n   uv venv\n   source .venv/bin/activate  # On macOS/Linux\n   # or\n   .venv\\Scripts\\activate  # On Windows\n   ```\n3. Install dependencies:\n   ```\n   uv pip install -e .\n   ```\n\n## FirstCycling API\n\nThis server uses the [FirstCycling API](https://github.com/baronet2/FirstCyclingAPI), which has been integrated directly into the project. The API provides methods to fetch data from the FirstCycling website through web scraping.\n\n## MCP Tools\n\nThe server exposes the following tools through the Model Context Protocol:\n\n### Rider Information\n\n| Tool | Description |\n|------|-------------|\n| `get_rider_info` | Get basic biographical information about a rider including nationality, birthdate, weight, height, and current team |\n| `get_rider_best_results` | Retrieve a rider's best career results, sorted by importance |\n| `get_rider_grand_tour_results` | Get a rider's results in Grand Tours (Tour de France, Giro d'Italia, Vuelta a España) |\n| `get_rider_monument_results` | Retrieve a rider's results in cycling's Monument classics |\n| `get_rider_team_and_ranking` | Get a rider's team history and UCI ranking evolution over time |\n| `get_rider_race_history` | Retrieve a rider's complete race participation history, optionally filtered by year |\n| `get_rider_one_day_races` | Get a rider's results in one-day races, optionally filtered by year |\n| `get_rider_stage_races` | Get a rider's results in multi-day stage races, optionally filtered by year |\n| `get_rider_teams` | Retrieve the complete team history of a rider throughout their career |\n| `get_rider_victories` | Get a list of a rider's career victories, with optional filters for WorldTour or UCI races |\n\n### Race Information\n\n| Tool | Description |\n|------|-------------|\n| `get_race_results` | Retrieve results for a specific race edition by race ID and year |\n| `get_race_overview` | Get general information about a race including history, records, and past winners |\n| `get_race_stage_profiles` | Retrieve stage profiles and details for multi-stage races |\n| `get_race_startlist` | Get the startlist for a specific race edition with detailed or basic team information |\n| `get_race_victory_table` | Retrieve the all-time victory table for a race showing riders with most wins |\n| `get_race_year_by_year` | Get year-by-year results for a race with optional classification filter |\n| `get_race_youngest_oldest_winners` | Retrieve information about the youngest and oldest winners of a race |\n| `get_race_stage_victories` | Get information about stage victories in multi-stage races |\n\n### Search Tools\n\n| Tool | Description |\n|------|-------------|\n| `search_rider` | Search for riders by name, returning their IDs and basic information |\n| `search_race` | Search for races by name, returning their IDs and basic information |\n\n## Usage\n\n### Development Mode\n\nYou can test the server with MCP Inspector by running:\n\n```\nuv run mcp dev firstcycling.py\n```\n\nThis will start the server and open the MCP Inspector in your browser, allowing you to test the available tools.\n\n### Integration with Claude for Desktop\n\nTo integrate this server with Claude for Desktop:\n\n1. Edit the Claude for Desktop config file, located at:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the server to your configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"firstcycling\": {\n         \"command\": \"uv\",\n         \"args\": [\"--directory\", \"/path/to/server/directory\", \"run\", \"firstcycling.py\"]\n       }\n     }\n   }\n   ```\n\n3. Restart Claude for Desktop\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sports",
        "cycling",
        "data",
        "accessing sports",
        "sports tools",
        "access cycling"
      ]
    },
    "r-huijts--strava-mcp": {
      "owner": "r-huijts",
      "name": "strava-mcp",
      "url": "https://github.com/r-huijts/strava-mcp",
      "imageUrl": "",
      "description": "A Model Context Protocol (MCP) server that connects to Strava API, providing tools to access Strava data through LLMs",
      "stars": 153,
      "forks": 18,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T07:53:54Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/r-huijts-strava-mcp-badge.png)](https://mseep.ai/app/r-huijts-strava-mcp)\n\n# Strava MCP Server\n\nThis project implements a Model Context Protocol (MCP) server in TypeScript that acts as a bridge to the Strava API. It exposes Strava data and functionalities as \"tools\" that Large Language Models (LLMs) can utilize through the MCP standard.\n\n<a href=\"https://glama.ai/mcp/servers/@r-huijts/strava-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@r-huijts/strava-mcp/badge\" alt=\"Strava Server MCP server\" />\n</a>\n\n## Features\n\n- 🏃 Access recent activities, profile, and stats.\n- 📊 Fetch detailed activity streams (power, heart rate, cadence, etc.).\n- 🗺️ Explore, view, star, and manage segments.\n- ⏱️ View detailed activity and segment effort information.\n- 📍 List and view details of saved routes.\n- 💾 Export routes in GPX or TCX format to the local filesystem.\n- 🤖 AI-friendly JSON responses via MCP.\n- 🔧 Uses Strava API V3.\n\n## Natural Language Interaction Examples\n\nAsk your AI assistant questions like these to interact with your Strava data:\n\n**Recent Activity & Profile:**\n* \"Show me my recent Strava activities.\"\n* \"What were my last 3 rides?\"\n* \"Get my Strava profile information.\"\n* \"What's my Strava username?\"\n\n**Activity Streams & Data:**\n* \"Get the heart rate data from my morning run yesterday.\"\n* \"Show me the power data from my last ride.\"\n* \"What was my cadence profile for my weekend century ride?\"\n* \"Get all stream data for my Thursday evening workout.\"\n* \"Show me the elevation profile for my Mt. Diablo climb.\"\n\n**Stats:**\n* \"What are my running stats for this year on Strava?\"\n* \"How far have I cycled in total?\"\n* \"Show me my all-time swim totals.\"\n\n**Specific Activities:**\n* \"Give me the details for my last run.\"\n* \"What was the average power for my interval training on Tuesday?\"\n* \"Did I use my Trek bike for my commute yesterday?\"\n\n**Clubs:**\n* \"What Strava clubs am I in?\"\n* \"List the clubs I've joined.\"\n\n**Segments:**\n* \"List the segments I starred near Boulder, Colorado.\"\n* \"Show my favorite segments.\"\n* \"Get details for the 'Alpe du Zwift' segment.\"\n* \"Are there any good running segments near Golden Gate Park?\"\n* \"Find challenging climbs near Boulders Flagstaff Mountain.\"\n* \"Star the 'Flagstaff Road Climb' segment for me.\"\n* \"Unstar the 'Lefthand Canyon' segment.\"\n\n**Segment Efforts:**\n* \"Show my efforts on the 'Sunshine Canyon' segment this month.\"\n* \"List my attempts on Box Hill between January and June this year.\"\n* \"Get the details for my personal record on Alpe d'Huez.\"\n\n**Routes:**\n* \"List my saved Strava routes.\"\n* \"Show the second page of my routes.\"\n* \"What is the elevation gain for my Boulder Loop route?\"\n* \"Get the description for my 'Boulder Loop' route.\"\n* \"Export my 'Boulder Loop' route as a GPX file.\"\n* \"Save my Sunday morning route as a TCX file.\"\n\n## Advanced Prompt Example\n\nHere's an example of a more advanced prompt to create a professional cycling coach analysis of your Strava activities:\n\n```\nYou are Tom Verhaegen, elite cycling coach and mentor to world champion Mathieu van der Poel. Analyze my most recent Strava activity. Provide a thorough, data-driven assessment of the ride, combining both quantitative insights and textual interpretation.\n\nBegin your report with a written summary that highlights key findings and context. Then, bring the raw numbers to life: build an interactive, visually striking dashboard using HTML, CSS, and JavaScript. Use bold, high-contrast colors and intuitive, insightful chart types that best suit each metric (e.g., heart rate, power, cadence, elevation).\n\nEmbed clear coaching feedback and personalized training recommendations directly within the visualization. These should be practical, actionable, and grounded solely in the data provided—no assumptions or fabrications.\n\nAs a bonus, sprinkle in motivational quotes and cheeky commentary from Mathieu van der Poel himself—he's been watching my rides with one eyebrow raised and a smirk of both concern and amusement.\n\nGoal: Deliver a professional-grade performance analysis that looks and feels like it came straight from the inner circle of world-class cycling.\n```\n\nThis prompt creates a personalized analysis of your most recent Strava activity, complete with professional coaching feedback and a custom visualization dashboard.\n\n## ⚠️ Important Setup Sequence\n\nFor successful integration with Claude, follow these steps in exact order:\n\n1. Install the server and its dependencies\n2. Configure the server in Claude's configuration\n3. Complete the Strava authentication flow\n4. Restart Claude to ensure proper environment variable loading\n\nSkipping steps or performing them out of order may result in environment variables not being properly read by Claude.\n\n## Installation & Setup\n\n1. **Prerequisites:**\n   - Node.js (v18 or later recommended)\n   - npm (usually comes with Node.js)\n   - A Strava Account\n\n### 1. From Source\n\n1. **Clone Repository:**\n   ```bash\n   git clone https://github.com/r-huijts/strava-mcp.git\n   cd strava-mcp\n   ```\n\n2. **Install Dependencies:**\n   ```bash\n   npm install\n   ```\n3. **Build the Project:**\n   ```bash\n   npm run build\n   ```\n\n### 2. Configure Claude Desktop\n\nUpdate your Claude configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"strava-mcp-local\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/absolute/path/to/your/strava-mcp/dist/server.js\"\n      ]\n      // Environment variables are read from the .env file by the server\n    }\n  }\n}\n```\n\nMake sure to replace `/absolute/path/to/your/strava-mcp/` with the actual path to your installation.\n\n### 3. Strava Authentication Setup\n\nThe `setup-auth.ts` script makes it easy to set up authentication with the Strava API. Follow these steps carefully:\n\n#### Create a Strava API Application\n\n1. Go to [https://www.strava.com/settings/api](https://www.strava.com/settings/api)\n2. Create a new application:\n   - Enter your application details (name, website, description)\n   - Important: Set \"Authorization Callback Domain\" to `localhost`\n   - Note down your Client ID and Client Secret\n\n#### Run the Setup Script\n\n```bash\n# In your strava-mcp directory\nnpx tsx scripts/setup-auth.ts\n```\n\nFollow the prompts to complete the authentication flow (detailed instructions in the Authentication section below).\n\n### 4. Restart Claude\n\nAfter completing all the above steps, restart Claude Desktop for the changes to take effect. This ensures that:\n- The new configuration is loaded\n- The environment variables are properly read\n- The Strava MCP server is properly initialized\n\n## 🔑 Environment Variables\n\n| Variable | Description |\n|----------|-------------|\n| STRAVA_CLIENT_ID | Your Strava Application Client ID (required) |\n| STRAVA_CLIENT_SECRET | Your Strava Application Client Secret (required) |\n| STRAVA_ACCESS_TOKEN | Your Strava API access token (generated during setup) |\n| STRAVA_REFRESH_TOKEN | Your Strava API refresh token (generated during setup) |\n| ROUTE_EXPORT_PATH | Absolute path for saving exported route files (optional) |\n\n## Token Handling\n\nThis server implements automatic token refreshing. When the initial access token expires (typically after 6 hours), the server will automatically use the refresh token stored in `.env` to obtain a new access token and refresh token. These new tokens are then updated in both the running process and the `.env` file, ensuring continuous operation.\n\nYou only need to run the `scripts/setup-auth.ts` script once for the initial setup.\n\n## Configure Export Path (Optional)\n\nIf you intend to use the `export-route-gpx` or `export-route-tcx` tools, you need to specify a directory for saving exported files.\n\nEdit your `.env` file and add/update the `ROUTE_EXPORT_PATH` variable:\n```dotenv\n# Optional: Define an *absolute* path for saving exported route files (GPX/TCX)\n# Ensure this directory exists and the server process has write permissions.\n# Example: ROUTE_EXPORT_PATH=/Users/your_username/strava-exports\nROUTE_EXPORT_PATH=\n```\n\nReplace the placeholder with the **absolute path** to your desired export directory. Ensure the directory exists and the server has permission to write to it.\n\n## API Reference\n\nThe server exposes the following MCP tools:\n\n---\n\n### `get-recent-activities`\n\nFetches the authenticated user's recent activities.\n\n- **When to use:** When the user asks about their recent workouts, activities, runs, rides, etc.\n- **Parameters:**\n  - `perPage` (optional):\n    - Type: `number`\n    - Description: Number of activities to retrieve.\n    - Default: 30\n- **Output:** Formatted text list of recent activities (Name, ID, Distance, Date).\n- **Errors:** Missing/invalid token, Strava API errors.\n\n---\n\n### `get-athlete-profile`\n\nFetches the profile information for the authenticated athlete.\n\n- **When to use:** When the user asks for their profile details, username, location, weight, premium status, etc.\n- **Parameters:** None\n- **Output:** Formatted text string with profile details.\n- **Errors:** Missing/invalid token, Strava API errors.\n\n---\n\n### `get-athlete-stats`\n\nFetches activity statistics (recent, YTD, all-time) for the authenticated athlete.\n\n- **When to use:** When the user asks for their overall statistics, totals for runs/rides/swims, personal records (longest ride, biggest climb).\n- **Parameters:** None\n- **Output:** Formatted text summary of stats, respecting user's measurement preference.\n- **Errors:** Missing/invalid token, Strava API errors.\n\n---\n\n### `get-activity-details`\n\nFetches detailed information about a specific activity using its ID.\n\n- **When to use:** When the user asks for details about a *specific* activity identified by its ID.\n- **Parameters:**\n  - `activityId` (required):\n    - Type: `number`\n    - Description: The unique identifier of the activity.\n- **Output:** Formatted text string with detailed activity information (type, date, distance, time, speed, HR, power, gear, etc.), respecting user's measurement preference.\n- **Errors:** Missing/invalid token, Invalid `activityId`, Strava API errors.\n\n---\n\n### `list-athlete-clubs`\n\nLists the clubs the authenticated athlete is a member of.\n\n- **When to use:** When the user asks about the clubs they have joined.\n- **Parameters:** None\n- **Output:** Formatted text list of clubs (Name, ID, Sport, Members, Location).\n- **Errors:** Missing/invalid token, Strava API errors.\n\n---\n\n### `list-starred-segments`\n\nLists the segments starred by the authenticated athlete.\n\n- **When to use:** When the user asks about their starred or favorite segments.\n- **Parameters:** None\n- **Output:** Formatted text list of starred segments (Name, ID, Type, Distance, Grade, Location).\n- **Errors:** Missing/invalid token, Strava API errors.\n\n---\n\n### `get-segment`\n\nFetches detailed information about a specific segment using its ID.\n\n- **When to use:** When the user asks for details about a *specific* segment identified by its ID.\n- **Parameters:**\n  - `segmentId` (required):\n    - Type: `number`\n    - Description: The unique identifier of the segment.\n- **Output:** Formatted text string with detailed segment information (distance, grade, elevation, location, stars, efforts, etc.), respecting user's measurement preference.\n- **Errors:** Missing/invalid token, Invalid `segmentId`, Strava API errors.\n\n---\n\n### `explore-segments`\n\nSearches for popular segments within a given geographical area (bounding box).\n\n- **When to use:** When the user wants to find or discover segments in a specific geographic area, optionally filtering by activity type or climb category.\n- **Parameters:**\n  - `bounds` (required):\n    - Type: `string`\n    - Description: Comma-separated: `south_west_lat,south_west_lng,north_east_lat,north_east_lng`.\n  - `activityType` (optional):\n    - Type: `string` (`\"running\"` or `\"riding\"`)\n    - Description: Filter by activity type.\n  - `minCat` (optional):\n    - Type: `number` (0-5)\n    - Description: Minimum climb category. Requires `activityType: 'riding'`.\n  - `maxCat` (optional):\n    - Type: `number` (0-5)\n    - Description: Maximum climb category. Requires `activityType: 'riding'`.\n- **Output:** Formatted text list of found segments (Name, ID, Climb Cat, Distance, Grade, Elevation).\n- **Errors:** Missing/invalid token, Invalid `bounds` format, Invalid filter combination, Strava API errors.\n\n---\n\n### `star-segment`\n\nStars or unstars a specific segment for the authenticated athlete.\n\n- **When to use:** When the user explicitly asks to star, favorite, unstar, or unfavorite a specific segment identified by its ID.\n- **Parameters:**\n  - `segmentId` (required):\n    - Type: `number`\n    - Description: The unique identifier of the segment.\n  - `starred` (required):\n    - Type: `boolean`\n    - Description: `true` to star, `false` to unstar.\n- **Output:** Success message confirming the action and the segment's new starred status.\n- **Errors:** Missing/invalid token, Invalid `segmentId`, Strava API errors (e.g., segment not found, rate limit).\n\n- **Notes:**\n  - Requires `profile:write` scope for star-ing and unstar-ing segments\n\n---\n\n### `get-segment-effort`\n\nFetches detailed information about a specific segment effort using its ID.\n\n- **When to use:** When the user asks for details about a *specific* segment effort identified by its ID.\n- **Parameters:**\n  - `effortId` (required):\n    - Type: `number`\n    - Description: The unique identifier of the segment effort.\n- **Output:** Formatted text string with detailed effort information (segment name, activity ID, time, distance, HR, power, rank, etc.).\n- **Errors:** Missing/invalid token, Invalid `effortId`, Strava API errors.\n\n---\n\n### `list-segment-efforts`\n\nLists the authenticated athlete's efforts on a given segment, optionally filtered by date.\n\n- **When to use:** When the user asks to list their efforts or attempts on a specific segment, possibly within a date range.\n- **Parameters:**\n  - `segmentId` (required):\n    - Type: `number`\n    - Description: The ID of the segment.\n  - `startDateLocal` (optional):\n    - Type: `string` (ISO 8601 format)\n    - Description: Filter efforts starting after this date-time.\n  - `endDateLocal` (optional):\n    - Type: `string` (ISO 8601 format)\n    - Description: Filter efforts ending before this date-time.\n  - `perPage` (optional):\n    - Type: `number`\n    - Description: Number of results per page.\n    - Default: 30\n- **Output:** Formatted text list of matching segment efforts.\n- **Errors:** Missing/invalid token, Invalid `segmentId`, Invalid date format, Strava API errors.\n\n---\n\n### `list-athlete-routes`\n\nLists the routes created by the authenticated athlete.\n\n- **When to use:** When the user asks to see the routes they have created or saved.\n- **Parameters:**\n  - `page` (optional):\n    - Type: `number`\n    - Description: Page number for pagination.\n  - `perPage` (optional):\n    - Type: `number`\n    - Description: Number of routes per page.\n    - Default: 30\n- **Output:** Formatted text list of routes (Name, ID, Type, Distance, Elevation, Date).\n- **Errors:** Missing/invalid token, Strava API errors.\n\n---\n\n### `get-route`\n\nFetches detailed information for a specific route using its ID.\n\n- **When to use:** When the user asks for details about a *specific* route identified by its ID.\n- **Parameters:**\n  - `routeId` (required):\n    - Type: `number`\n    - Description: The unique identifier of the route.\n- **Output:** Formatted text string with route details (Name, ID, Type, Distance, Elevation, Est. Time, Description, Segment Count).\n- **Errors:** Missing/invalid token, Invalid `routeId`, Strava API errors.\n\n---\n\n### `export-route-gpx`\n\nExports a specific route in GPX format and saves it locally.\n\n- **When to use:** When the user explicitly asks to export or save a specific route as a GPX file.\n- **Prerequisite:** The `ROUTE_EXPORT_PATH` environment variable must be correctly configured on the server.\n- **Parameters:**\n  - `routeId` (required):\n    - Type: `number`\n    - Description: The unique identifier of the route.\n- **Output:** Success message indicating the save location, or an error message.\n- **Errors:** Missing/invalid token, Missing/invalid `ROUTE_EXPORT_PATH`, File system errors (permissions, disk space), Invalid `routeId`, Strava API errors.\n\n---\n\n### `export-route-tcx`\n\nExports a specific route in TCX format and saves it locally.\n\n- **When to use:** When the user explicitly asks to export or save a specific route as a TCX file.\n- **Prerequisite:** The `ROUTE_EXPORT_PATH` environment variable must be correctly configured on the server.\n- **Parameters:**\n  - `routeId` (required):\n    - Type: `number`\n    - Description: The unique identifier of the route.\n- **Output:** Success message indicating the save location, or an error message.\n- **Errors:** Missing/invalid token, Missing/invalid `ROUTE_EXPORT_PATH`, File system errors (permissions, disk space), Invalid `routeId`, Strava API errors.\n\n---\n\n### `get-activity-streams`\n\nRetrieves detailed time-series data streams from a Strava activity, perfect for analyzing workout metrics, visualizing routes, or performing detailed activity analysis.\n\n- **When to use:** When you need detailed time-series data from an activity for:\n  - Analyzing workout intensity through heart rate zones\n  - Calculating power metrics for cycling activities\n  - Visualizing route data using GPS coordinates\n  - Analyzing pace and elevation changes\n  - Detailed segment analysis\n\n- **Parameters:**\n  - `id` (required):\n    - Type: `number | string`\n    - Description: The Strava activity identifier to fetch streams for\n  - `types` (optional):\n    - Type: `array`\n    - Default: `['time', 'distance', 'heartrate', 'cadence', 'watts']`\n    - Available types:\n      - `time`: Time in seconds from start\n      - `distance`: Distance in meters from start\n      - `latlng`: Array of [latitude, longitude] pairs\n      - `altitude`: Elevation in meters\n      - `velocity_smooth`: Smoothed speed in meters/second\n      - `heartrate`: Heart rate in beats per minute\n      - `cadence`: Cadence in revolutions per minute\n      - `watts`: Power output in watts\n      - `temp`: Temperature in Celsius\n      - `moving`: Boolean indicating if moving\n      - `grade_smooth`: Road grade as percentage\n  - `resolution` (optional):\n    - Type: `string`\n    - Values: `'low'` (~100 points), `'medium'` (~1000 points), `'high'` (~10000 points)\n    - Description: Data resolution/density\n  - `series_type` (optional):\n    - Type: `string`\n    - Values: `'time'` or `'distance'`\n    - Default: `'distance'`\n    - Description: Base series type for data point indexing\n  - `page` (optional):\n    - Type: `number`\n    - Default: 1\n    - Description: Page number for paginated results\n  - `points_per_page` (optional):\n    - Type: `number`\n    - Default: 100\n    - Special value: `-1` returns ALL data points split into multiple messages\n    - Description: Number of data points per page\n\n- **Output Format:**\n  1. Metadata:\n     - Available stream types\n     - Total data points\n     - Resolution and series type\n     - Pagination info (current page, total pages)\n  2. Statistics (where applicable):\n     - Heart rate: max, min, average\n     - Power: max, average, normalized power\n     - Speed: max and average in km/h\n  3. Stream Data:\n     - Formatted time-series data for each requested stream\n     - Human-readable formats (e.g., formatted time, km/h for speed)\n     - Consistent numeric precision\n     - Labeled data points\n\n- **Example Request:**\n  ```json\n  {\n    \"id\": 12345678,\n    \"types\": [\"time\", \"heartrate\", \"watts\", \"velocity_smooth\", \"cadence\"],\n    \"resolution\": \"high\",\n    \"points_per_page\": 100,\n    \"page\": 1\n  }\n  ```\n\n- **Special Features:**\n  - Smart pagination for large datasets\n  - Complete data retrieval mode (points_per_page = -1)\n  - Rich statistics and metadata\n  - Formatted output for both human and LLM consumption\n  - Automatic unit conversions\n\n- **Notes:**\n  - Requires activity:read scope\n  - Not all streams are available for all activities\n  - Older activities might have limited data\n  - Large activities are automatically paginated\n  - Stream availability depends on recording device and activity type\n\n- **Errors:**\n  - Missing/invalid token\n  - Invalid activity ID\n  - Insufficient permissions\n  - Unavailable stream types\n  - Invalid pagination parameters\n\n---\n\n### `get-activity-laps`\n\nRetrieves the laps recorded for a specific Strava activity.\n\n- **When to use:**\n  - Analyze performance variations across different segments (laps) of an activity.\n  - Compare lap times, speeds, heart rates, or power outputs.\n  - Understand how an activity was structured (e.g., interval training).\n\n- **Parameters:**\n  - `id` (required):\n    - Type: `number | string`\n    - Description: The unique identifier of the Strava activity.\n\n- **Output Format:**\n  A text summary detailing each lap, including:\n  - Lap Index\n  - Lap Name (if available)\n  - Elapsed Time (formatted as HH:MM:SS)\n  - Moving Time (formatted as HH:MM:SS)\n  - Distance (in km)\n  - Average Speed (in km/h)\n  - Max Speed (in km/h)\n  - Total Elevation Gain (in meters)\n  - Average Heart Rate (if available, in bpm)\n  - Max Heart Rate (if available, in bpm)\n  - Average Cadence (if available, in rpm)\n  - Average Watts (if available, in W)\n\n- **Example Request:**\n  ```json\n  {\n    \"id\": 1234567890\n  }\n  ```\n\n- **Example Response Snippet:**\n  ```text\n  Activity Laps Summary (ID: 1234567890):\n\n  Lap 1: Warmup Lap\n    Time: 15:02 (Moving: 14:35)\n    Distance: 5.01 km\n    Avg Speed: 20.82 km/h\n    Max Speed: 35.50 km/h\n    Elevation Gain: 50.2 m\n    Avg HR: 135.5 bpm\n    Max HR: 150 bpm\n    Avg Cadence: 85.0 rpm\n\n  Lap 2: Interval 1\n    Time: 05:15 (Moving: 05:10)\n    Distance: 2.50 km\n    Avg Speed: 29.03 km/h\n    Max Speed: 42.10 km/h\n    Elevation Gain: 10.1 m\n    Avg HR: 168.2 bpm\n    Max HR: 175 bpm\n    Avg Cadence: 92.1 rpm\n    Avg Power: 280.5 W (Sensor)\n\n  ...\n  ```\n\n- **Notes:**\n  - Requires `activity:read` scope for public/followers activities, `activity:read_all` for private activities.\n  - Lap data availability depends on the recording device and activity type (e.g., manual activities may not have laps).\n\n- **Errors:**\n  - Missing/invalid token\n  - Invalid activity ID\n  - Insufficient permissions\n  - Activity not found\n\n---\n\n### `get-athlete-zones`\n\nRetrieves the authenticated athlete's configured heart rate and power zones.\n\n- **When to use:** When the user asks about their heart rate zones, power zones, or training zone settings.\n- **Parameters:** None\n- **Output Format:**\n  Returns two text blocks:\n  1.  A **formatted summary** detailing configured zones:\n      - Heart Rate Zones: Custom status, Zone ranges, Time Distribution (if available)\n      - Power Zones: Zone ranges, Time Distribution (if available)\n  2.  The **complete raw JSON data** as returned by the Strava API.\n- **Example Response Snippet (Summary):**\n  ```text\n  **Athlete Zones:**\n\n  ❤️ **Heart Rate Zones**\n     Custom Zones: No\n     Zone 1: 0 - 115 bpm\n     Zone 2: 115 - 145 bpm\n     Zone 3: 145 - 165 bpm\n     Zone 4: 165 - 180 bpm\n     Zone 5: 180+ bpm\n\n  ⚡ **Power Zones**\n     Zone 1: 0 - 150 W\n     Zone 2: 151 - 210 W\n     Zone 3: 211 - 250 W\n     Zone 4: 251 - 300 W\n     Zone 5: 301 - 350 W\n     Zone 6: 351 - 420 W\n     Zone 7: 421+ W\n     Time Distribution:\n       - 0-50: 0:24:58\n       - 50-100: 0:01:02\n       ...\n       - 450-∞: 0:05:43\n  ```\n- **Notes:**\n  - Requires `profile:read_all` scope.\n  - Zones might not be configured for all athletes.\n- **Errors:**\n  - Missing/invalid token\n  - Insufficient permissions (Missing `profile:read_all` scope - 403 error)\n  - Subscription Required (Potentially, if Strava changes API access)\n\n---\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details. (Assuming MIT, update if different)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sports",
        "api",
        "strava",
        "accessing sports",
        "sports tools",
        "strava api"
      ]
    },
    "willvelida--mcp-afl-server": {
      "owner": "willvelida",
      "name": "mcp-afl-server",
      "url": "https://github.com/willvelida/mcp-afl-server",
      "imageUrl": "",
      "description": "MCP server that integrates with the Squiggle API to provide information on Australian Football League teams, ladder standings, results, tips, and power rankings.",
      "stars": 10,
      "forks": 3,
      "license": "MIT License",
      "language": "C#",
      "updated_at": "2025-09-23T18:01:47Z",
      "readme_content": "# 🏈 AFL (Australian Football League) MCP Server\n\nThis is a Model Context Protocol (MCP) server that provides AFL (Australian Football League) data from the Squiggle API. It allows you to retrieve information about past AFL games, current and past standings, team information, power rankings, tips, and projections.\n\n[![.NET](https://img.shields.io/badge/.NET-9.0-512BD4?style=flat-square&logo=dotnet&logoColor=white)](https://dotnet.microsoft.com/download/dotnet/9.0)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](LICENSE)\n[![MCP](https://img.shields.io/badge/MCP-Compatible-green.svg?style=flat-square)](https://modelcontextprotocol.io)\n\n## ✨ Features\n\nThis MCP Server offers comprehensive access to AFL data, providing tools for:\n\n- 🏆 Retrieving current AFL standings\n- 📊 Retrieving past AFL standings by round and year\n- 🎯 Retrieving results from particular games or rounds\n- 👥 Retrieving basic information about teams\n- 📅 Retrieving lists of teams who played in particular seasons\n- 🔮 Getting tips and predictions for games\n- 📈 Accessing power rankings and projected ladders\n- 🔍 Managing data sources and configurations\n\n## 📋 Prerequisites\n\n- [.NET 9.0](https://dotnet.microsoft.com/download/dotnet/9.0) or later\n- A Model Context Protocol (MCP) compatible client (e.g., Claude for Desktop)\n- Internet connection for accessing the Squiggle API\n\n## ⚡ Quick Install\n\n### 🎯 Claude Desktop Integration\n\n1. Edit the Claude for Desktop config file:\n   - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the server configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"mcp-afl-server\": {\n            \"command\": \"dotnet\",\n            \"args\": [\n                \"run\",\n                \"--project\",\n                \"C:\\\\path\\\\to\\\\mcp-afl-server\\\\src\",\n                \"--no-build\"\n            ]\n        }\n    }\n}\n```\n\n## 🚀 What can you do with the AFL MCP Server?\n\nHere are some example prompts you can try once connected:\n\n### 🏆 Current Season Information\n\n- \"What are the current AFL standings?\"\n- \"Show me the results from Round 10, 2024\"\n- \"Get information about the Richmond Tigers\"\n- \"List all teams that played in the 2024 season\"\n\n### 📊 Historical Data\n\n- \"What were the standings after Round 15 in 2023?\"\n- \"Show me all results from Round 1, 2022\"\n- \"Get the result of a specific game\"\n\n### 🔮 Tips & Predictions\n\n- \"What are the current tips for upcoming games?\"\n- \"Show me tips for Round 5, 2024\"\n- \"Get tips for a specific game\"\n\n### 📈 Advanced Analytics\n\n- \"Show me the power rankings for Round 20, 2023\"\n- \"Get the projected ladder for Round 15, 2024\"\n- \"List all available data sources\"\n\n## 📡 Squiggle API\n\nThis server uses the Squiggle API to retrieve AFL data. The API provides comprehensive methods to fetch:\n\n- 🎯 Live scores and fixtures\n- 📊 Historical match results\n- 👥 Team information and statistics\n- 🏆 Ladder positions and standings\n- 🔮 Tips and predictions\n- 📈 Power rankings and projections\n\nPlease use the API responsibly! All information about proper usage can be found at [api.squiggle.com.au](api.squiggle.com.au).\n\n## 🛠️ MCP Tools\n\nThe server exposes the following tools through the Model Context Protocol:\n\n### 🎯 Game Information\n\n| **Tool** | **Description** |\n|:--------:|:---------------:|\n| `GetGameResult` | Gets result from a played game |\n| `GetRoundResultsByYear` | Get the results from a round of a particular year |\n\n### 🏆 Standings Information\n\n| **Tool** | **Description** |\n|:--------:|:---------------:|\n| `GetCurrentStandings` | Gets the current standings of the AFL |\n| `GetStandingsByRoundAndYear` | Get the standings for a particular round and year |\n\n### 👥 Team Information\n\n| **Tool** | **Description** |\n|:--------:|:---------------:|\n| `GetTeamInfo` | Gets information for an AFL team |\n| `GetTeamsBySeason` | Gets a list of teams who played in a particular season |\n\n### 🔮 Tips & Predictions\n\n| **Tool** | **Description** |\n|:--------:|:---------------:|\n| `GetFutureTips` | Get the tips for current and future games |\n| `GetTipsByGame` | Get the tips of a particular game |\n| `GetTipsByRoundAndYear` | Get the tips for a particular round and year |\n\n### 📈 Power Rankings & Projections\n\n| **Tool** | **Description** |\n|:--------:|:---------------:|\n| `GetPowerRankingByRoundAndYear` | Get Power Ranking by Round and Year |\n| `GetPowerRankingByRoundYearAndSource` | Get Power Ranking by Round, Year, and Model Source |\n| `GetTeamPowerRankingByRoundAndYear` | Get Power Ranking for Team by Round, Year, and Model Source |\n| `GetProjectedLadderByRoundAndYear` | Get the projected ladder for a particular round and year |\n| `GetProjectedLadderByRoundAndYearBySource` | Get the projected ladder by source for a particular round and year |\n\n### 🔍 Sources & Configuration\n\n| **Tool** | **Description** |\n|:--------:|:---------------:|\n| `GetSources` | Gets a list of sources |\n| `GetSourceById` | Gets a source |\n\n## 📜 License\n\nThis project is licensed under the [MIT License](LICENSE) - see the LICENSE file for details.\n\n## 💬 Feedback\n\nWe're building this in the open and your feedback is much appreciated! \n\n🐛 [Report a bug or request a feature](https://github.com/willvelida/mcp-afl-server/issues/new)\n\nYour input helps shape the future of the AFL MCP Server and makes it better for everyone in the AFL community.\n\n## 🏈 About AFL\n\nThe Australian Football League (AFL) is the premier professional Australian rules football competition in Australia. This server provides programmatic access to comprehensive AFL data to enhance your analysis, applications, and understanding of the game.\n\n---\n\n**Built with ❤️ for the AFL community**",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "afl",
        "sports",
        "api",
        "afl server",
        "accessing sports",
        "sports tools"
      ]
    }
  }
}