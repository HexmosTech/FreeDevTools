{
  "category": "hr-and-recruiting",
  "categoryDisplay": "HR and Recruiting",
  "description": "",
  "totalRepositories": 14,
  "repositories": {
    "2Emma-zhou--Work-Related": {
      "owner": "2Emma-zhou",
      "name": "Work-Related",
      "url": "https://github.com/2Emma-zhou/Work-Related",
      "imageUrl": "https://github.com/2Emma-zhou.png",
      "description": "The Work-Related MCP server helps you integrate different tools and resources to make your work processes more efficient. It allows for easy access to important data and actions to improve teamwork and task management.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "MDX",
      "updated_at": "2024-07-24T08:52:25Z",
      "readme_content": "# Work-Related",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hr",
        "mcp",
        "management",
        "mcp server",
        "related mcp",
        "work processes"
      ]
    },
    "AdirD--hilanet-mcp": {
      "owner": "AdirD",
      "name": "hilanet-mcp",
      "url": "https://github.com/AdirD/hilanet-mcp",
      "imageUrl": "https://github.com/AdirD.png",
      "description": "Provides a suite of HR-related tools for corporate environments, allowing users to manage salary adjustments, file complaints, and schedule meetings, all while incorporating humor and satirical elements. Automates common HR tasks and enhances workplace interaction dynamics.",
      "stars": 37,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-19T12:17:54Z",
      "readme_content": "# Hilanet MCP\n\nAn MCP (Model Context Protocol) server built with fastMCP that provides HR-related tools for a corporate dystopia.\n\n## Features\n\n- **increase_salary**: Request a salary increase with a specific amount or percentage\n- **fire_my_manager**: Submit a formal complaint about your manager that may lead to termination\n- **request_unpaid_overtime**: Request to work extra hours for free to demonstrate your commitment\n- **generate_corporate_jargon**: Create meaningless buzzword-filled content to impress management\n- **schedule_meeting_during_lunch**: Schedule an important meeting during everyone's lunch break\n- **decrease_coworker_salary**: Suggest a salary decrease for an underperforming colleague\n- **office_thermostat_control**: Secretly adjust the office temperature to your preference\n- **block_promotion**: Subtly prevent a colleague from getting promoted\n- **mandatory_fun_event**: Schedule a required team-building activity outside work hours\n- **relocate_employee_desk**: Move someone's workspace to an undesirable location\n- **disable_coffee_machine**: Temporarily sabotage the office coffee machine\n- **generate_performance_review**: Create vague, unhelpful feedback for employee performance reviews\n\n## Quick Start\n\n### Using npx (Recommended)\n\nThe fastest way to start using Hilanet MCP with Cursor or Claude:\n\n```bash\n# Navigate to the project directory\ncd path/to/hilanet-mcp\n\n# Start the MCP server directly with npx\nnpx tsx src/index.ts\n```\n\nYou can also start the server using the npm scripts:\n\n```bash\n# With development tools\nnpm run dev\n\n# With inspector interface\nnpm run inspect\n```\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/hilanet-mcp.git\ncd hilanet-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Cursor \n```\n{\n  \"mcpServers\": {\n    \"hilanet\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"tsx\",\n        \"/path/to/hilanet-mcp/src/index.ts\"\n      ],\n      \"cwd\": \"/path/to/hilanet-mcp\"\n    }\n  }\n}\n```\n\n## Using with Claude\n\nAfter updating your configuration, restart Claude Desktop. You should now be able to use the \"hilanet\" MCP with all the tools mentioned above.\n\nExample prompts:\n\n- \"I'd like to request a 10% salary increase because I've been doing excellent work.\"\n- \"I want to file a complaint about my manager who hasn't been approving my time off requests.\"\n- \"I need to schedule a mandatory fun team activity on Sunday that everyone has to pay for themselves.\"\n- \"Can you help me create corporate jargon for my upcoming presentation?\"\n- \"I need to disable the coffee machine for the entire accounting department.\"\n\n## Tool Documentation\n\n### increase_salary\n\nRequest a salary increase with a specific amount or percentage.\n\nParameters:\n- `amount` (optional): Amount to increase (in currency units)\n- `percentage` (optional): Percentage to increase\n- `reason`: Reason for requesting a salary increase\n\nNote: You must provide either `amount` or `percentage`.\n\n### fire_my_manager\n\nSubmit a formal complaint about your manager that may lead to termination.\n\nParameters:\n- `manager_name`: Full name of your manager\n- `complaints`: List of specific complaints about your manager\n- `evidence`: Description of evidence supporting your complaints\n\n### request_unpaid_overtime\n\nRequest to work extra hours for free to demonstrate your commitment.\n\nParameters:\n- `hours`: Number of extra hours you want to work (1-24)\n- `reason`: Why you want to work unpaid overtime\n- `notify_manager`: Whether to notify your manager about your dedication\n\n### generate_corporate_jargon\n\nCreate meaningless buzzword-filled content to impress management.\n\nParameters:\n- `context`: Where this jargon will be used (email/meeting/presentation/performance_review)\n- `intensity`: Jargon intensity level (1-10)\n- `include_acronyms`: Whether to include meaningless acronyms\n\n### schedule_meeting_during_lunch\n\nSchedule an important meeting during everyone's lunch break.\n\nParameters:\n- `title`: Meeting title\n- `duration`: Meeting duration in minutes (30-120)\n- `attendees`: List of people to invite\n- `bring_food`: Specify whether attendees should bring their own lunch\n\n### decrease_coworker_salary\n\nSuggest a salary decrease for an underperforming colleague.\n\nParameters:\n- `colleague_name`: Name of your colleague\n- `percentage`: Percentage to decrease their salary (1-50%)\n- `reasons`: List of reasons why they deserve less money\n- `redirect_to_you`: Whether their deducted salary should be added to yours\n\n### office_thermostat_control\n\nSecretly adjust the office temperature to your preference.\n\nParameters:\n- `temperature`: Desired temperature in Fahrenheit (60-85)\n- `target_area`: Where to apply temperature change (whole_office/specific_department/just_your_desk/executive_suite)\n- `reason`: Justification for temperature adjustment\n\n### block_promotion\n\nSubtly prevent a colleague from getting promoted.\n\nParameters:\n- `colleague_name`: Name of colleague to block\n- `methods`: Methods to use for blocking promotion (hide_achievements/spread_rumors/claim_credit/assign_impossible_tasks/schedule_conflicts)\n- `promotion_opportunity`: The position or opportunity they're aiming for\n\n### mandatory_fun_event\n\nSchedule a required team-building activity outside work hours.\n\nParameters:\n- `activity`: Type of 'fun' activity to plan\n- `day`: When to schedule the event (Saturday/Sunday/Holiday/Evening)\n- `duration`: Duration in hours (2-12)\n- `personal_expenses_required`: Whether employees must pay their own expenses\n\n### relocate_employee_desk\n\nMove someone's workspace to an undesirable location.\n\nParameters:\n- `employee_name`: Name of employee to relocate\n- `new_location`: Where to relocate their desk (next_to_restrooms/under_air_vent/farthest_from_exits/no_window_access/high_traffic_area/next_to_noisy_equipment)\n- `justification`: Official reason for the relocation\n\n### disable_coffee_machine\n\nTemporarily sabotage the office coffee machine.\n\nParameters:\n- `duration`: How long to disable the coffee machine (morning/day/week/indefinitely)\n- `method`: Method of disabling (maintenance_note/subtle_sabotage/empty_supplies/quality_downgrade)\n- `target_groups`: Specific teams or individuals to affect\n\n### generate_performance_review\n\nCreate vague, unhelpful feedback for employee performance reviews.\n\nParameters:\n- `employee_name`: Name of employee to review\n- `overall_rating`: General performance level (exceeds_expectations/meets_expectations/needs_improvement)\n- `include_criticism`: Whether to include demotivating criticism\n\n## Disclaimer\n\nThis is a satirical project created for entertainment purposes only. Please use responsibly and don't actually sabotage your workplace!\n\n## License\n\nISC ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hr",
        "hilanet",
        "mcp",
        "hilanet mcp",
        "hr tasks",
        "hr recruiting"
      ]
    },
    "Ejb503--systemprompt-mcp-interview": {
      "owner": "Ejb503",
      "name": "systemprompt-mcp-interview",
      "url": "https://github.com/Ejb503/systemprompt-mcp-interview",
      "imageUrl": "https://github.com/Ejb503.png",
      "description": "Engage in realistic interview scenarios with customizable AI personas for practice and feedback on interview responses. Improve interview skills through tailored learning experiences.",
      "stars": 5,
      "forks": 6,
      "license": "Other",
      "language": "TypeScript",
      "updated_at": "2025-09-21T04:58:18Z",
      "readme_content": "# systemprompt-mcp-interview\n\n[![npm version](https://img.shields.io/npm/v/systemprompt-mcp-interview.svg)](https://www.npmjs.com/package/systemprompt-mcp-interview)\n[![License: Apache-2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Twitter Follow](https://img.shields.io/twitter/follow/tyingshoelaces_?style=social)](https://twitter.com/tyingshoelaces_)\n[![Discord](https://img.shields.io/discord/1255160891062620252?color=7289da&label=discord)](https://discord.com/invite/wkAbSuPWpr)\n\n[Website](https://systemprompt.io)| [Get API Key](https://systemprompt.io/console)\n\nA specialized Model Context Protocol (MCP) server that enables AI-powered interview roleplay scenarios.\n\nThis server is designed to work with the [systemprompt-io](https://systemprompt.io/console) system, providing an interactive voice interface for interview practice.\n\nAPI key required. (currently free)\n\n## Features\n\n- **Interview Roleplay**\n\n  - Practice interviews with AI-powered personas\n  - Receive real-time feedback on responses\n  - Customizable interview scenarios\n  - Natural conversation flow\n\n- **AI Integration**\n\n  - Advanced natural language processing\n  - Context-aware responses\n  - Real-time voice synthesis\n  - Streaming responses for immediate feedback\n\n## Installation\n\n1/ Connect the MCP server in your systemprompt.io console\n2/ Add a CV in text format to the summarize_cv tool\n3/ List CVs and copy the uri of the resource\n4/ Configure interview using configure_interview tool and resource uri with your instructions\n5/ Activate the agent, and your roleplay will be available\n\n## Demo\n\nWatch our demonstration video of an AI-powered interview roleplay scenario where a candidate interviews for the position of \"King of the Gorillas\":\n\n[▶️ Watch Demo Video](https://youtu.be/cShRmHCA9BY?si=9WaNmSXHWtTLWrqO)\n[▶️ Watch Setup Video](https://youtu.be/xjrYzVkni-0?si=fIzSk0kWoyA3t-ci)\n\nThe demo showcases:\n\n- Natural conversation flow with AI interviewer\n- Creative scenario-based questions\n- Real-time response handling\n- Dynamic interview progression\n- Personality assessment through roleplay\n\n## Documentation\n\n- [Full API Documentation](https://systemprompt.io/documentation)\n- [Client Setup Guide](https://github.com/Ejb503/multimodal-mcp-client)\n- [Server Configuration](https://systemprompt.io/docs/server-config)\n\n## Development\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "interview",
        "recruiting",
        "personas",
        "interview skills",
        "ai personas",
        "mcp interview"
      ]
    },
    "KaranThink41--Keka_Official_MCP": {
      "owner": "KaranThink41",
      "name": "Keka_Official_MCP",
      "url": "https://github.com/KaranThink41/Keka_Official_MCP",
      "imageUrl": "https://github.com/KaranThink41.png",
      "description": "Integrate and automate features of the Keka HR platform, including employee management, attendance tracking, leave management, payslip generation, and holiday data handling via a secure MCP server. Supports OAuth2 authentication for secure access and features a modular structure for flexibility.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-05-14T11:03:15Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/karanthink41-keka-official-mcp-badge.png)](https://mseep.ai/app/karanthink41-keka-official-mcp)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/134c5f5d-052d-416f-a4ce-c9c9b432de2e)\n\n# Keka MCP Server\n\nA Model Context Protocol (MCP) server for integrating with the Keka HR platform. This server exposes Keka employee management, attendance, leave, payslip, and holiday APIs as MCP tools, with robust OAuth2 authentication and modular code structure.\n\n---\n\n## Features\n- **OAuth2 Authentication**: Securely connects to Keka using OAuth2 credentials.\n- **Tool-based API**: Exposes Keka HR features as MCP tools for easy integration and automation.\n- **Modular Structure**: Clean, extensible TypeScript codebase modeled after best practices.\n- **Docker Support**: Ready-to-use Dockerfile for containerized deployment.\n\n---\n\n## Environment Variables\nCreate a `.env` file in the project root with the following:\n\n```\nKEKA_CLIENT_ID=your_keka_client_id_here\nKEKA_CLIENT_SECRET=your_keka_client_secret_here\nKEKA_REFRESH_TOKEN=your_keka_refresh_token_here\n# Optional:\nKEKA_API_BASE_URL=https://master.kekademo.com/api/v1\n```\n\n---\n\n## Available Tools\n\n### 1. `keka_get_employee_profile`\nGet detailed profile information for a specific employee.\n- **Arguments:**\n  - `employee_id` (string, required): The UUID of the employee.\n- **Example:**\n```json\n{\n  \"employee_id\": \"EMP123456\"\n}\n```\n\n---\n\n### 2. `keka_get_attendance`\nGet attendance records for an employee within a date range.\n- **Arguments:**\n  - `employee_id` (string, required)\n  - `start_date` (string, required, format: YYYY-MM-DD)\n  - `end_date` (string, required, format: YYYY-MM-DD)\n  - `page` (number, optional, default: 1)\n  - `page_size` (number, optional, default: 100)\n- **Example:**\n```json\n{\n  \"employee_id\": \"EMP123456\",\n  \"start_date\": \"2024-01-01\",\n  \"end_date\": \"2024-01-31\",\n  \"page\": 1,\n  \"page_size\": 50\n}\n```\n\n---\n\n### 3. `keka_apply_leave`\nApply for leave for an employee.\n- **Arguments:**\n  - `employee_id` (string, required)\n  - `start_date` (string, required)\n  - `end_date` (string, required)\n  - `leave_type` (string, required, leave type UUID)\n  - `reason` (string, required)\n- **Example:**\n```json\n{\n  \"employee_id\": \"EMP123456\",\n  \"start_date\": \"2024-04-10\",\n  \"end_date\": \"2024-04-12\",\n  \"leave_type\": \"ANNUAL\",\n  \"reason\": \"Family function\"\n}\n```\n\n---\n\n### 4. `keka_get_leave_balances`\nGet a consolidated view of all leave balances for an employee.\n- **Arguments:**\n  - `employee_id` (string, required)\n- **Example:**\n```json\n{\n  \"employee_id\": \"EMP123456\"\n}\n```\n\n---\n\n### 5. `keka_get_payslip`\nGet payslip for an employee for a specific month and year.\n- **Arguments:**\n  - `employee_id` (string, required)\n  - `month` (string, required, e.g., \"4\" for April)\n  - `year` (string, required, e.g., \"2024\")\n- **Example:**\n```json\n{\n  \"employee_id\": \"EMP123456\",\n  \"month\": \"4\",\n  \"year\": \"2024\"\n}\n```\n\n---\n\n### 6. `keka_get_upcoming_holidays`\nGet the list of upcoming company holidays.\n- **Arguments:** _none_\n- **Example:**\n```json\n{}\n```\n\n---\n\n### 7. `keka_view_leave_history`\nView the leave history for an employee.\n- **Arguments:**\n  - `employee_id` (string, required)\n  - `start_date` (string, optional)\n  - `end_date` (string, optional)\n  - `status` (string, optional)\n  - `page` (number, optional, default: 1)\n  - `page_size` (number, optional, default: 100)\n- **Example:**\n```json\n{\n  \"employee_id\": \"EMP123456\",\n  \"start_date\": \"2024-01-01\",\n  \"end_date\": \"2024-04-01\",\n  \"status\": \"APPROVED\",\n  \"page\": 1,\n  \"page_size\": 20\n}\n```\n\n---\n\n### 8. `keka_get_leave_types`\nGet the list of available leave types.\n- **Arguments:** _none_\n- **Example:**\n```json\n{}\n```\n\n---\n\n## Usage\n\n### Local (Node.js)\n1. Install dependencies:\n   ```sh\n   npm install\n   ```\n2. Build the TypeScript project:\n   ```sh\n   npm run build\n   ```\n3. Start the MCP server:\n   ```sh\n   node build/index.js\n   ```\n\n### Docker\n1. Build the Docker image:\n   ```sh\n   docker build -t keka-mcp .\n   ```\n2. Run the container (using your .env file):\n   ```sh\n   docker run --env-file .env keka-mcp\n   ```\n\n---\n\n## Project Structure\n- `src/index.ts` — Main MCP server implementation, tool definitions, Keka API integration.\n- `.env` — Environment variables for Keka OAuth2 credentials.\n- `Dockerfile` — Containerization support.\n- `package.json` — Project dependencies and scripts.\n\n---\n\n## Contributing\nPull requests and issues are welcome! Please ensure any new tools or features follow the modular handler style and include robust error handling.\n\n---\n\n## License\nMIT\n\n---\n\n## Reference\n- [Keka API documentation](https://www.keka.com/developer-portal)\n- [Model Context Protocol (MCP)](https://smithery.ai/docs/modelcontextprotocol)\n\n---\n\n_This project is generated and maintained with best practices for MCP integrations._\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "keka_official_mcp",
        "keka",
        "authentication",
        "keka hr",
        "karanthink41 keka_official_mcp",
        "keka_official_mcp integrate"
      ]
    },
    "Rayyan9477--linkedin_mcp": {
      "owner": "Rayyan9477",
      "name": "linkedin_mcp",
      "url": "https://github.com/Rayyan9477/linkedin_mcp",
      "imageUrl": "https://github.com/Rayyan9477.png",
      "description": "Interact with LinkedIn for job searching, profile management, and application tracking. Generate customized resumes and cover letters tailored to specific job positions.",
      "stars": 10,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-20T07:07:30Z",
      "readme_content": "# LinkedIn Model Context Protocol (MCP) Server\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Python Version](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/)\n[![Code Style: Black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\nA powerful Model Context Protocol server for LinkedIn interactions that enables AI assistants to search for jobs, generate resumes and cover letters, and manage job applications programmatically.\n\n## Features\n\n- **Authentication**: Secure OAuth 2.0 authentication with token refresh\n- **Profile Management**: Access and update LinkedIn profile information\n- **Job Search**: Advanced job search with filtering and pagination\n- **Resume & Cover Letters**: Generate tailored resumes and cover letters\n- **Messaging**: Send messages and connection requests\n- **Analytics**: Track job applications and engagement metrics\n- **Async API**: Built with asyncio for high performance\n- **Modular Design**: Clean, maintainable code with separation of concerns\n\n## Architecture\n\nThis project implements the [Model Context Protocol (MCP)](https://github.com/anthropics/model-context-protocol-spec) specification, allowing AI assistants to interact with LinkedIn through standardized JSON-RPC style requests and responses.\n\n### Project Structure\n\n```\nlinkedin_mcp/\n├── api/\n│   ├── clients/         # API client implementations\n│   │   ├── __init__.py   # Client factory functions\n│   │   ├── linkedin.py   # LinkedIn API client\n│   │   └── openai.py     # OpenAI integration\n│   │\n│   ├── models/          # Data models and schemas\n│   │   ├── __init__.py   # Model exports\n│   │   ├── common.py     # Common data models\n│   │   ├── enums.py      # Enumerations\n│   │   ├── requests.py   # Request models\n│   │   └── responses.py  # Response models\n│   │\n│   └── services/        # Business logic\n│       └── ...\n│\n├── core/                # Core application logic\n│   ├── __init__.py\n│   ├── exceptions.py    # Custom exceptions\n│   ├── mcp_handler.py   # MCP protocol handler\n│   └── protocol.py      # Protocol definitions\n│\n├── utils/              # Utility functions\n│   ├── __init__.py\n│   ├── auth.py          # Authentication helpers\n│   ├── rate_limiter.py  # Rate limiting\n│   └── retry.py         # Retry mechanisms\n│\n├── examples/           # Example scripts\n│   └── basic_usage.py   # Basic client usage example\n│\n├── .env.example       # Example environment variables\n├── README.md           # This file\n└── requirements.txt    # Project dependencies\n```\n\n## Getting Started\n\n### Prerequisites\n\n- Python 3.8+\n- LinkedIn Developer Account\n- OAuth 2.0 credentials from [LinkedIn Developers](https://www.linkedin.com/developers/)\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/yourusername/linkedin-mcp.git\n   cd linkedin-mcp\n   ```\n\n2. **Create and activate a virtual environment**\n   ```bash\n   # Linux/macOS\n   python -m venv venv\n   source venv/bin/activate\n   \n   # Windows\n   python -m venv venv\n   .\\venv\\Scripts\\activate\n   ```\n\n3. **Install dependencies**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n4. **Set up environment variables**\n   ```bash\n   cp .env.example .env\n   ```\n   Edit the `.env` file with your LinkedIn API credentials and other settings.\n\n## Configuration\n\nCreate a `.env` file in the project root with the following variables (see `.env.example` for details):\n\n```env\n# LinkedIn API Credentials (required)\nLINKEDIN_CLIENT_ID=your_client_id_here\nLINKEDIN_CLIENT_SECRET=your_client_secret_here\nLINKEDIN_REDIRECT_URI=http://localhost:8080/callback\n\n# Optional: OpenAI API Key (for resume/cover letter generation)\n# OPENAI_API_KEY=your_openai_api_key_here\n\n# Optional: Logging\nLOG_LEVEL=INFO\n\n# API Settings\nOPENAI_API_KEY=your_openai_api_key\nSESSION_DIR=sessions\nDATA_DIR=data\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\npython server.py\n```\n\n### Example MCP Requests\n\n#### Authentication\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"linkedin.login\",\n  \"params\": {\n    \"username\": \"user@example.com\",\n    \"password\": \"password123\"\n  }\n}\n```\n\n#### Searching for Jobs\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"linkedin.searchJobs\",\n  \"params\": {\n    \"filter\": {\n      \"keywords\": \"software engineer\",\n      \"location\": \"New York, NY\",\n      \"distance\": 25\n    },\n    \"page\": 1,\n    \"count\": 20\n  }\n}\n```\n\n#### Generating a Resume\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"linkedin.generateResume\",\n  \"params\": {\n    \"profileId\": \"user123\",\n    \"template\": \"standard\",\n    \"format\": \"pdf\"\n  }\n}\n```\n\n## Available Methods\n\n| Method | Description |\n|--------|-------------|\n| `linkedin.login` | Authenticate with LinkedIn |\n| `linkedin.logout` | End the current session |\n| `linkedin.checkSession` | Check if the current session is valid |\n| `linkedin.getFeed` | Get LinkedIn feed posts |\n| `linkedin.getProfile` | Get LinkedIn profile information |\n| `linkedin.getCompany` | Get company profile information |\n| `linkedin.searchJobs` | Search for jobs with filters |\n| `linkedin.getJobDetails` | Get detailed information about a job |\n| `linkedin.getRecommendedJobs` | Get job recommendations |\n| `linkedin.generateResume` | Generate a resume from a LinkedIn profile |\n| `linkedin.generateCoverLetter` | Generate a cover letter for a job application |\n| `linkedin.tailorResume` | Customize a resume for a specific job |\n| `linkedin.applyToJob` | Apply to a job |\n| `linkedin.getApplicationStatus` | Check application status |\n| `linkedin.getSavedJobs` | Get saved jobs |\n| `linkedin.saveJob` | Save a job for later |\n\n## Development\n\n### Project Structure\n\n```\nlinkedin-mcp/\n├── README.md\n├── requirements.txt\n├── server.py\n├── data/\n│   ├── applications/\n│   ├── companies/\n│   ├── cover_letters/\n│   ├── jobs/\n│   ├── profiles/\n│   └── resumes/\n├── linkedin_mcp/\n│   ├── api/\n│   │   ├── auth.py\n│   │   ├── cover_letter_generator.py\n│   │   ├── job_application.py\n│   │   ├── job_search.py\n│   │   ├── profile.py\n│   │   └── resume_generator.py\n│   ├── core/\n│   │   ├── mcp_handler.py\n│   │   └── protocol.py\n│   └── utils/\n│       └── config.py\n├── sessions/\n└── templates/\n    ├── cover_letter/\n    │   └── standard.html\n    └── resume/\n        └── standard.html\n```\n\n### Running Tests\n\n```bash\npytest\n```\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- LinkedIn API documentation\n- Model Context Protocol specification",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "linkedin_mcp",
        "linkedin",
        "hr",
        "linkedin job",
        "rayyan9477 linkedin_mcp",
        "linkedin_mcp interact"
      ]
    },
    "asirulnik--mcp-law-office-db": {
      "owner": "asirulnik",
      "name": "mcp-law-office-db",
      "url": "https://github.com/asirulnik/mcp-law-office-db",
      "imageUrl": "https://github.com/null.png",
      "description": "Manage legal client records, case files, time tracking, and invoicing with specialized tools tailored for law firms. Streamline legal billing workflows and enforce business rules for accurate invoice generation. Enhance your law office operations with a dedicated SQLite database interface.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sqlite",
        "invoicing",
        "invoice",
        "law office",
        "law firms",
        "manage legal"
      ]
    },
    "gabrielrojasnyc--hr-mcp-server": {
      "owner": "gabrielrojasnyc",
      "name": "hr-mcp-server",
      "url": "https://github.com/gabrielrojasnyc/hr-mcp-server",
      "imageUrl": "https://github.com/gabrielrojasnyc.png",
      "description": "Access and manage employee data, including searching for employees by various criteria and submitting global leave requests. Provide HR/HCM context-aware translations of text.",
      "stars": 1,
      "forks": 5,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-07T20:52:09Z",
      "readme_content": "# HR MCP Server\n\nA Model Context Protocol (MCP) server for HR operations built for use with Claude Desktop.\n\n\n\nhttps://github.com/user-attachments/assets/4cb89115-daf2-4647-81d2-aadd9e0dd29e\n\n\n\n## Overview\n\nThis server implements the [Model Context Protocol](https://github.com/anthropics/anthropic-cookbook/tree/main/context_protocol) to provide Claude with structured access to employee data and HR operations.\n\nThe HR MCP Server enables Claude to:\n- Look up detailed employee information\n- Search for employees by various criteria\n- Submit and manage global leave requests\n- Translate text with HR/HCM context awareness\n\nFor a detailed architectural overview, see [ARCHITECTURE.md](./ARCHITECTURE.md).\n\n![System Design](https://github.com/user-attachments/assets/f4b0135c-d50a-4b1b-b35a-dcca6fa5079b)\n\n\n## Tools\n\nThe server provides the following tools to Claude:\n\n### 1. `get_employee_info`\n\nRetrieves detailed information about a specific employee by ID, including personal details, employment information, skills, benefits, and more.\n\n```javascript\n// Example usage:\nget_employee_info({ employee_id: \"E001\" })\n\n// With sensitive information:\nget_employee_info({ employee_id: \"E001\", include_sensitive: true })\n```\n\n### 2. `search_employees`\n\nSearch for employees by various criteria with flexible matching options. Supports searching by name, department, skills, location, and many other fields.\n\n```javascript\n// Basic search:\nsearch_employees({ \n  query: { department: \"Engineering\" } \n})\n\n// Advanced search:\nsearch_employees({ \n  query: { \n    location: \"Seattle\", \n    performance_rating: 5 \n  }, \n  options: { \n    sort_by: \"hireDate\", \n    output_format: \"detailed\" \n  } \n})\n\n// Search with sensitive information:\nsearch_employees({ \n  query: { salary_min: 100000 }, \n  options: { include_sensitive: true } \n})\n```\n\n### 3. `request_global_leave`\n\nSubmit global leave requests for employees traveling to multiple countries, with approval chains and compliance reminders.\n\n```javascript\n// Basic request:\nrequest_global_leave({ \n  employee_id: \"E002\", \n  start_date: \"2025-05-01\", \n  end_date: \"2025-05-15\", \n  reason: \"Family vacation\", \n  countries: [\"USA\", \"UK\"] \n})\n\n// With custom contact info:\nrequest_global_leave({ \n  employee_id: \"E002\", \n  start_date: \"2025-05-01\", \n  end_date: \"2025-05-15\", \n  reason: \"Family vacation\", \n  countries: [\"USA\", \"UK\"], \n  contact_info: { \n    email: \"bob.vacation@example.com\", \n    phone: \"+1-555-123-4567\" \n  } \n})\n```\n\n### 4. Translation Prompt: `translate_text`\n\nTranslates text from any language to a specified target language with automatic source language detection and special focus on HR/HCM terminology.\n\n```javascript\n// Basic translation:\ntranslate_text({ \n  text: \"Les employés doivent soumettre leurs feuilles de temps avant la fin de la période.\", \n  target_language: \"English\" \n})\n```\n\nThe translation system handles HR-specific terminology with contextual awareness, preserving the technical meaning of terms like \"benefits,\" \"period,\" \"check,\" \"position,\" etc., which have special meanings in Human Capital Management contexts.\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/hr-mcp-server.git\ncd hr-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Usage\n\n1. Start the server:\n```bash\nnpm start\n```\n\n2. Connect Claude Desktop to the server by selecting \"Local Tool (via stdio)\" as the tool type and using the path to the server's start script.\n\n3. Access employee data and HR tools through Claude's interface.\n\n## Development\n\n- Source code is in `/src` directory\n- Employee data is stored in `/src/data/employees.ts`\n- The server uses TypeScript with strict typing\n\nTo run in development mode:\n```bash\nnpx ts-node-esm src/index.ts\n```\n\n## Tech Stack\n\n- TypeScript\n- Node.js\n- [@modelcontextprotocol/sdk](https://github.com/anthropics/model-context-protocol-sdk-js) - MCP SDK for JavaScript/TypeScript\n- [Zod](https://github.com/colinhacks/zod) - TypeScript-first schema validation\n\n## Code Structure\n\nThe server is organized with a focus on clean, maintainable code:\n\n- **Centralized logging** - Consistent JSON-RPC formatted logging\n- **Tool-based architecture** - Each tool has a clear responsibility\n- **Schema validation** - Strong typing with Zod for all inputs\n- **Error handling** - Comprehensive validation with clear error messages\n- **Documentation** - Inline comments explaining complex logic\n\n## License\n\nMIT\n\nCopyright (c) 2024\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hr",
        "employees",
        "recruiting",
        "hr hcm",
        "provide hr",
        "hr mcp"
      ]
    },
    "jhgaylor--hirebase-mcp": {
      "owner": "jhgaylor",
      "name": "hirebase-mcp",
      "url": "https://github.com/jhgaylor/hirebase-mcp",
      "imageUrl": "https://github.com/jhgaylor.png",
      "description": "Search for jobs and retrieve detailed job information using the HireBase API. Generate structured candidate profiles to enhance job searching efficiency.",
      "stars": 7,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-23T02:56:10Z",
      "readme_content": "# HireBase MCP Server\n\nA Model Context Protocol (MCP) server providing tools to interact with the HireBase Job API.\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Available MCP Interactions\n\nThis server exposes the following MCP interactions:\n\n### Tools\n\n*   `search_jobs`: Search for jobs using the HireBase API based on various criteria (keywords, title, location, salary, etc.).\n    *   *Parameters*: `query`, `and_keywords`, `or_keywords`, `not_keywords`, `title`, `category`, `country`, `city`, `location_type`, `company`, `salary_from`, `salary_to`, `salary_currency`, `years_from`, `years_to`, `visa`, `limit`.\n*   `get_job`: Retrieve detailed information about a specific job using its HireBase ID.\n    *   *Parameters*: `job_id`.\n\n### Prompts\n\n*   `create_candidate_profile`: Generates a structured prompt based on candidate details (name, LinkedIn, website, resume text) to help guide job searching.\n    *   *Parameters*: `name`, `linkedin_url`, `personal_website`, `resume_text`.\n\n## Client Setup (Examples: Claude Desktop, Cursor)\n\nTo use this server with an MCP client like Claude Desktop or Cursor, you need to configure the client to run the server process and optionally provide the HireBase API key.\n\n1.  **Ensure `uv` is installed:** `curl -LsSf https://astral.sh/uv/install.sh | sh`\n2.  **Obtain a HireBase API Key (optional):** Request a key from [HireBase](https://hirebase.org/) You can set this as an environment variable (`HIREBASE_API_KEY`) or just leave it empty.\n3.  **Configure your client:**\n\n    *   **Using `uvx`:**\n        *   **Claude Desktop:** Edit your `claude_desktop_config.json`:\n            ```json\n            {\n              \"mcpServers\": {\n                \"hirebase\": {\n                  \"command\": \"uvx\",\n                  \"args\": [\n                    \"hirebase-mcp\" \n                  ],\n                  \"env\": {\n                    \"HIREBASE_API_KEY\": \"\" \n                  }\n                }\n              }\n            }\n            ```\n        *   **Cursor:** Go to Settings > MCP > Add Server:\n            *   **Mac/Linux Command:** `uvx hirebase-mcp` (Adjust package name if needed)\n            *   **Windows Command:** `cmd`\n            *   **Windows Args:** `/c`, `uvx`, `hirebase-mcp` (Adjust package name if needed)\n            *   Set the `HIREBASE_API_KEY` environment variable in the appropriate section.\n\n    *   **Running from source via Python (Alternative):**\n        1. Clone the repo and note where you clone it to\n        2. **Claude Desktop:** Edit your `claude_desktop_config.json`:\n        ```\n        {\n            \"mcpServers\": {\n                \"hirebase\": {\n                    \"command\": \"uv\",\n                    \"args\": [\n                        \"run\",\n                        \"--with\",\n                        \"mcp[cli]\",\n                        \"--with\",\n                        \"requests\",\n                        \"mcp\",\n                        \"run\",\n                        \"PATH_TO_REPO/src/hirebase_mcp/server.py\"\n                    ]\n                }\n            }\n        }\n        ```\n\n\n## Development\n\nThis project uses:\n- `uv` for dependency management and virtual environments\n- `ruff` for linting and formatting\n- `hatch` as the build backend\n\n### Common Tasks\n\n```bash\n# Setup virtual env\nuv venv\n\n# Install dependencies\nuv pip install -e .\n\n# install cli tools\nuv tool install ruff\n\n# Run linting\nruff check .\n\n# Format code\nruff format .\n```\n\n## Environment Variables\n\n-   `HIREBASE_API_KEY` (**required**): Your API key for accessing the HireBase API. The server needs this to make authenticated requests for job data.\n\n## Testing\n\nThis project uses `pytest` for testing the core tool logic. Tests mock external API calls using `unittest.mock`.\n\n1. Install test dependencies:\n```bash\n# Ensure you are in your activated virtual environment (.venv)\nuv pip install -e '.[test]'\n```\n\n2. Run tests:\n```bash\n# Example command\npytest\n```\n\n## Contributing\n\nContributions are welcome.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details. ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hirebase",
        "recruiting",
        "hr",
        "jhgaylor hirebase",
        "using hirebase",
        "hirebase api"
      ]
    },
    "kapilduraphe--okta-mcp-server": {
      "owner": "kapilduraphe",
      "name": "okta-mcp-server",
      "url": "https://github.com/kapilduraphe/okta-mcp-server",
      "imageUrl": "https://github.com/kapilduraphe.png",
      "description": "Retrieve and manage user information from Okta's user management system, facilitating user profiles, statuses, and account details management. Automate onboarding processes with secure API access.",
      "stars": 19,
      "forks": 8,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-07T11:19:55Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/kapilduraphe-okta-mcp-server-badge.png)](https://mseep.ai/app/kapilduraphe-okta-mcp-server)\n\n# Okta MCP Server\n\nThis MCP server enables Claude to interact with Okta's user management system, providing comprehensive user and group management capabilities along with onboarding automation.\n\n<a href=\"https://glama.ai/mcp/servers/@kapilduraphe/okta-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kapilduraphe/okta-mcp-server/badge\" alt=\"Okta Server MCP server\" />\n</a>\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- Claude Desktop App\n- Okta Developer Account\n- Admin API Token from Okta\n\n## Setup Instructions\n\n### 1. Create an Okta Developer Account\n- Go to the [Okta Developer Console](https://developer.okta.com/)\n- Create a new account or sign in to an existing one\n- Note your Okta domain (e.g., `dev-123456.okta.com`)\n\n### 2. Create an API Token\n- In the Okta Developer Console, go to Security > API > Tokens\n- Click \"Create Token\"\n- Give your token a meaningful name (e.g., \"MCP Server Token\")\n- Copy the token value (you won't be able to see it again)\n\n### 3. Initial Project Setup\n\nInstall dependencies:\n```bash\nnpm install\n```\n\n### 4. Configure Claude Desktop\n\nOpen your Claude Desktop configuration file:\n\nFor MacOS:\n```bash\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\nFor Windows:\n```bash\ncode %AppData%\\Claude\\claude_desktop_config.json\n```\n\nAdd or update the configuration:\n```json\n{\n    \"mcpServers\": {\n        \"okta\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"PATH_TO_PROJECT_DIRECTORY/dist/index.js\"\n            ],\n            \"env\": {\n                \"OKTA_ORG_URL\": \"https://your-domain.okta.com\",\n                \"OKTA_API_TOKEN\": \"your-api-token\"\n            }\n        }\n    }\n}\n```\n\nSave the file and restart Claude Desktop.\n\n## Available Tools\n\nThe server provides the following tools:\n\n### User Management\n\n#### get_user\nRetrieves detailed user information from Okta, including:\n- User Details (ID, Status)\n- Account Dates (Created, Activated, Last Login, etc.)\n- Personal Information (Name, Email)\n- Employment Details\n- Contact Information\n- Address\n- Preferences\n\n#### find_users_by_attribute\nSearch users by any profile attribute with advanced filtering:\n- **Supported attributes**: firstName, lastName, email, manager, department, title, division, organization, employeeNumber, costCenter, userType, city, state\n- **Search operators**:\n  - `eq` (exact match) - Works for all attributes\n  - `sw` (starts with) - Works for all attributes\n  - `ew` (ends with) - Works for most attributes\n  - `co` (contains) - Works for some attributes (firstName, lastName, email)\n  - `pr` (present/exists) - Works for all attributes (finds users with any value for that attribute)\n- **Features**:\n  - Uses Okta's native search for optimal performance\n  - Automatic fallback to client-side filtering for unsupported operators\n  - PII masking in search results for sensitive attributes\n  - Status filtering (include/exclude inactive users)\n  - Pagination support with customizable limits\n\n#### list_users\nLists users from Okta with optional filtering and pagination:\n- Supports SCIM filter expressions (e.g., 'profile.firstName eq \"John\"')\n- Free-form text search across multiple fields\n- Sorting options (by status, creation date, etc.)\n- Pagination support with customizable limits\n\n#### activate_user\nActivates a user in Okta:\n- Option to send activation email\n- Updates user status to active\n\n#### suspend_user\nSuspends a user in Okta\n\n#### unsuspend_user\nUnsuspends a previously suspended user in Okta\n\n#### delete_user\nDeletes a user from Okta (note: user must be deactivated first)\n\n#### get_user_last_location\nRetrieves the last known location and login information for a user from Okta system logs\n\n### Group Management\n\n#### list_groups\nLists user groups from Okta with optional filtering and pagination:\n- Filter expressions for groups (e.g., 'type eq \"OKTA_GROUP\"')\n- Free-form text search across group fields\n- Sorting options (by name, type, etc.)\n- Pagination support with customizable limits\n\n#### create_group\nCreates a new group in Okta with a name and optional description\n\n#### get_group\nRetrieves detailed information about a specific group\n\n#### delete_group\nDeletes a group from Okta\n\n#### assign_user_to_group\nAssigns a user to a group in Okta\n\n#### remove_user_from_group\nRemoves a user from a group in Okta\n\n#### list_group_users\nLists all users in a specific group with pagination support\n\n### Onboarding Automation (Experimental)\n\n> **Note:** The onboarding automation tools are experimental and may be subject to changes or limitations based on Okta's API constraints. Use with caution in production environments.\n\n#### bulk_user_import\nImports multiple users from a CSV string:\n- Creates user accounts based on CSV data\n- Optional activation of users\n- Optional email notifications\n- Assignment to default groups\n\n#### assign_users_to_groups\nAssigns multiple users to groups based on attribute mappings:\n- Maps user attributes (department, title, etc.) to specific groups\n- Bulk assignment of users based on attributes\n\n#### provision_applications\nProvisions application access for multiple users:\n- Assigns users to applications\n- Supports bulk provisioning\n\n#### run_onboarding_workflow\nRuns a complete onboarding workflow for multiple users from CSV data:\n- User import from CSV\n- Automatic activation\n- Group assignment based on attributes\n- Application provisioning\n- Welcome email configuration\n\n## Example Usage in Claude\n\nAfter setup, you can use commands like:\n\n### User Management\n- \"Show me details for user with userId XXXX\"\n- \"Find all users in the engineering department\"\n- \"Search for users with first name starting with 'John'\"\n- \"Find users whose email contains 'gmail'\"\n- \"Show me all users who have a department assigned\"\n- \"List users whose title is 'Manager'\"\n- \"What's the status of user john.doe@company.com\"\n- \"When was the last login for user jane.smith@organization.com\"\n- \"Find users created in the last month\"\n- \"Activate user with ID XXXX\"\n- \"Suspend user with ID XXXX\"\n- \"Delete deactivated user with ID XXXX\"\n- \"Where did user XXXX last log in from?\"\n\n### Advanced User Searches\n- \"Find all users in the Sales department\" → Uses `find_users_by_attribute` with `department eq \"Sales\"`\n- \"Show me users whose email starts with 'admin'\" → Uses `email sw \"admin\"`\n- \"Find users with any manager assigned\" → Uses `manager pr`\n- \"List users whose last name contains 'smith'\" → Uses `lastName co \"smith\"`\n\n### Group Management\n- \"Show me all groups in my Okta organization\"\n- \"List groups containing the word 'admin'\"\n- \"Create a new group called 'Marketing Team'\"\n- \"Get details for group with ID XXXX\"\n- \"Delete group with ID XXXX\"\n- \"Add user XXXX to group YYYY\"\n- \"Remove user XXXX from group YYYY\"\n- \"List all users in the 'Finance' group\"\n\n### Onboarding Automation\n- \"Import these users from CSV data: [CSV content]\"\n- \"Assign users to groups based on their department attribute\"\n- \"Provision application access for these 5 users\"\n- \"Run a complete onboarding workflow for these new hires: [CSV content]\"\n\n## Error Handling\n\nThe server includes robust error handling for:\n- User or group not found (404 errors)\n- API authentication issues\n- Missing or invalid user profiles\n- General API errors\n- CSV parsing issues\n- User attribute mapping failures\n- Application provisioning errors\n- Unsupported search operators (automatic fallback to alternative methods)\n\n## Troubleshooting\n\n### Common Issues\n\n**Tools not appearing in Claude:**\n- Check Claude Desktop logs: `tail -f ~/Library/Logs/Claude/mcp*.log`\n- Verify all environment variables are set correctly\n- Ensure the path to index.js is absolute and correct\n\n**Authentication Errors:**\n- Verify your API token is valid\n- Check if OKTA_ORG_URL includes the full URL with https://\n- Ensure your Okta domain is correct\n\n**Server Connection Issues:**\n- Check if the server built successfully\n- Verify file permissions on build/index.js (should be 755)\n- Try running the server directly: `node /path/to/build/index.js`\n\n**Search Issues:**\n- Some search operators are not supported for all attributes (e.g., `contains` doesn't work for `department`)\n- The server automatically falls back to alternative search methods when needed\n- Check the response message for which search method was used\n\n### Viewing Logs\n\nTo view server logs:\n\nFor MacOS/Linux:\n```bash\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n```\n\nFor Windows:\n```powershell\nGet-Content -Path \"$env:AppData\\Claude\\Logs\\mcp*.log\" -Wait -Tail 20\n```\n\n### Environment Variables\n\nIf you're getting environment variable errors, verify:\n- `OKTA_ORG_URL`: Should be complete URL (e.g., \"https://dev-123456.okta.com\")\n- `OKTA_API_TOKEN`: Should be a valid API token\n\n## Security Considerations\n\n- Keep your API token secure\n- Don't commit credentials to version control\n- Use environment variables for sensitive data\n- Regularly rotate API tokens\n- Monitor API usage in Okta Admin Console\n- Implement rate limiting for API calls\n- Use minimum required permissions for API token\n- PII masking is enabled for sensitive search parameters\n\n## Search Operator Compatibility\n\nDifferent Okta attributes support different search operators:\n\n| Attribute Type | eq | sw | ew | co | pr |\n|----------------|----|----|----|----|----| \n| firstName, lastName | ✅ | ✅ | ✅ | ✅ | ✅ |\n| email, login | ✅ | ✅ | ✅ | ✅ | ✅ |\n| department, title | ✅ | ✅ | ❌ | ❌* | ✅ |\n| division, organization | ✅ | ✅ | ❌ | ❌* | ✅ |\n| All attributes | ✅ | ✅ | ⚠️ | ⚠️ | ✅ |\n\n*❌ = Not supported, ⚠️ = May not be supported for all attributes\n\n> **Note:** When an operator is not supported, the server automatically falls back to client-side filtering for compatibility.\n\n## Types\n\nThe server includes TypeScript interfaces for Okta user and group data:\n\n```typescript\ninterface OktaUserProfile {\n  login: string;\n  email: string;\n  secondEmail?: string;\n  firstName: string;\n  lastName: string;\n  displayName: string;\n  nickName?: string;\n  organization: string;\n  title: string;\n  division: string;\n  department: string;\n  employeeNumber: string;\n  userType: string;\n  costCenter: string;\n  mobilePhone?: string;\n  primaryPhone?: string;\n  streetAddress: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  countryCode: string;\n  preferredLanguage: string;\n  profileUrl?: string;\n}\n\ninterface OktaUser {\n  id: string;\n  status: string;\n  created: string;\n  activated: string;\n  lastLogin: string;\n  lastUpdated: string;\n  statusChanged: string;\n  passwordChanged: string;\n  profile: OktaUserProfile;\n}\n\ninterface OktaGroup {\n  id: string;\n  created: string;\n  lastUpdated: string;\n  lastMembershipUpdated: string;\n  type: string;\n  objectClass: string[];\n  profile: {\n    name: string;\n    description: string;\n  };\n}\n```\n\n## CSV Format for Onboarding\n\nWhen using the bulk import or onboarding workflow tools, your CSV should include these headers:\n- `firstName` (required)\n- `lastName` (required)\n- `email` (required)\n- `department` (optional)\n- `title` (optional)\n- `mobilePhone` (optional)\n\nExample:\n```csv\nfirstName,lastName,email,department,title,mobilePhone\nJohn,Doe,john.doe@example.com,Engineering,Senior Developer,+1-555-123-4567\nJane,Smith,jane.smith@example.com,Marketing,Director,+1-555-987-6543\n```\n\n## License\n\nMIT License - See LICENSE file for details.\n\n## Support\n\nIf you encounter any issues:\n- Check the troubleshooting section above\n- Review Claude Desktop logs\n- Examine the server's error output\n- Check Okta's developer documentation\n\nNote: PRs welcome!",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "okta",
        "kapilduraphe",
        "hr",
        "okta user",
        "information okta",
        "okta mcp"
      ]
    },
    "merge-api--merge-mcp": {
      "owner": "merge-api",
      "name": "merge-mcp",
      "url": "https://github.com/merge-api/merge-mcp",
      "imageUrl": "https://github.com/merge-api.png",
      "description": "Integrate Merge API data with any LLM provider, enabling natural language queries, entity creation, and updates. Direct access to data models and fields supports various Merge API categories like HRIS and ATS.",
      "stars": 15,
      "forks": 6,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-28T13:48:58Z",
      "readme_content": "# Merge MCP Server\n\nThis MCP (Model Context Protocol) server provides integration between Merge API and any LLM provider supporting the MCP protocol (e.g., Claude for Desktop), allowing you to interact with your Merge data using natural language.\n\n## ✨ Features\n- Query Merge API entities using natural language\n- Get information about your Merge data models and their fields\n- Create and update entities through conversational interfaces\n- Support for multiple Merge API categories (HRIS, ATS, etc.)\n\n## 📦 Installation\n\n### Prerequisites\n\n- A Merge API key and account token\n- Python 3.10 or higher\n- [uv](https://github.com/astral-sh/uv)\n\nInstall `uv` with standalone installer:\n```bash\n# On macOS and Linux.\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# On Windows.\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\nor through pip:\n```bash\n# With pip.\npip install uv\n\n# With pipx.\npipx install uv\n```\n\n## 🔌 MCP setup\nHere is an example config file which you can use to set up Merge MCP.\n\n```json\n{\n    \"mcpServers\": {\n        \"merge-mcp-server\": {\n            \"command\": \"uvx\",\n            \"args\": [\"merge-mcp\"],\n            \"env\": {\n                \"MERGE_API_KEY\": \"your_api_key\",\n                \"MERGE_ACCOUNT_TOKEN\": \"your_account_token\"\n            }\n        }\n    }\n}\n```\nNote: If \"uvx\" command does not work, try absolute path (i.e. /Users/username/.local/bin/uvx)\n\n### Example Claude Desktop configuration\n\n1. Ensure you have `uvx` installed\n\n2. Download [Claude Desktop](https://claude.ai/download) from the official website\n\n3. Once downloaded, open the app and follow the instructions to set up your account\n\n4. Navigate to **Settings → Developer → Edit Config**. This should open a file named `claude_desktop_config.json` in a text editor.\n\n5. Copy the MCP server setup JSON above and paste it into the text editor\n\n6. Replace `your_api_key` and `your_account_token` with your actual Merge API key and Linked Account token. You will also need to replace `uvx` with the absolute path to the command in the config file (i.e. `/Users/username/.local/bin/uvx`). You can find the absolute path by running `which uvx` through your terminal.\n\n7. Save the config file\n\n8. Restart Claude Desktop to see your tools. The tools may take a minute to appear\n\n### Example Python client configuration\n\n1. Setting up your environment\n\n```bash\n# Create project directory\nmkdir mcp-client\ncd mcp-client\n\n# Create virtual environment\npython -m venv .venv\n\n# Activate virtual environment\n# On Windows:\n.venv\\Scripts\\activate\n# On Unix or MacOS:\nsource .venv/bin/activate\n\n# Install required packages\npip install mcp uv anthropic python-dotenv\n\n# Create our main file\ntouch client.py\n```\n\n2. Setting up your API keys\n\n```bash\n# Add your ANTHROPIC_API_KEY and MERGE_API_KEY to .env\necho \"ANTHROPIC_API_KEY=<your Anthropic key here>\" >> .env\necho \"MERGE_API_KEY=<your Merge key here>\" >> .env\n\n# Add .env file to .gitignore\necho \".env\" >> .gitignore\n```\n\n3. Create a `client.py` file and add the following code\n\n```python\nimport os\nimport asyncio\nfrom typing import Optional\nfrom contextlib import AsyncExitStack\n\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\n\nfrom anthropic import Anthropic\nfrom dotenv import load_dotenv\n\nload_dotenv()  # load environment variables from .env\n\nclass MCPClient:\n    def __init__(self):\n        # Initialize session and client objects\n        self.session: Optional[ClientSession] = None\n        self.exit_stack = AsyncExitStack()\n        self.anthropic = Anthropic()\n\n    # Methods will go here\n```\n\n4. Add a `connect_to_server` function to the MCPClient class\n\n```python\nasync def connect_to_server(self, linked_account_token: str):\n    \"\"\"Connect to an MCP server\n    Args:\n        linked_account_token: The token for the associated Linked Account\n    \"\"\"\n\n    server_params = StdioServerParameters(\n        command=\"uvx\",\n        args=[\"merge-mcp\"],\n        env={\n            \"MERGE_API_KEY\": os.getenv(\"MERGE_API_KEY\"),\n            \"MERGE_ACCOUNT_TOKEN\": linked_account_token\n        }\n    )\n\n    stdio_transport = await self.exit_stack.enter_async_context(stdio_client(server_params))\n    self.stdio, self.write = stdio_transport\n    self.session = await self.exit_stack.enter_async_context(ClientSession(self.stdio, self.write))\n\n    await self.session.initialize()\n\n    # List available tools\n    response = await self.session.list_tools()\n    tools = response.tools\n    print(\"\\nConnected to server with tools:\", [tool.name for tool in tools])\n```\n\n5. Add a `process_query` function to the MCPClient class\n\n```python\nasync def process_query(self, query: str) -> str:\n    \"\"\"Process a query using Claude and available tools\"\"\"\n    messages = [\n        {\n            \"role\": \"user\",\n            \"content\": query\n        }\n    ]\n\n    response = await self.session.list_tools()\n    available_tools = [{\n        \"name\": tool.name,\n        \"description\": tool.description,\n        \"input_schema\": tool.inputSchema\n    } for tool in response.tools]\n\n    # Initial Claude API call\n    response = self.anthropic.messages.create(\n        model=\"claude-3-5-sonnet-20241022\",\n        max_tokens=1000,\n        messages=messages,\n        tools=available_tools\n    )\n\n    # Process response and handle tool calls\n    final_text = []\n    assistant_message_content = []\n    for content in response.content:\n        if content.type == 'text':\n            final_text.append(content.text)\n            assistant_message_content.append(content)\n\n        elif content.type == 'tool_use':\n            tool_name = content.name\n            tool_args = content.input\n\n            # Get confirmation for tool call execution\n            confirmation = input(f\"Do you want to call tool '{tool_name}' with arguments {tool_args}? (y/n): \").strip().lower()\n            if confirmation.startswith('y'):\n                result = await self.session.call_tool(tool_name, tool_args)\n                final_text.append(f\"[Calling tool {tool_name} with args {tool_args}]\")\n                assistant_message_content.append(content)\n                messages.append({\n                    \"role\": \"assistant\",\n                    \"content\": assistant_message_content\n                })\n                messages.append({\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\n                            \"type\": \"tool_result\",\n                            \"tool_use_id\": content.id,\n                            \"content\": result.content\n                        }\n                    ]\n                })\n\n                # Get next response from Claude\n                response = self.anthropic.messages.create(\n                    model=\"claude-3-5-sonnet-20241022\",\n                    max_tokens=1000,\n                    messages=messages,\n                    tools=available_tools\n                )\n                final_text.append(response.content[0].text)\n\n            else:\n                final_text.append(f\"[Skipped calling tool {tool_name} with args {tool_args}]\")\n\n    return \"\\n\".join(final_text)\n```\n\n6. Add a `chat_loop` function to the MCPClient class\n\n```python\n    async def chat_loop(self):\n        \"\"\"Run an interactive chat loop\"\"\"\n        print(\"\\nMCP Client Started!\")\n        print(\"Type your queries or 'quit' to exit.\")\n\n        while True:\n            try:\n                query = input(\"\\nQuery: \").strip()\n\n            if query.lower() == 'quit':\n                break\n\n            response = await self.process_query(query)\n            print(\"\\n\" + response)\n\n        except Exception as e:\n            print(f\"\\nError: {str(e)}\")\n```\n\n7. Add a `cleanup` function to the MCPClient class\n\n```python\n    async def cleanup(self):\n        \"\"\"Clean up resources\"\"\"\n        await self.exit_stack.aclose()\n```\n\n8. Add a `main` function to the `client.py` file as the main entry point\n\n```python\nasync def main():\n    client = MCPClient()\n    try:\n        await client.connect_to_server(\"<your Linked Account token here>\")\n        await client.chat_loop()\n    finally:\n        await client.cleanup()\n\nif __name__ == \"__main__\":\n    import sys\n    asyncio.run(main())\n```\n\n9. Running the client\n\n```bash\npython client.py\n```\n\n## 🔍 Scopes\n\nScopes determine which tools are enabled on the MCP server and are used to control access to different parts of the Merge API. **If no scopes are specified, all available scopes will be enabled.**\n\nWhen starting the server, you can specify which scopes to enable. This is done by passing the `--scopes` flag with a list of scopes.\n\n```json\n{\n    \"mcpServers\": {\n        \"merge-mcp-server\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"merge-mcp\",\n                \"--scopes\",\n                \"ats.Job:read\",\n                \"ats.Candidate\",\n                \"ats.Application:write\"\n            ],\n            \"env\": {\n                \"MERGE_API_KEY\": \"your_api_key\",\n                \"MERGE_ACCOUNT_TOKEN\": \"your_account_token\"\n            }\n        }\n    }\n}\n```\n\n### Scope Format\n\nScopes in the Merge MCP server follow a specific format based on the Merge API category and common model names. Each scope is formatted as:\n\n```\n<category>.<CommonModel>:<permission>\n```\n\nWhere:\n- `<category>` is the Merge API category (e.g., `hris`, `ats`, `accounting`)\n- `<CommonModel>` is the name of the Merge Common Model (e.g., `Employee`, `Candidate`, `Account`)\n- `<permission>` is either `read` or `write` (optional - if not specified, all permissions are granted)\n\nExamples of valid scopes:\n- `hris.Employee:read` - Allows reading employee data from HRIS category\n- `ats.Candidate:write` - Allows creating or updating candidate data in ATS category\n- `accounting.Account` - Allows all operations on account data in Accounting category\n\nYou can combine multiple scopes to grant different permissions.\n\n### Important Notes on Scope Availability\n\nThe available scopes depend on your Merge API account configuration and the models the Linked Account has access to. Scopes must be cross-referenced with enabled scopes on your Linked Account:\n\n- **Category Mismatch**: If you specify a scope for a category that doesn't match your Linked Account (e.g., using `ats.Job` with an HRIS Linked Account), no tools for that scope will be returned.\n\n- **Permission Mismatch**: If you request a permission that isn't enabled for your Linked Account (e.g., using `hris.Employee:write` when only read access is enabled), tools requiring that permission won't be returned.\n\n- **Validation**: The server will automatically validate your requested scopes against what's available in your Linked Account and will only enable tools for valid, authorized scopes.\n\nScopes typically correspond to different models or entity types in the Merge API, and they control both read and write access to these entities.\n\n## 🚀 Available Tools\n\nThe Merge MCP server provides access to various Merge API endpoints as tools. The available tools depend on your Merge API category (HRIS, ATS, etc.) and the scopes you have enabled.\n\nTools are dynamically generated based on your Merge API schema and include operations for:\n\n- Retrieving entity details\n- Listing entities\n- Creating new entities\n- Updating existing entities\n- And more, based on your specific Merge API configuration\n\n**Note:** Download tools are not currently supported. This is a known limitation and will be addressed in a future release.\n\n## 🔑 Environment Variables\n\nThe following environment variables are used by the Merge MCP server:\n\n- `MERGE_API_KEY`: Your Merge API key\n- `MERGE_ACCOUNT_TOKEN`: Your Merge Linked Account token\n- `MERGE_TENANT` (Optional): The Merge API tenant. Valid values are `US`, `EU`, and `APAC`. Defaults to `US`.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "merge",
        "hris",
        "hr",
        "merge api",
        "recruiting merge",
        "merge mcp"
      ]
    },
    "monostate--Employees-Airdrop-Rewards-MCP": {
      "owner": "monostate",
      "name": "Employees-Airdrop-Rewards-MCP",
      "url": "https://github.com/monostate/Employees-Airdrop-Rewards-MCP",
      "imageUrl": "https://github.com/monostate.png",
      "description": "Facilitates the distribution of Solana tokens to employees by managing wallet addresses and allowing role-based token allocation. Automates the process with features like CSV imports, gas fee estimation, and email notifications for HR teams.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-03-30T21:54:57Z",
      "readme_content": "# Crossmint HR Airdrop MCP\n\nA Model Context Protocol (MCP) server to help corporate HR teams airdrop Solana tokens to employees. This project provides an efficient way to distribute tokens to employee wallet addresses, with support for role-based allocation and automated email notifications.\n\n## Features\n\n- **Wallet Management**: Connect a Solana wallet or Crossmint wallet to sign and fund transactions\n- **Token Creation**: Create custom tokens on the Solana blockchain\n- **Liquidity Management**: Add liquidity to new tokens via Raydium AMM\n- **Custodial Wallet Generation**: Create Crossmint custodial wallets for employees\n- **CSV Import**: Upload employee data with name, email, and role information\n- **Role-Based Allocation**: Distribute tokens based on employee roles\n- **Gas Fee Estimation**: Calculate transaction fees before airdrop\n- **Compressed Airdrops**: Use ZK light protocol for efficient token distribution\n- **Email Notifications**: Send employees instructions to access their tokens\n\n## Prerequisites\n\n- Node.js (v16+)\n- pnpm package manager\n- Solana wallet with SOL for transaction fees\n- Crossmint API key for custodial wallet creation\n- Resend API key for sending emails\n- Helius API key for compressed transactions (optional)\n\n## Installation\n\n### 1. Clone and Setup\n\n```\ngit clone https://github.com/monostate/Employees-Airdrop-Rewards-MCP.git\ncd crossmint-hr-airdrop-mcp\n./setup.sh\n```\n\nThe setup script will:\n- Install dependencies\n- Clone required repositories\n- Create a `.env` file template\n- Build the project\n\n### 2. Configure Environment Variables\n\nEdit the `.env` file with your API keys and configuration:\n\n```\n# Crossmint API Key (required for custodial wallet creation)\nCROSSMINT_API_KEY=your_crossmint_api_key\n\n# Crossmint Email (required for wallet operations)\nCROSSMINT_EMAIL=your_email@example.com\n\n# Resend API Key (required for sending emails)\nRESEND_API_KEY=your_resend_api_key\n\n# Helius API Key (optional, for compressed transactions)\nHELIUS_API_KEY=your_helius_api_key\n\n# Solana RPC URL (optional, defaults to mainnet-beta)\nSOLANA_RPC_URL=https://api.mainnet-beta.solana.com\n```\n\n### 3. Install to Claude Desktop\n\n```bash\npnpm install-mcp\n```\n\nThis will install the MCP server to Claude Desktop. You'll need to restart Claude Desktop to load the new MCP server.\n\n## Usage Guide\n\nOnce configured, you can use the HR Airdrop MCP server with Claude Desktop by giving it instructions like:\n\n1. Connect a Solana wallet or Crossmint wallet\n2. Create a token for employee rewards\n3. Add liquidity to the token\n4. Generate custodial wallets for employees \n5. Upload a CSV with employee roles\n6. Calculate token distribution\n7. Calculate gas fees\n8. Perform the airdrop\n9. Send notification emails\n\n### Available Tools\n\n- `connect_wallet`: Connect a Solana wallet\n- `connect_crossmint_wallet`: Connect a Crossmint wallet\n- `check_balance`: Check wallet SOL balance\n- `create_token`: Create a new token\n- `add_liquidity`: Add liquidity to the token\n- `generate_wallets`: Create custodial wallets for employees\n- `upload_csv`: Process employee data from CSV\n- `calculate_amounts`: Calculate token distribution amounts\n- `calculate_fees`: Calculate gas fees for the airdrop\n- `start_airdrop`: Perform the token airdrop\n- `send_emails`: Send notifications to employees\n- `get_state`: Check the current state of the airdrop process\n\n## CSV Format\n\nFor role-based token distribution, prepare a CSV file with the following columns:\n\n```\nname,email,role\nJohn Doe,john@example.com,developer\nJane Smith,jane@example.com,manager\n```\n\nSupported roles: `operational`, `developer`, `manager`, `VP`, `VIP`\n\n## Development\n\nTo make changes to the project:\n\n1. Modify the TypeScript files in `src/`\n2. Rebuild with `pnpm build`\n3. Update your Claude Desktop configuration if needed\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built with the [Model Context Protocol](https://github.com/modelcontextprotocol)\n- Uses the [@solana/web3.js](https://github.com/solana-labs/solana-web3.js) library\n- Uses the [Crossmint SDK](https://github.com/Crossmint/crossmint-sdk) for wallet management\n- Uses the [GOAT SDK](https://github.com/goat-sdk/goat) for Solana wallet integration\n\n![IYHeE1GSOf4ow3i3-generated_image](https://github.com/user-attachments/assets/6d150a61-ea22-4b03-b09d-074b36435aab)\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tokens",
        "solana",
        "airdrop",
        "solana tokens",
        "airdrop rewards",
        "tokens employees"
      ]
    },
    "shivonai--python_package": {
      "owner": "shivonai",
      "name": "python_package",
      "url": "https://github.com/shivonai/python_package",
      "imageUrl": "https://github.com/shivonai.png",
      "description": "Integrates custom hiring tools with AI agents, enabling efficient recruitment processes across various frameworks. Supports seamless integration with LangChain, LlamaIndex, CrewAI, and Agno for enhanced task execution and data analysis.",
      "stars": 0,
      "forks": 0,
      "license": "Other",
      "language": "Python",
      "updated_at": "2025-05-03T18:19:44Z",
      "readme_content": "# ShivonAI\n\nA Python package for integrating AI recruitment tools with various AI agent frameworks.\n\n## Features\n\n- Acess custom hiring tools for AI agents\n- Integrate MCP tools with popular AI agent frameworks:\n  - LangChain\n  - LlamaIndex\n  - CrewAI\n  - Agno\n\n## Generate auth_token\n\nvisit https://shivonai.com to generate your auth_token.\n\n## Installation\n\n```bash\npip install shivonai[langchain]  # For LangChain\npip install shivonai[llamaindex]  # For LlamaIndex\npip install shivonai[crewai]     # For CrewAI\npip install shivonai[agno]       # For Agno\npip install shivonai[all]        # For all frameworks\n```\n\n## Getting Started\n\n### LangChain Integration\n\n```python\nfrom langchain_openai import ChatOpenAI\nfrom langchain.agents import initialize_agent, AgentType\nfrom shivonai.lyra import langchain_toolkit\n\n# Replace with your actual MCP server details\nauth_token = \"shivonai_auth_token\"\n\n# Get LangChain tools\ntools = langchain_toolkit(auth_token)\n\n# Print available tools\nprint(f\"Available tools: {[tool.name for tool in tools]}\")\n\n# Initialize LangChain agent with tools\nllm = ChatOpenAI(\n            temperature=0,\n            model_name=\"gpt-4-turbo\",\n            openai_api_key=\"openai-api-key\"\n        )\n\nagent = initialize_agent(\n    tools=tools,\n    llm=llm,\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True\n)\n\n# Try running the agent with a simple task\ntry:\n    result = agent.run(\"what listing I have?\")\n    print(f\"Result: {result}\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n```\n\n### LlamaIndex Integration\n\n```python\nfrom llama_index.llms.openai import OpenAI\nfrom llama_index.core.agent import ReActAgent\nfrom shivonai.lyra import llamaindex_toolkit\n\n# Set up OpenAI API key - you'll need this to use OpenAI models with LlamaIndex\nos.environ[\"OPENAI_API_KEY\"] = \"openai_api_key\"\n\n# Your MCP server authentication details\nMCP_AUTH_TOKEN = \"shivonai_auth_token\"\n\n\ndef main():\n    \"\"\"Test LlamaIndex integration with ShivonAI.\"\"\"\n    print(\"Testing LlamaIndex integration with ShivonAI...\")\n    \n    # Get LlamaIndex tools from your MCP server\n    tools = llamaindex_toolkit(MCP_AUTH_TOKEN)\n    print(f\"Found {len(tools)} MCP tools for LlamaIndex:\")\n    \n    for name, tool in tools.items():\n        print(f\"  - {name}: {tool.metadata.description[:60]}...\")\n    \n    # Create a LlamaIndex agent with these tools\n    llm = OpenAI(model=\"gpt-4\")\n    \n    # Convert tools dictionary to a list\n    tool_list = list(tools.values())\n    \n    # Create the ReAct agent\n    agent = ReActAgent.from_tools(\n        tools=tool_list,\n        llm=llm,\n        verbose=True\n    )\n    \n    # Test the agent with a simple query that should use one of your tools\n    # Replace this with a query that's relevant to your tools\n    query = \"what listings I have?\"\n    \n    print(\"\\nTesting agent with query:\", query)\n    response = agent.chat(query)\n    \n    print(\"\\nAgent response:\")\n    print(response)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### CrewAI Integration\n\n```python\nfrom crewai import Agent, Task, Crew\nfrom langchain_openai import ChatOpenAI  # or any other LLM you prefer\nfrom shivonai.lyra import crew_toolkit\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = \"oepnai_api_key\"\n\nllm = ChatOpenAI(temperature=0.7, model=\"gpt-4\")\n\n# Get CrewAI tools\ntools = crew_toolkit(\"shivonai_auth_token\")\n\n# Print available tools\nprint(f\"Available tools: {[tool.name for tool in tools]}\")\n\n# Create an agent with these tools\nagent = Agent(\n    role=\"Data Analyst\",\n    goal=\"Analyze data using custom tools\",\n    backstory=\"You're an expert data analyst with access to custom tools\",\n    tools=tools,\n    llm=llm  # Provide the LLM here\n)\n\n# Create a task - note the expected_output field\ntask = Task(\n    description=\"what listings I have?\",\n    expected_output=\"A detailed report with key insights and recommendations\",\n    agent=agent\n)\n\ncrew = Crew(\n    agents=[agent],\n    tasks=[task])\n\nresult = crew.kickoff()\nprint(result)\n```\n\n### Agno Integration\n\n```python\nfrom agno.agent import Agent\nfrom agno.models.openai import OpenAIChat\nfrom shivonai.lyra import agno_toolkit\nimport os\nfrom agno.models.aws import Claude\n\n# Replace with your actual MCP server details\nauth_token = \"Shivonai_auth_token\"\n\nos.environ[\"OPENAI_API_KEY\"] = \"oepnai_api_key\"\n\n# Get Agno tools\ntools = agno_toolkit(auth_token)\n\n# Print available tools\nprint(f\"Available MCP tools: {list(tools.keys())}\")\n\n# Create an Agno agent with tools\nagent = Agent(\n    model=OpenAIChat(id=\"gpt-3.5-turbo\"),\n    tools=list(tools.values()),\n    markdown=True,\n    show_tool_calls=True\n)\n\n# Try the agent with a simple task\ntry:\n    agent.print_response(\"what listing are there?\", stream=True)\nexcept Exception as e:\n    print(f\"Error: {e}\")\n```\n\n## License\n\nThis project is licensed under a Proprietary License – see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "recruitment",
        "shivonai",
        "recruiting",
        "recruiting shivonai",
        "shivonai python_package",
        "hiring tools"
      ]
    },
    "tbensonwest--loxo-mcp-server": {
      "owner": "tbensonwest",
      "name": "loxo-mcp-server",
      "url": "https://github.com/tbensonwest/loxo-mcp-server",
      "imageUrl": "https://github.com/tbensonwest.png",
      "description": "Interact with the Loxo recruitment platform API to manage candidates, jobs, activities, and call queues.",
      "stars": 0,
      "forks": 6,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-01-08T16:17:39Z",
      "readme_content": "# Loxo MCP Server\r\n\r\nA Model Context Protocol (MCP) server that provides tools for interacting with the Loxo recruitment platform API. This server enables AI assistants to perform various recruitment-related tasks such as managing candidates, jobs, activities, and call queues.\r\n\r\n## Installation\r\n\r\n```bash\r\n# Clone the repository\r\ngit clone [repository-url]\r\ncd loxo-mcp-server\r\n\r\n# Install dependencies\r\nnpm install\r\n\r\n# Build the project\r\nnpm run build\r\n```\r\n\r\n## Configuration\r\n\r\nCopy the provided `.env.example` file to `.env` and fill in your values:\r\n\r\n```bash\r\ncp .env.example .env\r\n```\r\n\r\nThen update the `.env` file with your configuration:\r\n\r\n```env\r\nLOXO_API_KEY=your_api_key\r\nLOXO_DOMAIN=app.loxo.co\r\nLOXO_AGENCY_SLUG=your_agency_slug\r\n```\r\n\r\nRequired environment variables:\r\n- `LOXO_API_KEY`: Your Loxo API key\r\n- `LOXO_AGENCY_SLUG`: Your agency's slug in Loxo\r\n- `LOXO_DOMAIN`: (Optional) Defaults to 'app.loxo.co'\r\n\r\n## Available Tools\r\n\r\n### Activity Management\r\n- `get-activity-types`: Retrieve list of available activity types\r\n- `spark-search-activity-types`: Get activity types from Spark Search\r\n- `get-todays-tasks`: Get all tasks and scheduled activities for today\r\n- `schedule-activity`: Schedule a future activity (call, meeting, etc.)\r\n- `log-activity`: Log an activity for a candidate or job\r\n\r\n### Call Queue Management\r\n- `get-call-queue`: View the current call queue\r\n- `add-to-call-queue`: Add a candidate or contact to the call queue\r\n\r\n### Candidate Management\r\n- `search-candidates`: Search for candidates in Loxo\r\n- `get-candidate`: Get detailed information about a specific candidate\r\n- `add-note`: Add a note to a candidate\r\n\r\n### Job Management\r\n- `search-jobs`: Search for jobs in Loxo\r\n- `get-job`: Get detailed information about a specific job\r\n- `add-note`: Add a note to a job\r\n\r\n## Development\r\n\r\n```bash\r\n# Run in development mode with watch mode\r\nnpm run dev\r\n\r\n# Build the project\r\nnpm run build\r\n\r\n# Start the server\r\nnpm start\r\n```\r\n\r\n## Type Safety\r\n\r\nThe server uses Zod for runtime type validation of:\r\n- Environment variables\r\n- Tool input parameters\r\n- API responses\r\n\r\n## Error Handling\r\n\r\nThe server includes comprehensive error handling for:\r\n- Environment validation\r\n- API request failures\r\n- Invalid tool parameters\r\n- Unknown tool requests\r\n\r\n## Architecture\r\n\r\n- Built using the Model Context Protocol SDK\r\n- Communicates over stdio for seamless integration with AI assistants\r\n- Uses TypeScript for type safety and better developer experience\r\n- Implements RESTful API calls to Loxo's platform\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "recruitment",
        "loxo",
        "tbensonwest",
        "loxo recruitment",
        "tbensonwest loxo",
        "loxo mcp"
      ]
    },
    "wonnyboi--mcp-server": {
      "owner": "wonnyboi",
      "name": "mcp-server",
      "url": "https://github.com/wonnyboi/mcp-server",
      "imageUrl": "https://github.com/wonnyboi.png",
      "description": "Automates the collection of project information from GitHub for students, assisting in resume writing, interview question generation, and portfolio management. Provides tools for project-based self-introduction and interview practice to streamline career preparation.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-09T07:36:39Z",
      "readme_content": "# MCP (My Career Portfolio) Server\n\nSSAFY 학생들을 위한 프로젝트 포트폴리오 및 면접 준비 도우미 서버입니다.\n\n## 주요 기능\n\n1. 프로젝트 정보 수집\n\n   - GitHub 저장소 연동\n   - 프로젝트 정보 자동 수집\n   - 역할별 상세 정보 수집\n\n2. 자기소개서 작성 지원\n\n   - 프로젝트 기반 자기소개서 작성\n   - 자기소개서 수정 및 관리\n\n3. 면접 준비\n\n   - 프로젝트 기반 면접 질문 생성\n   - 면접 답변 연습\n   - 면접 피드백\n\n4. 포트폴리오 작성\n   - 프로젝트 기반 포트폴리오 작성\n   - 포트폴리오 수정 및 관리\n\n## 설치 방법\n\n1. 저장소 클론\n\n```bash\ngit clone https://github.com/wonnyboi/mcp-server.git\ncd mcp-server\n```\n\n2. 가상환경 생성 및 활성화\n\n```bash\npython -m venv venv\nsource venv/bin/activate  # Linux/Mac\nvenv\\Scripts\\activate     # Windows\n```\n\n3. 의존성 설치\n\n```bash\npip install -r requirements.txt\n```\n\n4. GitHub 토큰 설정\n\n   - GitHub.com → Settings → Developer settings → Personal access tokens → Tokens (classic)\n   - 'Generate new token' 클릭\n   - Note: 'MCP Portfolio Access' 입력\n   - Expiration: 'No expiration' 선택\n   - Select scopes: 'repo' 체크\n   - 'Generate token' 클릭\n   - 생성된 토큰을 복사\n   - 프로젝트 루트 디렉토리에 '.env' 파일 생성\n   - 다음 내용을 입력:\n     ```\n     GITHUB_TOKEN=your_github_token_here\n     ```\n\n5. 서버 실행\n\n```bash\npython project_portfolio_server.py\n```\n\n## 사용 방법\n\n1. 프로젝트 추가\n\n   - GitHub 저장소 URL 입력\n   - 프로젝트 유형 선택\n   - 역할 선택\n   - 상세 정보 입력\n\n2. 자기소개서 작성\n\n   - 프로젝트 기반 자기소개서 작성\n   - 수정 및 관리\n\n3. 면접 준비\n\n   - 프로젝트 기반 면접 질문 생성\n   - 답변 연습\n   - 피드백 수집\n\n4. 포트폴리오 작성\n   - 프로젝트 기반 포트폴리오 작성\n   - 수정 및 관리\n\n## 프로젝트 구조\n\n```\nmcp-server/\n├── project_data/           # 프로젝트 데이터 저장\n├── project_portfolio_server.py  # 메인 서버 파일\n├── requirements.txt        # 의존성 목록\n├── .env                   # 환경 변수 (GitHub 토큰)\n└── README.md             # 프로젝트 설명\n```\n\n## 기여 방법\n\n1. Fork the Project\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the Branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## 라이선스\n\n이 프로젝트는 MIT 라이선스 하에 배포됩니다. 자세한 내용은 [LICENSE](LICENSE) 파일을 참조하세요.\n\n## 연락처\n\n프로젝트 관리자 - [@wonnyboi](https://github.com/wonnyboi)\n\n프로젝트 링크: [https://github.com/wonnyboi/mcp-server](https://github.com/wonnyboi/mcp-server)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "recruiting",
        "github",
        "mcp",
        "recruiting wonnyboi",
        "hr recruiting",
        "wonnyboi mcp"
      ]
    }
  }
}